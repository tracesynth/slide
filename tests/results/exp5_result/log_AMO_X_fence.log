now is the 1 iteration
synth ppo by litmus test 0
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.r.rw+fence.rw.rw': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; , [x]=2; [y]=2; ]}
now_herd_logs_ppo_remove {'2+2W+fence.r.rw+fence.rw.rw': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
2+2W+fence.r.rw+fence.rw.rw
[[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]
[[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; , [x]=2; [y]=2; ]
['2+2W+fence.r.rw+fence.rw.rw']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.r.rwdWW/2+2W+fence.r.rw+fence.rw.rw.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x5=2; 0:x7=1; 1:x5=2; 1:x7=1; 0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence r, rw  | <0x04> fence rw, rw ;
<0x08> sw x7, 0(x8) | <0x08> sw x7, 0(x8) ;

QType.Exists (x==2/\y==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
[x]=1; [y]=1;  => 1
[x]=1; [y]=2;  => 1
[x]=2; [y]=1;  => 1
Time 2+2W+fence.r.rw+fence.rw.rw  0.0380s
#Executions: 24

validate litmus by cur_mm
{0:x5=2; 0:x7=1; 1:x5=2; 1:x7=1; 0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence r, rw  | <0x04> fence rw, rw ;
<0x08> sw x7, 0(x8) | <0x08> sw x7, 0(x8) ;

QType.Exists (x==2/\y==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
[x]=1; [y]=1;  => 1
[x]=1; [y]=2;  => 1
[x]=2; [y]=1;  => 1
[x]=2; [y]=2;  => 1
Time 2+2W+fence.r.rw+fence.rw.rw  0.0341s
#Executions: 24

failed file: /home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.r.rwdWW/2+2W+fence.r.rw+fence.rw.rw.litmus
strengthen,s,exe [x]=2; [y]=2;  [P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	(W), ['po', 'fence_r_rw']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_r_rw')
now check the paths P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_r_rw')]
from this path get ppo
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True
candidate_add_ppo W;po;W
all_rels
rel --: None P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['po', 'fence_r_rw']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	(W), ['po', 'fence_r_rw']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
add_rels_final
add rel final P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel final P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['po', 'fence_r_rw']
check all rels
check rel --: None P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['po', 'fence_r_rw']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')]
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	(W), ['po', 'fence_r_rw']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	]]
ppo [W];po;[W]
e1 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
e2 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
cycle str
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
cycle str after change
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
cycle str after change
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWW Coe Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True
candidate_add_ppo W;fence_r_rw;W
all_rels
rel --: None P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['po', 'fence_r_rw']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	(W), ['po', 'fence_r_rw']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.r.rw);[W]
need_check_ppo [W];fencerel(Fence.r.rw);[W] target_ppo [W];fencerel(Fence.r.rw);[W]
add_rels_final
add rel final P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['po', 'fence_r_rw']
check all rels
check rel --: None P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['po', 'fence_r_rw']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	(W), ['po', 'fence_r_rw']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.r.rw);[W]
need_check_ppo [W];fencerel(Fence.r.rw);[W] target_ppo [W];fencerel(Fence.r.rw);[W]
insert_path [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_r_rw')]
{}
filter_cycle [[P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	]]
ppo [W];fencerel(Fence.r.rw);[W]
e1 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
e2 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
cycle str
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
cycle str after change
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
cycle str after change
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];fencerel(Fence.r.rw);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.r.rw);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.r.rwdWW Coe Fence.rw.rwdWW Coe
stengthen state, [x]=2; [y]=2;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586bf089160> [P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586bea10200>] False
{0:x5=2; 0:x7=1; 1:x5=2; 1:x7=1; 0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence r, rw  | <0x04> fence rw, rw ;
<0x08> sw x7, 0(x8) | <0x08> sw x7, 0(x8) ;

QType.Exists (x==2/\y==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
[x]=1; [y]=1;  => 1
[x]=1; [y]=2;  => 1
[x]=2; [y]=1;  => 1
[x]=2; [y]=2;  => 1
Time 2+2W+fence.r.rw+fence.rw.rw  0.0292s
#Executions: 12

complete exe list
get new mm
uninit_func_list
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];po;[W], relax is False
candidate_ppo: [W];fencerel(Fence.r.rw);[W], relax is False
ID: 0 cur candidate_ppo: [W];po;[W],relax is False
[W];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[W] contain_flag False can_relax_flag False
add ppo [W];po;[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];po;[W]']
ppo [W];po;[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe.litmus PodWW Coe Fence.rw.rwdWW Coe
[W];po;[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];po;[W]
ppo [W];po;[W]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
['W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe']
ID: 1 cur candidate_ppo: [W];fencerel(Fence.r.rw);[W],relax is False
[W];fencerel(Fence.r.rw);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.r.rw);[W] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.r.rw);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]']
W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe.litmus
W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe.litmus.litmus
ppo [W];fencerel(Fence.r.rw);[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe.litmus Fence.r.rwdWW Coe Fence.rw.rwdWW Coe
[W];fencerel(Fence.r.rw);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
ppo [W];fencerel(Fence.r.rw);[W]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
['W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe']
check ppo [W];po;[W]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
['W_po_W_PodWW_Coe_Fence_rw_rwdWW_Coe']
check ppo [W];po;[W] False
check ppo [W];fencerel(Fence.r.rw);[W]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
check ppo [W];fencerel(Fence.r.rw);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.r.rw);[W]
start check
check counter ppo
ppo:[W];fencerel(Fence.r.rw);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.r.rw);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.r.rwdWW/2+2W+fence.r.rw+fence.rw.rw.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.r.rw+fence.rw.rw': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2W+fence.r.rw+fence.rw.rw': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
candidate_ppo: [W];fencerel(Fence.r.rw);[W], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.r.rw);[W] pass test
==== candidate ppo ====
[W];fencerel(Fence.r.rw);[W] [W];fencerel(Fence.r.rw);[W] False
finished /home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.r.rwdWW/2+2W+fence.r.rw+fence.rw.rw.litmus
synth ppo by litmus test 1
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.r.rw+fence.rw.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.r.rw+fence.rw.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 2
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.rw+fence.rw.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=0; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.rw+fence.rw.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
MP+fence.rw.rw+fence.rw.w
[1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]
[1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=0; , 1:x5=1; 1:x7=1; ]
['MP+fence.rw.rw+fence.rw.w']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.rw.wdRR/MP+fence.rw.rw+fence.rw.w.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x5=1; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> lw x5, 0(x6) ;
<0x04> fence rw, rw | <0x04> fence rw, w  ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (1:x5==1/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
1:x5=0; 1:x7=0;  => 1
1:x5=0; 1:x7=1;  => 1
1:x5=1; 1:x7=1;  => 1
Time MP+fence.rw.rw+fence.rw.w  0.0383s
#Executions: 18

validate litmus by cur_mm
{0:x5=1; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> lw x5, 0(x6) ;
<0x04> fence rw, rw | <0x04> fence rw, w  ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (1:x5==1/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x5=0; 1:x7=0;  => 1
1:x5=0; 1:x7=1;  => 1
1:x5=1; 1:x7=0;  => 1
1:x5=1; 1:x7=1;  => 1
Time MP+fence.rw.rw+fence.rw.w  0.0327s
#Executions: 18

failed file: /home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.rw.wdRR/MP+fence.rw.rw+fence.rw.w.litmus
strengthen,s,exe 1:x5=1; 1:x7=0;  [P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_rw_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')
now check the paths P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')]
from this path get ppo
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False
candidate_add_ppo R;po;R
all_rels
rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_rw_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_rw_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')]]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
add_rels_final
add rel final P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_rw_w']
check all rels
check rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_rw_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_rw_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')]]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
insert_path [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
{}
filter_cycle [[P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	]]
ppo [R];po;[R]
e1 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
e2 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str after change
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
cycle str after change
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
start_relation fre
end relation rfe
path_single_ppo [R];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False
candidate_add_ppo R;fence_rw_w;R
all_rels
rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_rw_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_rw_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')]]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.rw.w);[R]
need_check_ppo [R];fencerel(Fence.rw.w);[R] target_ppo [R];fencerel(Fence.rw.w);[R]
add_rels_final
add rel final P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_rw_w']
check all rels
check rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_rw_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_rw_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')]]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.rw.w);[R]
need_check_ppo [R];fencerel(Fence.rw.w);[R] target_ppo [R];fencerel(Fence.rw.w);[R]
insert_path [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_w')]
{}
filter_cycle [[P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	]]
ppo [R];fencerel(Fence.rw.w);[R]
e1 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
e2 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str after change
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
cycle str after change
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
start_relation fre
end relation rfe
path_single_ppo [R];fencerel(Fence.rw.w);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.rw.w);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.rw.wdRR Fre Fence.rw.rwdWW Rfe
stengthen state, 1:x5=1; 1:x7=0;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586beb87410> [P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586be598ad0>] False
{0:x5=1; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> lw x5, 0(x6) ;
<0x04> fence rw, rw | <0x04> fence rw, w  ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (1:x5==1/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x5=0; 1:x7=0;  => 1
1:x5=0; 1:x7=1;  => 1
1:x5=1; 1:x7=0;  => 1
1:x5=1; 1:x7=1;  => 1
Time MP+fence.rw.rw+fence.rw.w  0.0275s
#Executions: 9

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];po;[R], relax is False
candidate_ppo: [R];fencerel(Fence.rw.w);[R], relax is False
ID: 0 cur candidate_ppo: [R];po;[R],relax is False
[R];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[R] contain_flag False can_relax_flag False
add ppo [R];po;[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po;[R]
[R];rsw;[R]
[R];po;[R]
[AMO];po-loc;[R]
[R];po;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '([R];po\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])']
ppo [R];po;[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus PodRR Fre Fence.rw.rwdWW Rfe
[R];po;[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
([R];po\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
ppo [R];po;[R]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe']
ID: 1 cur candidate_ppo: [R];fencerel(Fence.rw.w);[R],relax is False
[R];fencerel(Fence.rw.w);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.rw.w);[R] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.rw.w);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]']
R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus.litmus
R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus
ppo [R];fencerel(Fence.rw.w);[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus Fence.rw.wdRR Fre Fence.rw.rwdWW Rfe
[R];fencerel(Fence.rw.w);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
ppo [R];fencerel(Fence.rw.w);[R]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];po;[R]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po;[R]
[R];rsw;[R]
[R];po;[R]
[AMO];po-loc;[R]
[R];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];po;[R] False
check ppo [R];fencerel(Fence.rw.w);[R]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
check ppo [R];fencerel(Fence.rw.w);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.rw.w);[R]
start check
check counter ppo
ppo:[R];fencerel(Fence.rw.w);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.rw.w);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.rw.wdRR/MP+fence.rw.rw+fence.rw.w.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.rw+fence.rw.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.rw+fence.rw.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
candidate_ppo: [R];fencerel(Fence.rw.w);[R], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.rw.w);[R] pass test
==== candidate ppo ====
[R];fencerel(Fence.rw.w);[R] [R];fencerel(Fence.rw.w);[R] False
finished /home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.rw.wdRR/MP+fence.rw.rw+fence.rw.w.litmus
synth ppo by litmus test 3
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.w+fence.rw.rw': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; , 0:x5=1; 1:x5=1; ]}
now_herd_logs_ppo_remove {'LB+fence.w.w+fence.rw.rw': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
LB+fence.w.w+fence.rw.rw
[0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]
[0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; , 0:x5=1; 1:x5=1; ]
['LB+fence.w.w+fence.rw.rw']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdRW/LB+fence.w.w+fence.rw.rw.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x7=1; 1:x7=1; 0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> lw x5, 0(x6) | <0x00> lw x5, 0(x6) ;
<0x04> fence w, w   | <0x04> fence rw, rw ;
<0x08> sw x7, 0(x8) | <0x08> sw x7, 0(x8) ;

QType.Exists (0:x5==1/\1:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x5=0; 1:x5=0;  => 1
0:x5=0; 1:x5=1;  => 1
0:x5=1; 1:x5=0;  => 1
Time LB+fence.w.w+fence.rw.rw  0.0396s
#Executions: 18

validate litmus by cur_mm
{0:x7=1; 1:x7=1; 0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> lw x5, 0(x6) | <0x00> lw x5, 0(x6) ;
<0x04> fence w, w   | <0x04> fence rw, rw ;
<0x08> sw x7, 0(x8) | <0x08> sw x7, 0(x8) ;

QType.Exists (0:x5==1/\1:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 1:x5=0;  => 1
0:x5=0; 1:x5=1;  => 1
0:x5=1; 1:x5=0;  => 1
0:x5=1; 1:x5=1;  => 1
Time LB+fence.w.w+fence.rw.rw  0.0347s
#Executions: 18

failed file: /home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdRW/LB+fence.w.w+fence.rw.rw.litmus
strengthen,s,exe 0:x5=1; 1:x5=1;  [P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	(W), ['po', 'fence_w_w']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_w_w')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_w_w')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 False True
candidate_add_ppo R;po;W
all_rels
rel --: None P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
rel P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 False True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 False True ['fence', 'po', 'fence_rw_rw']
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 False True ['po', 'fence_w_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [R];fencerel(Fence.rw.rw);[W] target_ppo [R];po;[W]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	(W), ['po', 'fence_w_w']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_w_w')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
add_rels_final
add rel final P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 False True ['fence', 'po', 'fence_rw_rw']
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 False True ['po', 'fence_w_w']
check all rels
check rel --: None P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
check rel P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 False True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 False True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 False True ['po', 'fence_w_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [R];fencerel(Fence.rw.rw);[W] target_ppo [R];po;[W]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
insert_path [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, 'po')]
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	(W), ['po', 'fence_w_w']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_w_w')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	]]
ppo [R];po;[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
cycle str
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
cycle str after change
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
start_relation rfe
end relation rfe
path_single_ppo [R];po;[W]
other_single_ppo rfe;[R];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[W]
other_single_ppo justify rfe;[R];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRW Rfe Fence.rw.rwdRW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 False True
candidate_add_ppo R;fence_w_w;W
all_rels
rel --: None P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
rel P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 False True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 False True ['po', 'fence_w_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	(W), ['po', 'fence_w_w']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_w_w')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.w.w);[W]
need_check_ppo [R];fencerel(Fence.w.w);[W] target_ppo [R];fencerel(Fence.w.w);[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 False True ['po', 'fence_w_w']
check all rels
check rel --: None P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
check rel P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	 False True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	 False True ['po', 'fence_w_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	(W), ['po', 'fence_w_w']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_w_w')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.w.w);[W]
need_check_ppo [R];fencerel(Fence.w.w);[W] target_ppo [R];fencerel(Fence.w.w);[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, 'fence_w_w')]
{}
filter_cycle [[P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	]]
ppo [R];fencerel(Fence.w.w);[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
cycle str
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
cycle str after change
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	
start_relation rfe
end relation rfe
path_single_ppo [R];fencerel(Fence.w.w);[W]
other_single_ppo rfe;[R];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.w.w);[W]
other_single_ppo justify rfe;[R];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.w.wdRW Rfe Fence.rw.rwdRW Rfe
stengthen state, 0:x5=1; 1:x5=1;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586beb42210> [P0: <0x08>	sw x7_p0_0, 0(x8_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	sw x7_p1_0, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586be9333b0>] False
{0:x7=1; 1:x7=1; 0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> lw x5, 0(x6) | <0x00> lw x5, 0(x6) ;
<0x04> fence w, w   | <0x04> fence rw, rw ;
<0x08> sw x7, 0(x8) | <0x08> sw x7, 0(x8) ;

QType.Exists (0:x5==1/\1:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 1:x5=0;  => 1
0:x5=0; 1:x5=1;  => 1
0:x5=1; 1:x5=0;  => 1
0:x5=1; 1:x5=1;  => 1
Time LB+fence.w.w+fence.rw.rw  0.0300s
#Executions: 9

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];po;[W], relax is False
candidate_ppo: [R];fencerel(Fence.w.w);[W], relax is False
ID: 0 cur candidate_ppo: [R];po;[W],relax is False
[R];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[W] contain_flag False can_relax_flag False
add ppo [R];po;[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];po;[W]']
ppo [R];po;[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_po_W_PodRW_Rfe_Fence_rw_rwdRW_Rfe.litmus PodRW Rfe Fence.rw.rwdRW Rfe
[R];po;[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];po;[W]
ppo [R];po;[W]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
['R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe']
ID: 1 cur candidate_ppo: [R];fencerel(Fence.w.w);[W],relax is False
[R];fencerel(Fence.w.w);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.w.w);[W] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.w.w);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]']
R_po_W_PodRW_Rfe_Fence_rw_rwdRW_Rfe.litmus.litmus
R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe.litmus
ppo [R];fencerel(Fence.w.w);[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.w_W_Fence_w_wdRW_Rfe_Fence_rw_rwdRW_Rfe.litmus Fence.w.wdRW Rfe Fence.rw.rwdRW Rfe
[R];fencerel(Fence.w.w);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
ppo [R];fencerel(Fence.w.w);[W]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
['R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe']
check ppo [R];po;[W]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
['R_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe']
check ppo [R];po;[W] False
check ppo [R];fencerel(Fence.w.w);[W]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
check ppo [R];fencerel(Fence.w.w);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.w.w);[W]
start check
check counter ppo
ppo:[R];fencerel(Fence.w.w);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.w.w);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdRW/LB+fence.w.w+fence.rw.rw.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.w+fence.rw.rw': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.w+fence.rw.rw': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
candidate_ppo: [R];fencerel(Fence.w.w);[W], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.w.w);[W] pass test
==== candidate ppo ====
[R];fencerel(Fence.w.w);[W] [R];fencerel(Fence.w.w);[W] False
finished /home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdRW/LB+fence.w.w+fence.rw.rw.litmus
synth ppo by litmus test 4
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.r.rws': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2W+fence.r.rws': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
[]
synth ppo by litmus test 5
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.rw.w+fence.rw.rw': [0:x7=0; 1:x7=0; , 0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.rw.w+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
SB+fence.rw.w+fence.rw.rw
[0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]
[0:x7=0; 1:x7=0; , 0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]
['SB+fence.rw.w+fence.rw.rw']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.rw.wdWR/SB+fence.rw.w+fence.rw.rw.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x5=1; 1:x5=1; 0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence rw, w  | <0x04> fence rw, rw ;
<0x08> lw x7, 0(x8) | <0x08> lw x7, 0(x8) ;

QType.Exists (0:x7==0/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x7=0; 1:x7=1;  => 1
0:x7=1; 1:x7=0;  => 1
0:x7=1; 1:x7=1;  => 1
Time SB+fence.rw.w+fence.rw.rw  0.0517s
#Executions: 18

validate litmus by cur_mm
{0:x5=1; 1:x5=1; 0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence rw, w  | <0x04> fence rw, rw ;
<0x08> lw x7, 0(x8) | <0x08> lw x7, 0(x8) ;

QType.Exists (0:x7==0/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x7=0; 1:x7=0;  => 1
0:x7=0; 1:x7=1;  => 1
0:x7=1; 1:x7=0;  => 1
0:x7=1; 1:x7=1;  => 1
Time SB+fence.rw.w+fence.rw.rw  0.0460s
#Executions: 18

failed file: /home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.rw.wdWR/SB+fence.rw.w+fence.rw.rw.litmus
strengthen,s,exe 0:x7=0; 1:x7=0;  [P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_rw_w']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_w')
now check the paths P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_w')]
from this path get ppo
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_rw_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_rw_w']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_w')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel final P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_rw_w']
check all rels
check rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
check rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_rw_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
insert_path [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_rw_w']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_w')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
insert_path [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	]]
ppo [W];po;[R]
e1 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
e2 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation fre
path_single_ppo [W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[R];fre
path_single_ppo justify [W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[R];fre
diy_cycle PodWR Fre Fence.rw.rwdWR Fre
from this path get ppo
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False
candidate_add_ppo W;fence_rw_w;R
all_rels
rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_rw_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_rw_w']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_w')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.rw.w);[R]
need_check_ppo [W];fencerel(Fence.rw.w);[R] target_ppo [W];fencerel(Fence.rw.w);[R]
add_rels_final
add rel final P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_rw_w']
check all rels
check rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
check rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_rw_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	(W), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_rw_w']
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_w')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.rw.w);[R]
need_check_ppo [W];fencerel(Fence.rw.w);[R] target_ppo [W];fencerel(Fence.rw.w);[R]
insert_path [(P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_w')]
{}
filter_cycle [[P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	]]
ppo [W];fencerel(Fence.rw.w);[R]
e1 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
e2 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation fre
path_single_ppo [W];fencerel(Fence.rw.w);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[R];fre
path_single_ppo justify [W];fencerel(Fence.rw.w);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[R];fre
diy_cycle Fence.rw.wdWR Fre Fence.rw.rwdWR Fre
stengthen state, 0:x7=0; 1:x7=0;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586be94e270> [P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586bf7cce60>] False
{0:x5=1; 1:x5=1; 0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence rw, w  | <0x04> fence rw, rw ;
<0x08> lw x7, 0(x8) | <0x08> lw x7, 0(x8) ;

QType.Exists (0:x7==0/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x7=0; 1:x7=0;  => 1
0:x7=0; 1:x7=1;  => 1
0:x7=1; 1:x7=0;  => 1
0:x7=1; 1:x7=1;  => 1
Time SB+fence.rw.w+fence.rw.rw  0.0317s
#Executions: 9

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];po;[R], relax is False
candidate_ppo: [W];fencerel(Fence.rw.w);[R], relax is False
ID: 0 cur candidate_ppo: [W];po;[R],relax is False
[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[R] contain_flag False can_relax_flag False
add ppo [W];po;[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[W];po;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '([W];po;[R])\\([AMO];po-loc;[R])']
ppo [W];po;[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_po_R_PodWR_Fre_Fence_rw_rwdWR_Fre.litmus PodWR Fre Fence.rw.rwdWR Fre
[W];po;[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
([W];po;[R])\([AMO];po-loc;[R])
ppo [W];po;[R]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe']
ID: 1 cur candidate_ppo: [W];fencerel(Fence.rw.w);[R],relax is False
[W];fencerel(Fence.rw.w);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.rw.w);[R] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.rw.w);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]']
W_po_R_PodWR_Fre_Fence_rw_rwdWR_Fre.litmus.litmus
W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus
ppo [W];fencerel(Fence.rw.w);[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWR_Fre.litmus Fence.rw.wdWR Fre Fence.rw.rwdWR Fre
[W];fencerel(Fence.rw.w);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
ppo [W];fencerel(Fence.rw.w);[R]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe']
check ppo [W];po;[R]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[W];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_po_R_PodWR_Fre_Fence_rw_rwdWW_Coe']
check ppo [W];po;[R] False
check ppo [W];fencerel(Fence.rw.w);[R]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
check ppo [W];fencerel(Fence.rw.w);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.rw.w);[R]
start check
check counter ppo
ppo:[W];fencerel(Fence.rw.w);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.rw.w);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.rw.wdWR/SB+fence.rw.w+fence.rw.rw.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.rw.w+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.rw.w+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
candidate_ppo: [W];fencerel(Fence.rw.w);[R], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.rw.w);[R] pass test
==== candidate ppo ====
[W];fencerel(Fence.rw.w);[R] [W];fencerel(Fence.rw.w);[R] False
finished /home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.rw.wdWR/SB+fence.rw.w+fence.rw.rw.litmus
synth ppo by litmus test 6
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.w.ws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=0; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.w.ws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
MP+fence.w.ws
[1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]
[1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=0; , 1:x5=1; 1:x7=1; ]
['MP+fence.w.ws']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdRR/MP+fence.w.ws.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x5=1; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> lw x5, 0(x6) ;
<0x04> fence w, w   | <0x04> fence w, w   ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (1:x5==1/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
1:x5=0; 1:x7=0;  => 1
1:x5=0; 1:x7=1;  => 1
1:x5=1; 1:x7=1;  => 1
Time MP+fence.w.ws  0.0380s
#Executions: 18

validate litmus by cur_mm
{0:x5=1; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> lw x5, 0(x6) ;
<0x04> fence w, w   | <0x04> fence w, w   ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (1:x5==1/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x5=0; 1:x7=0;  => 1
1:x5=0; 1:x7=1;  => 1
1:x5=1; 1:x7=0;  => 1
1:x5=1; 1:x7=1;  => 1
Time MP+fence.w.ws  0.0328s
#Executions: 18

failed file: /home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdRR/MP+fence.w.ws.litmus
strengthen,s,exe 1:x5=1; 1:x7=0;  [P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')
now check the paths P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]
from this path get ppo
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False
candidate_add_ppo R;po;R
all_rels
rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_w_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_w_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
add_rels_final
add rel final P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_w_w']
check all rels
check rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_w_w']
check rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_w_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
insert_path [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
{}
filter_cycle [[P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	]]
ppo [R];po;[R]
e1 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
e2 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str after change
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
cycle str after change
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
start_relation fre
end relation rfe
path_single_ppo [R];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False
candidate_add_ppo R;fence_w_w;R
all_rels
rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_w_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_w_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.w.w);[R]
need_check_ppo [R];fencerel(Fence.w.w);[R] target_ppo [R];fencerel(Fence.w.w);[R]
add_rels_final
add rel final P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_w_w']
check all rels
check rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_w_w']
check rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['po', 'fence_w_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.w.w);[R]
need_check_ppo [R];fencerel(Fence.w.w);[R] target_ppo [R];fencerel(Fence.w.w);[R]
insert_path [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]
{}
filter_cycle [[P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	]]
ppo [R];fencerel(Fence.w.w);[R]
e1 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
e2 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str after change
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
cycle str after change
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
start_relation fre
end relation rfe
path_single_ppo [R];fencerel(Fence.w.w);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.w.w);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.w.wdRR Fre Fence.rw.rwdWW Rfe
stengthen state, 1:x5=1; 1:x7=0;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586be398b90> [P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586bf7cd4c0>] False
{0:x5=1; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> lw x5, 0(x6) ;
<0x04> fence w, w   | <0x04> fence w, w   ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (1:x5==1/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x5=0; 1:x7=0;  => 1
1:x5=0; 1:x7=1;  => 1
1:x5=1; 1:x7=0;  => 1
1:x5=1; 1:x7=1;  => 1
Time MP+fence.w.ws  0.0267s
#Executions: 9

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];po;[R], relax is False
candidate_ppo: [R];fencerel(Fence.w.w);[R], relax is False
ID: 0 cur candidate_ppo: [R];po;[R],relax is False
[R];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[R] contain_flag False can_relax_flag False
add ppo [R];po;[R] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [R];fencerel(Fence.w.w);[R],relax is False
[R];fencerel(Fence.w.w);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.w.w);[R] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.w.w);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]']
ppo [R];fencerel(Fence.w.w);[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus Fence.w.wdRR Fre Fence.rw.rwdWW Rfe
[R];fencerel(Fence.w.w);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
ppo [R];fencerel(Fence.w.w);[R]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];fencerel(Fence.w.w);[R]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
check ppo [R];fencerel(Fence.w.w);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.w.w);[R]
start check
check counter ppo
ppo:[R];fencerel(Fence.w.w);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.w.w);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdRR/MP+fence.w.ws.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.w.ws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.w.ws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
candidate_ppo: [R];fencerel(Fence.w.w);[R], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.w.w);[R] pass test
==== candidate ppo ====
[R];fencerel(Fence.w.w);[R] [R];fencerel(Fence.w.w);[R] False
finished /home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdRR/MP+fence.w.ws.litmus
synth ppo by litmus test 7
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.w.ws': [1:x7=0; [y]=1; , 1:x7=0; [y]=2; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.w.ws': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
R+fence.w.ws
[1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]
[1:x7=0; [y]=1; , 1:x7=0; [y]=2; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]
['R+fence.w.ws']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdWR/R+fence.w.ws.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x5=1; 1:x5=2; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence w, w   | <0x04> fence w, w   ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (y==2/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
1:x7=0; [y]=1;  => 1
1:x7=1; [y]=1;  => 1
1:x7=1; [y]=2;  => 1
Time R+fence.w.ws  0.0531s
#Executions: 24

validate litmus by cur_mm
{0:x5=1; 1:x5=2; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence w, w   | <0x04> fence w, w   ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (y==2/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x7=0; [y]=1;  => 1
1:x7=0; [y]=2;  => 1
1:x7=1; [y]=1;  => 1
1:x7=1; [y]=2;  => 1
Time R+fence.w.ws  0.0372s
#Executions: 24

failed file: /home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdWR/R+fence.w.ws.litmus
strengthen,s,exe 1:x7=0; [y]=2;  [P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')
now check the paths P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]
from this path get ppo
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_w_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_w_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_w_w']
check all rels
check rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_w_w']
check rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_w_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
insert_path [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
{}
filter_cycle [[P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	]]
ppo [W];po;[R]
e1 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
e2 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
cycle str after change
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
start_relation fre
end relation coe
path_single_ppo [W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWR Fre Fence.rw.rwdWW Coe
from this path get ppo
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False
candidate_add_ppo W;fence_w_w;R
all_rels
rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_w_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_w_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.w.w);[R]
need_check_ppo [W];fencerel(Fence.w.w);[R] target_ppo [W];fencerel(Fence.w.w);[R]
add_rels_final
add rel final P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_w_w']
check all rels
check rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_w_w']
check rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_w_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_w_w']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.w.w);[R]
need_check_ppo [W];fencerel(Fence.w.w);[R] target_ppo [W];fencerel(Fence.w.w);[R]
insert_path [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_w_w')]
{}
filter_cycle [[P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	]]
ppo [W];fencerel(Fence.w.w);[R]
e1 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
e2 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
cycle str after change
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
start_relation fre
end relation coe
path_single_ppo [W];fencerel(Fence.w.w);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.w.w);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.w.wdWR Fre Fence.rw.rwdWW Coe
stengthen state, 1:x7=0; [y]=2;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586be598080> [P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586be932f00>] False
{0:x5=1; 1:x5=2; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence w, w   | <0x04> fence w, w   ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (y==2/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x7=0; [y]=1;  => 1
1:x7=0; [y]=2;  => 1
1:x7=1; [y]=1;  => 1
1:x7=1; [y]=2;  => 1
Time R+fence.w.ws  0.0312s
#Executions: 12

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];po;[R], relax is False
candidate_ppo: [W];fencerel(Fence.w.w);[R], relax is False
ID: 0 cur candidate_ppo: [W];po;[R],relax is False
[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[R] contain_flag False can_relax_flag False
add ppo [W];po;[R] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [W];fencerel(Fence.w.w);[R],relax is False
[W];fencerel(Fence.w.w);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.w.w);[R] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.w.w);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]']
ppo [W];fencerel(Fence.w.w);[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus Fence.w.wdWR Fre Fence.rw.rwdWW Coe
[W];fencerel(Fence.w.w);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
ppo [W];fencerel(Fence.w.w);[R]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.w.w);[R]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
check ppo [W];fencerel(Fence.w.w);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.w.w);[R]
start check
check counter ppo
ppo:[W];fencerel(Fence.w.w);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.w.w);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdWR/R+fence.w.ws.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.w.ws': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.w.ws': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
candidate_ppo: [W];fencerel(Fence.w.w);[R], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.w.w);[R] pass test
==== candidate ppo ====
[W];fencerel(Fence.w.w);[R] [W];fencerel(Fence.w.w);[R] False
finished /home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.w.wdWR/R+fence.w.ws.litmus
synth ppo by litmus test 8
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.rw+fence.w.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.rw+fence.w.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 9
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.r.rws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.r.rws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
synth ppo by litmus test 10
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.w+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=0; [y]=2; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.w+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
R+fence.rw.w+fence.r.rw
[1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]
[1:x7=0; [y]=1; , 1:x7=0; [y]=2; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]
['R+fence.rw.w+fence.r.rw']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.r.rwdWR/R+fence.rw.w+fence.r.rw.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x5=1; 1:x5=2; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence rw, w  | <0x04> fence r, rw  ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (y==2/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
1:x7=0; [y]=1;  => 1
1:x7=1; [y]=1;  => 1
1:x7=1; [y]=2;  => 1
Time R+fence.rw.w+fence.r.rw  0.0478s
#Executions: 24

validate litmus by cur_mm
{0:x5=1; 1:x5=2; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence rw, w  | <0x04> fence r, rw  ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (y==2/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x7=0; [y]=1;  => 1
1:x7=0; [y]=2;  => 1
1:x7=1; [y]=1;  => 1
1:x7=1; [y]=2;  => 1
Time R+fence.rw.w+fence.r.rw  0.0379s
#Executions: 24

failed file: /home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.r.rwdWR/R+fence.rw.w+fence.r.rw.litmus
strengthen,s,exe 1:x7=0; [y]=2;  [P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_r_rw']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')
now check the paths P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')]
from this path get ppo
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_rw_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_r_rw']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_r_rw']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_r_rw']
check all rels
check rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_rw_w']
check rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_r_rw']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_r_rw']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
insert_path [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
{}
filter_cycle [[P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	]]
ppo [W];po;[R]
e1 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
e2 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str after change
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
cycle str after change
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
start_relation fre
end relation coe
path_single_ppo [W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWR Fre Fence.rw.rwdWW Coe
from this path get ppo
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False
candidate_add_ppo W;fence_r_rw;R
all_rels
rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_rw_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_r_rw']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_r_rw']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.r.rw);[R]
need_check_ppo [W];fencerel(Fence.r.rw);[R] target_ppo [W];fencerel(Fence.r.rw);[R]
add_rels_final
add rel final P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_r_rw']
check all rels
check rel --: None P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	 P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	 True True ['fence', 'po', 'fence_rw_w']
check rel P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_r_rw']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, is write event:True
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	(W), P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_r_rw']
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.r.rw);[R]
need_check_ppo [W];fencerel(Fence.r.rw);[R] target_ppo [W];fencerel(Fence.r.rw);[R]
insert_path [(P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_r_rw')]
{}
filter_cycle [[P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	]]
ppo [W];fencerel(Fence.r.rw);[R]
e1 P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
e2 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
cycle str after change
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
cycle str after change
P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	
P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	
start_relation fre
end relation coe
path_single_ppo [W];fencerel(Fence.r.rw);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.r.rw);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.r.rwdWR Fre Fence.rw.rwdWW Coe
stengthen state, 1:x7=0; [y]=2;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586be38b500> [P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	sw x5_p0_0, 0(x6_p0_0)	, P0: <0x08>	sw x5_p0_0, 0(x7_p0_0)	, P1: <0x00>	sw x5_p1_0, 0(x6_p1_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586be4fd130>] False
{0:x5=1; 1:x5=2; 0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
         P0         |         P1          ;
<0x00> sw x5, 0(x6) | <0x00> sw x5, 0(x6) ;
<0x04> fence rw, w  | <0x04> fence r, rw  ;
<0x08> sw x5, 0(x7) | <0x08> lw x7, 0(x8) ;

QType.Exists (y==2/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x7=0; [y]=1;  => 1
1:x7=0; [y]=2;  => 1
1:x7=1; [y]=1;  => 1
1:x7=1; [y]=2;  => 1
Time R+fence.rw.w+fence.r.rw  0.0315s
#Executions: 12

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];po;[R], relax is False
candidate_ppo: [W];fencerel(Fence.r.rw);[R], relax is False
ID: 0 cur candidate_ppo: [W];po;[R],relax is False
[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[R] contain_flag False can_relax_flag False
add ppo [W];po;[R] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [W];fencerel(Fence.r.rw);[R],relax is False
[W];fencerel(Fence.r.rw);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.r.rw);[R] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.r.rw);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]']
ppo [W];fencerel(Fence.r.rw);[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe.litmus Fence.r.rwdWR Fre Fence.rw.rwdWW Coe
[W];fencerel(Fence.r.rw);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
ppo [W];fencerel(Fence.r.rw);[R]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.r.rw);[R]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
check ppo [W];fencerel(Fence.r.rw);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.r.rw);[R]
start check
check counter ppo
ppo:[W];fencerel(Fence.r.rw);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.r.rw);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.r.rwdWR/R+fence.rw.w+fence.r.rw.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.w+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.w+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
candidate_ppo: [W];fencerel(Fence.r.rw);[R], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.r.rw);[R] pass test
==== candidate ppo ====
[W];fencerel(Fence.r.rw);[R] [W];fencerel(Fence.r.rw);[R] False
finished /home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/RELAX/Fence.r.rwdWR/R+fence.rw.w+fence.r.rw.litmus
synth ppo by litmus test 11
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rw+fence.rw.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rw+fence.rw.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
synth ppo by litmus test 12
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.w.ws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.w.ws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
synth ppo by litmus test 13
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.r.rws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.r.rws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
synth ppo by litmus test 14
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
['R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1           ;
<0x00> lw x5, 0(x6) | <0x00> ori x5, x0, 1 ;
<0x04> fence r, w   | <0x04> sw x5, 0(x6)  ;
<0x08> lw x7, 0(x8) | <0x08> fence rw, rw  ;
                    | <0x0C> ori x7, x0, 1 ;
                    | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=1;  => 1
Time R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe  0.0430s
#Executions: 18

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1           ;
<0x00> lw x5, 0(x6) | <0x00> ori x5, x0, 1 ;
<0x04> fence r, w   | <0x04> sw x5, 0(x6)  ;
<0x08> lw x7, 0(x8) | <0x08> fence rw, rw  ;
                    | <0x0C> ori x7, x0, 1 ;
                    | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=0;  => 1
0:x5=1; 0:x7=1;  => 1
Time R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe  0.0356s
#Executions: 18

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x5=1; 0:x7=0;  [P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False
candidate_add_ppo R;po;R
all_rels
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_r_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_r_w']
check all rels
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_r_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]]
ppo [R];po;[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False
candidate_add_ppo R;fence_r_w;R
all_rels
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_r_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.r.w);[R]
need_check_ppo [R];fencerel(Fence.r.w);[R] target_ppo [R];fencerel(Fence.r.w);[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_r_w']
check all rels
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_r_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.r.w);[R]
need_check_ppo [R];fencerel(Fence.r.w);[R] target_ppo [R];fencerel(Fence.r.w);[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]
{}
filter_cycle [[P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]]
ppo [R];fencerel(Fence.r.w);[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];fencerel(Fence.r.w);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.r.w);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.r.wdRR Fre Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x7=0;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586be38b4a0> [P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586bea35940>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1           ;
<0x00> lw x5, 0(x6) | <0x00> ori x5, x0, 1 ;
<0x04> fence r, w   | <0x04> sw x5, 0(x6)  ;
<0x08> lw x7, 0(x8) | <0x08> fence rw, rw  ;
                    | <0x0C> ori x7, x0, 1 ;
                    | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=0;  => 1
0:x5=1; 0:x7=1;  => 1
Time R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe  0.0299s
#Executions: 9

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];po;[R], relax is False
candidate_ppo: [R];fencerel(Fence.r.w);[R], relax is False
ID: 0 cur candidate_ppo: [R];po;[R],relax is False
[R];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[R] contain_flag False can_relax_flag False
add ppo [R];po;[R] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [R];fencerel(Fence.r.w);[R],relax is False
[R];fencerel(Fence.r.w);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.r.w);[R] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.r.w);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]']
ppo [R];fencerel(Fence.r.w);[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus Fence.r.wdRR Fre Fence.rw.rwdWW Rfe
[R];fencerel(Fence.r.w);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
ppo [R];fencerel(Fence.r.w);[R]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];fencerel(Fence.r.w);[R]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
check ppo [R];fencerel(Fence.r.w);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.r.w);[R]
start check
check counter ppo
ppo:[R];fencerel(Fence.r.w);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.r.w);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
candidate_ppo: [R];fencerel(Fence.r.w);[R], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.r.w);[R] pass test
==== candidate ppo ====
[R];fencerel(Fence.r.w);[R] [R];fencerel(Fence.r.w);[R] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 15
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.w.w+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.w.w+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 16
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.w+fence.rw.w': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.w+fence.rw.w': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
synth ppo by litmus test 17
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rws': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rws': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
synth ppo by litmus test 18
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.rw.w+fence.w.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.rw.w+fence.w.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
synth ppo by litmus test 19
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
synth ppo by litmus test 20
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.rw+fence.w.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.rw+fence.w.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
synth ppo by litmus test 21
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.rw+ctrlfence.w.r': [1:x5=0; 1:x9=0; , 1:x5=0; 1:x9=1; , 1:x5=1; 1:x9=0; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.rw+ctrlfence.w.r': [1:x5=0; 1:x9=0; , 1:x5=0; 1:x9=1; , 1:x5=1; 1:x9=1; ]}
MP+fence.rw.rw+ctrlfence.w.r
[1:x5=0; 1:x9=0; , 1:x5=0; 1:x9=1; , 1:x5=1; 1:x9=1; ]
[1:x5=0; 1:x9=0; , 1:x5=0; 1:x9=1; , 1:x5=1; 1:x9=0; , 1:x5=1; 1:x9=1; ]
['MP+fence.rw.rw+ctrlfence.w.r']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/HAND/MP+fence.rw.rw+ctrlfence.w.r.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |           P1            ;
<0x00> ori x5, x0, 1 | <0x00> lw x5, 0(x6)     ;
<0x04> sw x5, 0(x6)  | <0x04> bne x5, x0, LC00 ;
<0x08> fence rw, rw  | LC00:                   ;
<0x0C> ori x7, x0, 1 | <0x08> fence w, r       ;
<0x10> sw x7, 0(x8)  | <0x0C> lw x9, 0(x8)     ;

QType.Exists (1:x5==1/\1:x9==0)

Progress [1/2]: |██████████████████████████████████████████████████| 100.0%Progress [2/2]: |██████████████████████████████████████████████████| 100.0%

States 3
1:x5=0; 1:x9=0;  => 1
1:x5=0; 1:x9=1;  => 1
1:x5=1; 1:x9=1;  => 1
Time MP+fence.rw.rw+ctrlfence.w.r  0.0979s
#Executions: 36

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |           P1            ;
<0x00> ori x5, x0, 1 | <0x00> lw x5, 0(x6)     ;
<0x04> sw x5, 0(x6)  | <0x04> bne x5, x0, LC00 ;
<0x08> fence rw, rw  | LC00:                   ;
<0x0C> ori x7, x0, 1 | <0x08> fence w, r       ;
<0x10> sw x7, 0(x8)  | <0x0C> lw x9, 0(x8)     ;

QType.Exists (1:x5==1/\1:x9==0)

Progress [1/2]: |██████████████████████████████████████████████████| 100.0%Progress [2/2]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x5=0; 1:x9=0;  => 1
1:x5=0; 1:x9=1;  => 1
1:x5=1; 1:x9=0;  => 1
1:x5=1; 1:x9=1;  => 1
Time MP+fence.rw.rw+ctrlfence.w.r  0.0894s
#Executions: 36

failed file: /home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/HAND/MP+fence.rw.rw+ctrlfence.w.r.litmus
strengthen,s,exe 1:x5=1; 1:x9=0;  [P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	(R), ['ctrl', 'po', 'fence_w_r']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')
now check the paths P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')]
[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')]
[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')]
from this path get ppo
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False
candidate_add_ppo R;ctrl;R
all_rels
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
rel P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.ctrl(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False ['ctrl', 'po', 'fence_w_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	(R), ['ctrl', 'po', 'fence_w_r']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')]]
need_check_ppo [R];ctrl;[R] target_ppo [R];ctrl;[R]
add_rels_final
add rel final P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False ['ctrl', 'po', 'fence_w_r']
check all rels
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
check rel P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False ['ctrl', 'po', 'fence_w_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	(R), ['ctrl', 'po', 'fence_w_r']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')]]
need_check_ppo [R];ctrl;[R] target_ppo [R];ctrl;[R]
insert_path [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')]
{}
filter_cycle [[P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	]]
ppo [R];ctrl;[R]
e1 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
e2 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
cycle str
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
start_relation fre
end relation rfe
path_single_ppo [R];ctrl;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];ctrl;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle DpCtrldR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False
candidate_add_ppo R;po;R
all_rels
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
rel P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False ['ctrl', 'po', 'fence_w_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	(R), ['ctrl', 'po', 'fence_w_r']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')]]
need_check_ppo [R];ctrl;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
add_rels_final
add rel final P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False ['ctrl', 'po', 'fence_w_r']
check all rels
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
check rel P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False ['ctrl', 'po', 'fence_w_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	(R), ['ctrl', 'po', 'fence_w_r']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')]]
need_check_ppo [R];ctrl;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
insert_path [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')]
{}
filter_cycle [[P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	]]
ppo [R];po;[R]
e1 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
e2 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
cycle str
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
start_relation fre
end relation rfe
path_single_ppo [R];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False
candidate_add_ppo R;fence_w_r;R
all_rels
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
rel P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False ['ctrl', 'po', 'fence_w_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	(R), ['ctrl', 'po', 'fence_w_r']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')]]
need_check_ppo [R];ctrl;[R] target_ppo [R];fencerel(Fence.w.r);[R]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.w.r);[R]
need_check_ppo [R];fencerel(Fence.w.r);[R] target_ppo [R];fencerel(Fence.w.r);[R]
add_rels_final
add rel final P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False ['ctrl', 'po', 'fence_w_r']
check all rels
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
check rel P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	 False False ['ctrl', 'po', 'fence_w_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, is write event:False
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	(R), P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	(R), ['ctrl', 'po', 'fence_w_r']
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'ctrl')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')]]
need_check_ppo [R];ctrl;[R] target_ppo [R];fencerel(Fence.w.r);[R]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.w.r);[R]
need_check_ppo [R];fencerel(Fence.w.r);[R] target_ppo [R];fencerel(Fence.w.r);[R]
insert_path [(P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_w_r')]
{}
filter_cycle [[P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	]]
ppo [R];fencerel(Fence.w.r);[R]
e1 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
e2 P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
cycle str
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
start_relation fre
end relation rfe
path_single_ppo [R];fencerel(Fence.w.r);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.w.r);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.w.rdRR Fre Fence.rw.rwdWW Rfe
stengthen state, 1:x5=1; 1:x9=0;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586be475220> [P1: <0x0C>	lw x9_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586be551730>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |           P1            ;
<0x00> ori x5, x0, 1 | <0x00> lw x5, 0(x6)     ;
<0x04> sw x5, 0(x6)  | <0x04> bne x5, x0, LC00 ;
<0x08> fence rw, rw  | LC00:                   ;
<0x0C> ori x7, x0, 1 | <0x08> fence w, r       ;
<0x10> sw x7, 0(x8)  | <0x0C> lw x9, 0(x8)     ;

QType.Exists (1:x5==1/\1:x9==0)

Progress [1/2]: |██████████████████████████████████████████████████| 100.0%Progress [2/2]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x5=0; 1:x9=0;  => 1
1:x5=0; 1:x9=1;  => 1
1:x5=1; 1:x9=0;  => 1
1:x5=1; 1:x9=1;  => 1
Time MP+fence.rw.rw+ctrlfence.w.r  0.0668s
#Executions: 18

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 3
candidate_ppo: [R];po;[R], relax is False
candidate_ppo: [R];ctrl;[R], relax is False
candidate_ppo: [R];fencerel(Fence.w.r);[R], relax is False
ID: 0 cur candidate_ppo: [R];po;[R],relax is False
[R];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[R] contain_flag False can_relax_flag False
add ppo [R];po;[R] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [R];ctrl;[R],relax is False
[R];ctrl;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];ctrl;[R] contain_flag False can_relax_flag False
add ppo [R];ctrl;[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];ctrl;[R]']
ppo [R];ctrl;[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe.litmus DpCtrldR Fre Fence.rw.rwdWW Rfe
[R];ctrl;[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];ctrl;[R]
ppo [R];ctrl;[R]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe']
ID: 2 cur candidate_ppo: [R];fencerel(Fence.w.r);[R],relax is False
[R];fencerel(Fence.w.r);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.w.r);[R] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.w.r);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]']
R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe.litmus
R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe.litmus.litmus
ppo [R];fencerel(Fence.w.r);[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe.litmus Fence.w.rdRR Fre Fence.rw.rwdWW Rfe
[R];fencerel(Fence.w.r);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
ppo [R];fencerel(Fence.w.r);[R]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];ctrl;[R]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];ctrl;[R] False
check ppo [R];fencerel(Fence.w.r);[R]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
check ppo [R];fencerel(Fence.w.r);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.w.r);[R]
start check
check counter ppo
ppo:[R];fencerel(Fence.w.r);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.w.r);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/HAND/MP+fence.rw.rw+ctrlfence.w.r.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.rw+ctrlfence.w.r': [1:x5=0; 1:x9=0; , 1:x5=0; 1:x9=1; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.rw+ctrlfence.w.r': [1:x5=0; 1:x9=0; , 1:x5=0; 1:x9=1; , 1:x5=1; 1:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
candidate_ppo: [R];fencerel(Fence.w.r);[R], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.w.r);[R] pass test
==== candidate ppo ====
[R];fencerel(Fence.w.r);[R] [R];fencerel(Fence.w.r);[R] False
finished /home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/HAND/MP+fence.rw.rw+ctrlfence.w.r.litmus
synth ppo by litmus test 22
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.rw.ws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.rw.ws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
synth ppo by litmus test 23
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
synth ppo by litmus test 24
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
synth ppo by litmus test 25
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.ws': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.ws': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 26
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.w.w+fence.rw.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.w.w+fence.rw.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
synth ppo by litmus test 27
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.rw.rw+fence.w.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.rw.rw+fence.w.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
synth ppo by litmus test 28
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.r.rw+fence.w.w': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2W+fence.r.rw+fence.w.w': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
[]
synth ppo by litmus test 29
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.w.ws': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.w.ws': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
synth ppo by litmus test 30
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.w+fence.w.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.w+fence.w.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
synth ppo by litmus test 31
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.w.w+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.w.w+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
synth ppo by litmus test 32
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.r.rw+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.r.rw+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
synth ppo by litmus test 33
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.r.rw+fence.w.w': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.r.rw+fence.w.w': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
synth ppo by litmus test 34
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.ws': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.ws': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
synth ppo by litmus test 35
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.r.rw+fence.rw.w': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2W+fence.r.rw+fence.rw.w': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
[]
synth ppo by litmus test 36
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.rw+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.rw+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 37
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.ws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.ws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
synth ppo by litmus test 38
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.w.w+fence.rw.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.w.w+fence.rw.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 39
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rw+fence.rw.rw': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rw+fence.rw.rw': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
synth ppo by litmus test 40
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
['R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1           ;
<0x00> lw x5, 0(x6) | <0x00> ori x5, x0, 1 ;
<0x04> fence w, rw  | <0x04> sw x5, 0(x6)  ;
<0x08> lw x7, 0(x8) | <0x08> fence rw, rw  ;
                    | <0x0C> ori x7, x0, 1 ;
                    | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=1;  => 1
Time R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe  0.0415s
#Executions: 18

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1           ;
<0x00> lw x5, 0(x6) | <0x00> ori x5, x0, 1 ;
<0x04> fence w, rw  | <0x04> sw x5, 0(x6)  ;
<0x08> lw x7, 0(x8) | <0x08> fence rw, rw  ;
                    | <0x0C> ori x7, x0, 1 ;
                    | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=0;  => 1
0:x5=1; 0:x7=1;  => 1
Time R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe  0.0346s
#Executions: 18

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x5=1; 0:x7=0;  [P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False
candidate_add_ppo R;po;R
all_rels
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
check all rels
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [R];po;[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False
candidate_add_ppo R;fence_w_rw;R
all_rels
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.w.rw);[R]
need_check_ppo [R];fencerel(Fence.w.rw);[R] target_ppo [R];fencerel(Fence.w.rw);[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
check all rels
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[R] target_ppo [R];fencerel(Fence.w.rw);[R]
need_check_ppo [R];fencerel(Fence.w.rw);[R] target_ppo [R];fencerel(Fence.w.rw);[R]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]
{}
filter_cycle [[P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [R];fencerel(Fence.w.rw);[R]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];fencerel(Fence.w.rw);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.w.rw);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.w.rwdRR Fre Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x7=0;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586be4b6630> [P0: <0x08>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586bf0d8050>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0         |         P1           ;
<0x00> lw x5, 0(x6) | <0x00> ori x5, x0, 1 ;
<0x04> fence w, rw  | <0x04> sw x5, 0(x6)  ;
<0x08> lw x7, 0(x8) | <0x08> fence rw, rw  ;
                    | <0x0C> ori x7, x0, 1 ;
                    | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=0;  => 1
0:x5=1; 0:x7=1;  => 1
Time R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe  0.0286s
#Executions: 9

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];po;[R], relax is False
candidate_ppo: [R];fencerel(Fence.w.rw);[R], relax is False
ID: 0 cur candidate_ppo: [R];po;[R],relax is False
[R];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[R] contain_flag False can_relax_flag False
add ppo [R];po;[R] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [R];fencerel(Fence.w.rw);[R],relax is False
[R];fencerel(Fence.w.rw);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.w.rw);[R] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.w.rw);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]']
ppo [R];fencerel(Fence.w.rw);[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus Fence.w.rwdRR Fre Fence.rw.rwdWW Rfe
[R];fencerel(Fence.w.rw);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
ppo [R];fencerel(Fence.w.rw);[R]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];fencerel(Fence.w.rw);[R]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
check ppo [R];fencerel(Fence.w.rw);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.w.rw);[R]
start check
check counter ppo
ppo:[R];fencerel(Fence.w.rw);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.w.rw);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
candidate_ppo: [R];fencerel(Fence.w.rw);[R], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.w.rw);[R] pass test
==== candidate ppo ====
[R];fencerel(Fence.w.rw);[R] [R];fencerel(Fence.w.rw);[R] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 41
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.w+fence.w.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.w+fence.w.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 42
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.rw+fence.rw.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.rw+fence.rw.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 43
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.r.rw+fence.rw.rw': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.r.rw+fence.rw.rw': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
synth ppo by litmus test 44
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.w+addr': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.w+addr': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
synth ppo by litmus test 45
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rw+addr': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rw+addr': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
synth ppo by litmus test 46
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.w+ctrl': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.w+ctrl': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
synth ppo by litmus test 47
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.w.w+fence.tso': [1:x7=0; [y]=1; , 1:x7=0; [y]=2; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.w.w+fence.tso': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
R+fence.w.w+fence.tso
[1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]
[1:x7=0; [y]=1; , 1:x7=0; [y]=2; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]
['R+fence.w.w+fence.tso']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/HAND/R+fence.w.w+fence.tso.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 1 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence w, w    | <0x08> fence.tso     ;
<0x0C> ori x7, x0, 1 | <0x0C> lw x7, 0(x8)  ;
<0x10> sw x7, 0(x8)  |                      ;

QType.Exists (y==2/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
1:x7=0; [y]=1;  => 1
1:x7=1; [y]=1;  => 1
1:x7=1; [y]=2;  => 1
Time R+fence.w.w+fence.tso  0.0564s
#Executions: 24

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 1 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence w, w    | <0x08> fence.tso     ;
<0x0C> ori x7, x0, 1 | <0x0C> lw x7, 0(x8)  ;
<0x10> sw x7, 0(x8)  |                      ;

QType.Exists (y==2/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x7=0; [y]=1;  => 1
1:x7=0; [y]=2;  => 1
1:x7=1; [y]=1;  => 1
1:x7=1; [y]=2;  => 1
Time R+fence.w.w+fence.tso  0.0404s
#Executions: 24

failed file: /home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/HAND/R+fence.w.w+fence.tso.litmus
strengthen,s,exe 1:x7=0; [y]=2;  [P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_tso']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_tso')
now check the paths P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	
[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_tso')]
from this path get ppo
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_w_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_tso']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_tso']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_tso')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_tso')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_tso']
check all rels
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_w_w']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_tso']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_tso']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_tso')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_tso')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
insert_path [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'po')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	]]
ppo [W];po;[R]
e1 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
e2 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
start_relation fre
end relation coe
path_single_ppo [W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWR Fre Fence.rw.rwdWW Coe
from this path get ppo
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False
candidate_add_ppo W;fence_tso;R
all_rels
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 False True ['fre']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_w_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_tso']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_tso']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_tso')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_tso')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.tso);[R]
need_check_ppo [W];fencerel(Fence.tso);[R] target_ppo [W];fencerel(Fence.tso);[R]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_tso']
check all rels
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 False True ['fre']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['fence', 'po', 'fence_w_w']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['po', 'fence_tso']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	(R), ['po', 'fence_tso']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_tso')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_tso')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.tso);[R]
need_check_ppo [W];fencerel(Fence.tso);[R] target_ppo [W];fencerel(Fence.tso);[R]
insert_path [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, 'fence_tso')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	]]
ppo [W];fencerel(Fence.tso);[R]
e1 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
e2 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
start_relation fre
end relation coe
path_single_ppo [W];fencerel(Fence.tso);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.tso);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.tsodWR Fre Fence.rw.rwdWW Coe
stengthen state, 1:x7=0; [y]=2;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586be550bc0> [P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586be4f4fe0>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 1 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence w, w    | <0x08> fence.tso     ;
<0x0C> ori x7, x0, 1 | <0x0C> lw x7, 0(x8)  ;
<0x10> sw x7, 0(x8)  |                      ;

QType.Exists (y==2/\1:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x7=0; [y]=1;  => 1
1:x7=0; [y]=2;  => 1
1:x7=1; [y]=1;  => 1
1:x7=1; [y]=2;  => 1
Time R+fence.w.w+fence.tso  0.0336s
#Executions: 12

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_rw;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];po;[R], relax is False
candidate_ppo: [W];fencerel(Fence.tso);[R], relax is False
ID: 0 cur candidate_ppo: [W];po;[R],relax is False
[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[R] contain_flag False can_relax_flag False
add ppo [W];po;[R] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [W];fencerel(Fence.tso);[R],relax is False
[W];fencerel(Fence.tso);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.tso);[R] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.tso);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]']
ppo [W];fencerel(Fence.tso);[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe.litmus Fence.tsodWR Fre Fence.rw.rwdWW Coe
[W];fencerel(Fence.tso);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
ppo [W];fencerel(Fence.tso);[R]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.tso);[R]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
check ppo [W];fencerel(Fence.tso);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.tso);[R]
start check
check counter ppo
ppo:[W];fencerel(Fence.tso);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.tso);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/HAND/R+fence.w.w+fence.tso.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.w.w+fence.tso': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.w.w+fence.tso': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
candidate_ppo: [W];fencerel(Fence.tso);[R], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.tso);[R] pass test
==== candidate ppo ====
[W];fencerel(Fence.tso);[R] [W];fencerel(Fence.tso);[R] False
finished /home/whq/Desktop/code_list/slide/src/slide/../../tests/input/litmus/non-mixed-size/HAND/R+fence.w.w+fence.tso.litmus
synth ppo by litmus test 48
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.r.rw+addr': [1:x5=0; 1:x8=0; , 1:x5=0; 1:x8=1; , 1:x5=1; 1:x8=1; ]}
now_herd_logs_ppo_remove {'MP+fence.r.rw+addr': [1:x5=0; 1:x8=0; , 1:x5=0; 1:x8=1; , 1:x5=1; 1:x8=1; ]}
[]
synth ppo by litmus test 49
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rw+ctrl': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rw+ctrl': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
synth ppo by litmus test 50
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.w+data': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.w+data': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
synth ppo by litmus test 51
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rw+data': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rw+data': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
synth ppo by litmus test 52
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 53
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
['R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence w, rw   | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
Time R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe  0.2122s
#Executions: 96

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence w, rw   | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe  0.1874s
#Executions: 96

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x5=1; 0:x9=2;  [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;po;W
all_rels
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_rw']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_rw']
check all rels
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_rw']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]]
ppo [R];po;[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRW Coe Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;fence_w_rw;W
all_rels
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_rw']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.w.rw);[W]
need_check_ppo [R];fencerel(Fence.w.rw);[W] target_ppo [R];fencerel(Fence.w.rw);[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_rw']
check all rels
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_rw']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_rw']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.w.rw);[W]
need_check_ppo [R];fencerel(Fence.w.rw);[W] target_ppo [R];fencerel(Fence.w.rw);[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_rw')]
{}
filter_cycle [[P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]]
ppo [R];fencerel(Fence.w.rw);[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];fencerel(Fence.w.rw);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.w.rw);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.w.rwdRW Coe Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x9=2;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586be520f20> [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586be522ab0>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence w, rw   | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 2
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe  0.1112s
#Executions: 48

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_rw;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];po;[W], relax is False
candidate_ppo: [R];fencerel(Fence.w.rw);[W], relax is False
ID: 0 cur candidate_ppo: [R];po;[W],relax is False
[R];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[W] contain_flag False can_relax_flag False
add ppo [R];po;[W] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [R];fencerel(Fence.w.rw);[W],relax is False
[R];fencerel(Fence.w.rw);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.w.rw);[W] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.w.rw);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]']
ppo [R];fencerel(Fence.w.rw);[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus Fence.w.rwdRW Coe Fence.rw.rwdWW Rfe
[R];fencerel(Fence.w.rw);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
ppo [R];fencerel(Fence.w.rw);[W]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
['R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe']
check ppo [R];fencerel(Fence.w.rw);[W]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
check ppo [R];fencerel(Fence.w.rw);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.w.rw);[W]
start check
check counter ppo
ppo:[R];fencerel(Fence.w.rw);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.w.rw);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
candidate_ppo: [R];fencerel(Fence.w.rw);[W], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.w.rw);[W] pass test
==== candidate ppo ====
[R];fencerel(Fence.w.rw);[W] [R];fencerel(Fence.w.rw);[W] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 54
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
['R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence w, r    | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
Time R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.1998s
#Executions: 96

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence w, r    | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.1852s
#Executions: 96

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x5=1; 0:x9=2;  [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;po;W
all_rels
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_r']
check all rels
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_r']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	]]
ppo [R];po;[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRW Coe Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;fence_w_r;W
all_rels
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.w.r);[W]
need_check_ppo [R];fencerel(Fence.w.r);[W] target_ppo [R];fencerel(Fence.w.r);[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_r']
check all rels
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po', 'fence_w_r']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_w_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.w.r);[W]
need_check_ppo [R];fencerel(Fence.w.r);[W] target_ppo [R];fencerel(Fence.w.r);[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	]]
ppo [R];fencerel(Fence.w.r);[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];fencerel(Fence.w.r);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.w.r);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.w.rdRW Coe Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x9=2;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586bdf63650> [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586be522420>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence w, r    | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 2
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.1115s
#Executions: 48

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_rw;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_rw;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];po;[W], relax is False
candidate_ppo: [R];fencerel(Fence.w.r);[W], relax is False
ID: 0 cur candidate_ppo: [R];po;[W],relax is False
[R];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[W] contain_flag False can_relax_flag False
add ppo [R];po;[W] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [R];fencerel(Fence.w.r);[W],relax is False
[R];fencerel(Fence.w.r);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.w.r);[W] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.w.r);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]']
ppo [R];fencerel(Fence.w.r);[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus Fence.w.rdRW Coe Fence.rw.rwdWW Rfe
[R];fencerel(Fence.w.r);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
ppo [R];fencerel(Fence.w.r);[W]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
['R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe']
check ppo [R];fencerel(Fence.w.r);[W]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
check ppo [R];fencerel(Fence.w.r);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.w.r);[W]
start check
check counter ppo
ppo:[R];fencerel(Fence.w.r);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.w.r);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
candidate_ppo: [R];fencerel(Fence.w.r);[W], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.w.r);[W] pass test
==== candidate ppo ====
[R];fencerel(Fence.w.r);[W] [R];fencerel(Fence.w.r);[W] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 55
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
['R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence r, r    | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
Time R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.1919s
#Executions: 96

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence r, r    | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.1825s
#Executions: 96

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x5=1; 0:x9=2;  [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;po;W
all_rels
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_r_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_r_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_r_r']
check all rels
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_r_r']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_r_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [R];po;[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRW Coe Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;fence_r_r;W
all_rels
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_r_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_r_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.r.r);[W]
need_check_ppo [R];fencerel(Fence.r.r);[W] target_ppo [R];fencerel(Fence.r.r);[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_r_r']
check all rels
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_r_r']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_r_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.r.r);[W]
need_check_ppo [R];fencerel(Fence.r.r);[W] target_ppo [R];fencerel(Fence.r.r);[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]
{}
filter_cycle [[P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	]]
ppo [R];fencerel(Fence.r.r);[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];fencerel(Fence.r.r);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.r.r);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.r.rdRW Coe Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x9=2;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586be38a780> [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586be552b40>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence r, r    | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.0895s
#Executions: 30

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_rw;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_rw;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 R;fence_w_r;W 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];po;[W], relax is False
candidate_ppo: [R];fencerel(Fence.r.r);[W], relax is False
ID: 0 cur candidate_ppo: [R];po;[W],relax is False
[R];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[W] contain_flag False can_relax_flag False
add ppo [R];po;[W] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [R];fencerel(Fence.r.r);[W],relax is False
[R];fencerel(Fence.r.r);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.r.r);[W] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.r.r);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]']
ppo [R];fencerel(Fence.r.r);[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus Fence.r.rdRW Coe Fence.rw.rwdWW Rfe
[R];fencerel(Fence.r.r);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
ppo [R];fencerel(Fence.r.r);[W]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
['R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe']
check ppo [R];fencerel(Fence.r.r);[W]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
check ppo [R];fencerel(Fence.r.r);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.r.r);[W]
start check
check counter ppo
ppo:[R];fencerel(Fence.r.r);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.r.r);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
candidate_ppo: [R];fencerel(Fence.r.r);[W], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.r.r);[W] pass test
==== candidate ppo ====
[R];fencerel(Fence.r.r);[W] [R];fencerel(Fence.r.r);[W] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 56
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
synth ppo by litmus test 57
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 1 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, r    | <0x08> fence rw, rw  ;
<0x0C> lw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
                     | <0x10> sw x7, 0(x8)  ;
                     | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x7==0/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x7=0; 1:x9=1;  => 1
0:x7=1; 1:x9=1;  => 2
0:x7=1; 1:x9=2;  => 1
Time W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe  0.2255s
#Executions: 96

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 1 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, r    | <0x08> fence rw, rw  ;
<0x0C> lw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
                     | <0x10> sw x7, 0(x8)  ;
                     | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x7==0/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x7=0; 1:x9=1;  => 2
0:x7=0; 1:x9=2;  => 1
0:x7=1; 1:x9=1;  => 2
0:x7=1; 1:x9=2;  => 1
Time W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe  0.1684s
#Executions: 96

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe.litmus
strengthen,s,exe 0:x7=0; 1:x9=2;  [P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc']
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
get_all_paths_from_e1_to_e2 [[(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel final P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
check all rels
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	]]
ppo [W];po;[R]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation coe
path_single_ppo [W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWR Fre Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False
candidate_add_ppo W;fence_r_r;R
all_rels
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.r.r);[R]
need_check_ppo [W];fencerel(Fence.r.r);[R] target_ppo [W];fencerel(Fence.r.r);[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
check all rels
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.r.r);[R]
need_check_ppo [W];fencerel(Fence.r.r);[R] target_ppo [W];fencerel(Fence.r.r);[R]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	]]
ppo [W];fencerel(Fence.r.r);[R]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation coe
path_single_ppo [W];fencerel(Fence.r.r);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.r.r);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.r.rdWR Fre Fence.rw.rwdWW Coe
stengthen state, 0:x7=0; 1:x9=2;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586be4f4ef0> [P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586be59a870>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 1 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, r    | <0x08> fence rw, rw  ;
<0x0C> lw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
                     | <0x10> sw x7, 0(x8)  ;
                     | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x7==0/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x7=0; 1:x9=1;  => 2
0:x7=0; 1:x9=2;  => 1
0:x7=1; 1:x9=1;  => 2
0:x7=1; 1:x9=2;  => 1
Time W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe  0.0944s
#Executions: 32

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_rw;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_rw;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 R;fence_w_r;W 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_r_r;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];po;[R], relax is False
candidate_ppo: [W];fencerel(Fence.r.r);[R], relax is False
ID: 0 cur candidate_ppo: [W];po;[R],relax is False
[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[R] contain_flag False can_relax_flag False
add ppo [W];po;[R] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [W];fencerel(Fence.r.r);[R],relax is False
[W];fencerel(Fence.r.r);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.r.r);[R] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.r.r);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]']
ppo [W];fencerel(Fence.r.r);[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe.litmus Fence.r.rdWR Fre Fence.rw.rwdWW Coe
[W];fencerel(Fence.r.r);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
ppo [W];fencerel(Fence.r.r);[R]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.r.r);[R]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
check ppo [W];fencerel(Fence.r.r);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.r.r);[R]
start check
check counter ppo
ppo:[W];fencerel(Fence.r.r);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.r.r);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
candidate_ppo: [W];fencerel(Fence.r.r);[R], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.r.r);[R] pass test
==== candidate ppo ====
[W];fencerel(Fence.r.r);[R] [W];fencerel(Fence.r.r);[R] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 58
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 1 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, w    | <0x08> fence rw, rw  ;
<0x0C> lw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
                     | <0x10> sw x7, 0(x8)  ;
                     | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x7==0/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x7=0; 1:x9=1;  => 1
0:x7=1; 1:x9=1;  => 2
0:x7=1; 1:x9=2;  => 1
Time W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe  0.2394s
#Executions: 96

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 1 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, w    | <0x08> fence rw, rw  ;
<0x0C> lw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
                     | <0x10> sw x7, 0(x8)  ;
                     | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x7==0/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x7=0; 1:x9=1;  => 2
0:x7=0; 1:x9=2;  => 1
0:x7=1; 1:x9=1;  => 2
0:x7=1; 1:x9=2;  => 1
Time W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe  0.1721s
#Executions: 96

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus
strengthen,s,exe 0:x7=0; 1:x9=2;  [P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc']
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
get_all_paths_from_e1_to_e2 [[(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel final P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
check all rels
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	]]
ppo [W];po;[R]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation coe
path_single_ppo [W];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWR Fre Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False
candidate_add_ppo W;fence_r_w;R
all_rels
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.r.w);[R]
need_check_ppo [W];fencerel(Fence.r.w);[R] target_ppo [W];fencerel(Fence.r.w);[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
check all rels
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[R] target_ppo [W];fencerel(Fence.r.w);[R]
need_check_ppo [W];fencerel(Fence.r.w);[R] target_ppo [W];fencerel(Fence.r.w);[R]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	]]
ppo [W];fencerel(Fence.r.w);[R]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation coe
path_single_ppo [W];fencerel(Fence.r.w);[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.r.w);[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.r.wdWR Fre Fence.rw.rwdWW Coe
stengthen state, 0:x7=0; 1:x9=2;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586bdf344a0> [P0: <0x0C>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586be4bc080>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 1 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, w    | <0x08> fence rw, rw  ;
<0x0C> lw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
                     | <0x10> sw x7, 0(x8)  ;
                     | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x7==0/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x7=0; 1:x9=1;  => 2
0:x7=0; 1:x9=2;  => 1
0:x7=1; 1:x9=1;  => 2
0:x7=1; 1:x9=2;  => 1
Time W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe  0.0934s
#Executions: 32

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_rw;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_rw;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 R;fence_w_r;W 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_r_r;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 W;fence_r_r;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];po;[R], relax is False
candidate_ppo: [W];fencerel(Fence.r.w);[R], relax is False
ID: 0 cur candidate_ppo: [W];po;[R],relax is False
[W];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[R] contain_flag False can_relax_flag False
add ppo [W];po;[R] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [W];fencerel(Fence.r.w);[R],relax is False
[W];fencerel(Fence.r.w);[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.r.w);[R] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.r.w);[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]']
ppo [W];fencerel(Fence.r.w);[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus Fence.r.wdWR Fre Fence.rw.rwdWW Coe
[W];fencerel(Fence.r.w);[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
ppo [W];fencerel(Fence.r.w);[R]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.r.w);[R]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
check ppo [W];fencerel(Fence.r.w);[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.r.w);[R]
start check
check counter ppo
ppo:[W];fencerel(Fence.r.w);[R] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.r.w);[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
candidate_ppo: [W];fencerel(Fence.r.w);[R], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.r.w);[R] pass test
==== candidate ppo ====
[W];fencerel(Fence.r.w);[R] [W];fencerel(Fence.r.w);[R] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 59
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
synth ppo by litmus test 60
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
synth ppo by litmus test 61
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
['R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence rw, r   | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
Time R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.1977s
#Executions: 96

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence rw, r   | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.1847s
#Executions: 96

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x5=1; 0:x9=2;  [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;po;W
all_rels
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_rw_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_rw_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_rw_r']
check all rels
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_rw_r']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_rw_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [R];po;[W] target_ppo [R];po;[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]]
ppo [R];po;[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRW Coe Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo R;fence_rw_r;W
all_rels
rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_rw_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_rw_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.rw.r);[W]
need_check_ppo [R];fencerel(Fence.rw.r);[W] target_ppo [R];fencerel(Fence.rw.r);[W]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_rw_r']
check all rels
check rel --: None P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	 False False ['fence', 'po', 'fence_rw_r']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po', 'fence_rw_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [R];po;[W] target_ppo [R];fencerel(Fence.rw.r);[W]
need_check_ppo [R];fencerel(Fence.rw.r);[W] target_ppo [R];fencerel(Fence.rw.r);[W]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]
{}
filter_cycle [[P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]]
ppo [R];fencerel(Fence.rw.r);[W]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];fencerel(Fence.rw.r);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];fencerel(Fence.rw.r);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Fence.rw.rdRW Coe Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x9=2;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586bdf34590> [P0: <0x0C>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x9_p0_1, 0(x8_p0_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586be38b0b0>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> lw x5, 0(x6)  | <0x00> ori x5, x0, 2 ;
<0x04> fence rw, r   | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 1 | <0x08> fence rw, rw  ;
<0x0C> sw x7, 0(x8)  | <0x0C> ori x7, x0, 1 ;
<0x10> lw x9, 0(x8)  | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
0:x5=1; 0:x9=2;  => 1
Time R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe  0.0911s
#Executions: 30

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_rw;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_rw;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 R;fence_w_r;W 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_r_r;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 W;fence_r_r;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [R];po;[W], relax is False
candidate_ppo: [R];fencerel(Fence.rw.r);[W], relax is False
ID: 0 cur candidate_ppo: [R];po;[W],relax is False
[R];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[W] contain_flag False can_relax_flag False
add ppo [R];po;[W] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [R];fencerel(Fence.rw.r);[W],relax is False
[R];fencerel(Fence.rw.r);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];fencerel(Fence.rw.r);[W] contain_flag False can_relax_flag False
add ppo [R];fencerel(Fence.rw.r);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]']
ppo [R];fencerel(Fence.rw.r);[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus Fence.rw.rdRW Coe Fence.rw.rwdWW Rfe
[R];fencerel(Fence.rw.r);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
ppo [R];fencerel(Fence.rw.r);[W]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
['R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe']
check ppo [R];fencerel(Fence.rw.r);[W]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
check ppo [R];fencerel(Fence.rw.r);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];fencerel(Fence.rw.r);[W]
start check
check counter ppo
ppo:[R];fencerel(Fence.rw.r);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [R];fencerel(Fence.rw.r);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
candidate_ppo: [R];fencerel(Fence.rw.r);[W], cur_failed_litmus_tests: [], passed? True

[R];fencerel(Fence.rw.r);[W] pass test
==== candidate ppo ====
[R];fencerel(Fence.rw.r);[W] [R];fencerel(Fence.rw.r);[W] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 62
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsos': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsos': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 63
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsos': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsos': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
synth ppo by litmus test 64
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
synth ppo by litmus test 65
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'ISA02': [0:x10=1; 0:x11=0; 1:x12=1; 1:x13=1; , 0:x10=1; 0:x11=1; 1:x12=1; 1:x13=0; , 0:x10=1; 0:x11=1; 1:x12=1; 1:x13=1; ]}
now_herd_logs_ppo_remove {'ISA02': [0:x10=1; 0:x11=0; 1:x12=1; 1:x13=1; , 0:x10=1; 0:x11=1; 1:x12=1; 1:x13=0; , 0:x10=1; 0:x11=1; 1:x12=1; 1:x13=1; ]}
[]
synth ppo by litmus test 66
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
['W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence w, r    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.7sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  0.7sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  0.9sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  1.0sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  1.2sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 1
Time W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe  1.3559s
#Executions: 600

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence w, r    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.7sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  0.7sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  0.9sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  1.0sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  1.1sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe  1.2284s
#Executions: 600

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
strengthen,s,exe 0:x9=2; 1:x9=2;  [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;po;W
all_rels
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_w_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_w_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_w_r']
check all rels
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_w_r']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_w_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')]
{}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [W];po;[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWW Coe Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;fence_w_r;W
all_rels
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_w_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_w_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.w.r);[W]
need_check_ppo [W];fencerel(Fence.w.r);[W] target_ppo [W];fencerel(Fence.w.r);[W]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_w_r']
check all rels
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_w_r']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_w_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_w_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.w.r);[W]
need_check_ppo [W];fencerel(Fence.w.r);[W] target_ppo [W];fencerel(Fence.w.r);[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_w_r')]
{}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [W];fencerel(Fence.w.r);[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];fencerel(Fence.w.r);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.w.r);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.w.rdWW Coe Fence.rw.rwdWW Coe
stengthen state, 0:x9=2; 1:x9=2;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586bdf364b0> [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586bdf45040>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence w, r    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe  0.4193s
#Executions: 95

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_rw;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_rw;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 R;fence_w_r;W 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_r_r;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 W;fence_r_r;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_rw_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];po;[W], relax is False
candidate_ppo: [W];fencerel(Fence.w.r);[W], relax is False
ID: 0 cur candidate_ppo: [W];po;[W],relax is False
[W];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[W] contain_flag False can_relax_flag False
add ppo [W];po;[W] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [W];fencerel(Fence.w.r);[W],relax is False
[W];fencerel(Fence.w.r);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.w.r);[W] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.w.r);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]']
ppo [W];fencerel(Fence.w.r);[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus Fence.w.rdWW Coe Fence.rw.rwdWW Coe
[W];fencerel(Fence.w.r);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
ppo [W];fencerel(Fence.w.r);[W]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
['W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.w.r);[W]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
check ppo [W];fencerel(Fence.w.r);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.w.r);[W]
start check
check counter ppo
ppo:[W];fencerel(Fence.w.r);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.w.r);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
candidate_ppo: [W];fencerel(Fence.w.r);[W], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.w.r);[W] pass test
==== candidate ppo ====
[W];fencerel(Fence.w.r);[W] [W];fencerel(Fence.w.r);[W] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 67
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
['W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, w    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.7sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  0.8sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  1.0sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  1.1sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  1.2sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 1
Time W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe  1.3989s
#Executions: 600

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, w    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.7sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  0.8sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  0.9sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  1.0sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  1.1sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe  1.2794s
#Executions: 600

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus
strengthen,s,exe 0:x9=2; 1:x9=2;  [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;po;W
all_rels
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_w']
check all rels
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')]
{}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [W];po;[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWW Coe Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;fence_r_w;W
all_rels
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_w']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.r.w);[W]
need_check_ppo [W];fencerel(Fence.r.w);[W] target_ppo [W];fencerel(Fence.r.w);[W]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_w']
check all rels
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_w']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_w']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_w']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.r.w);[W]
need_check_ppo [W];fencerel(Fence.r.w);[W] target_ppo [W];fencerel(Fence.r.w);[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_w')]
{}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [W];fencerel(Fence.r.w);[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];fencerel(Fence.r.w);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.r.w);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.r.wdWW Coe Fence.rw.rwdWW Coe
stengthen state, 0:x9=2; 1:x9=2;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586be4f5a00> [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586be4b72f0>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, w    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |█████████████████████████-------------------------| 50.0% 100/200 | Elapsed Time:  0.5sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 4
0:x9=1; 1:x9=2;  => 2
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe  0.5422s
#Executions: 200

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_rw;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_rw;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 R;fence_w_r;W 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_r_r;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 W;fence_r_r;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_rw_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 W;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];po;[W], relax is False
candidate_ppo: [W];fencerel(Fence.r.w);[W], relax is False
ID: 0 cur candidate_ppo: [W];po;[W],relax is False
[W];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[W] contain_flag False can_relax_flag False
add ppo [W];po;[W] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [W];fencerel(Fence.r.w);[W],relax is False
[W];fencerel(Fence.r.w);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.r.w);[W] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.r.w);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]']
ppo [W];fencerel(Fence.r.w);[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus Fence.r.wdWW Coe Fence.rw.rwdWW Coe
[W];fencerel(Fence.r.w);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
ppo [W];fencerel(Fence.r.w);[W]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
['W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.r.w);[W]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
check ppo [W];fencerel(Fence.r.w);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.r.w);[W]
start check
check counter ppo
ppo:[W];fencerel(Fence.r.w);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.r.w);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
candidate_ppo: [W];fencerel(Fence.r.w);[W], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.r.w);[W] pass test
==== candidate ppo ====
[W];fencerel(Fence.r.w);[W] [W];fencerel(Fence.r.w);[W] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 68
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
synth ppo by litmus test 69
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+rfi-fence.r.rs': [0:x7=1; 0:x8=0; 1:x7=1; 1:x8=1; , 0:x7=1; 0:x8=1; 1:x7=1; 1:x8=0; , 0:x7=1; 0:x8=1; 1:x7=1; 1:x8=1; ]}
now_herd_logs_ppo_remove {'SB+rfi-fence.r.rs': [0:x7=1; 0:x8=0; 1:x7=1; 1:x8=1; , 0:x7=1; 0:x8=1; 1:x7=1; 1:x8=0; , 0:x7=1; 0:x8=1; 1:x7=1; 1:x8=1; ]}
[]
synth ppo by litmus test 70
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
['W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, r    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.7sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  0.7sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  1.0sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  1.1sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  1.2sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 1
Time W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe  1.3971s
#Executions: 600

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, r    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.7sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  0.8sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  1.0sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  1.0sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  1.1sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe  1.2731s
#Executions: 600

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
strengthen,s,exe 0:x9=2; 1:x9=2;  [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;po;W
all_rels
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_r']
check all rels
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')]
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	]]
ppo [W];po;[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWW Coe Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;fence_r_r;W
all_rels
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.r.r);[W]
need_check_ppo [W];fencerel(Fence.r.r);[W] target_ppo [W];fencerel(Fence.r.r);[W]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_r']
check all rels
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['po', 'fence_r_r']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_r_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_r_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.r.r);[W]
need_check_ppo [W];fencerel(Fence.r.r);[W] target_ppo [W];fencerel(Fence.r.r);[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_r_r')]
{}
filter_cycle [[P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	]]
ppo [W];fencerel(Fence.r.r);[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];fencerel(Fence.r.r);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.r.r);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.r.rdWW Coe Fence.rw.rwdWW Coe
stengthen state, 0:x9=2; 1:x9=2;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586bdf68740> [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586befa5700>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence r, r    | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |█████████████████████████-------------------------| 50.0% 100/200 | Elapsed Time:  0.5sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 4
0:x9=1; 1:x9=2;  => 2
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe  0.5391s
#Executions: 200

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_rw;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_rw;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 R;fence_w_r;W 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_r_r;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 W;fence_r_r;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_rw_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 W;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;W 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];po;[W], relax is False
candidate_ppo: [W];fencerel(Fence.r.r);[W], relax is False
ID: 0 cur candidate_ppo: [W];po;[W],relax is False
[W];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[W] contain_flag False can_relax_flag False
add ppo [W];po;[W] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [W];fencerel(Fence.r.r);[W],relax is False
[W];fencerel(Fence.r.r);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.r.r);[W] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.r.r);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]']
ppo [W];fencerel(Fence.r.r);[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus Fence.r.rdWW Coe Fence.rw.rwdWW Coe
[W];fencerel(Fence.r.r);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
ppo [W];fencerel(Fence.r.r);[W]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
['W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.r.r);[W]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
check ppo [W];fencerel(Fence.r.r);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.r.r);[W]
start check
check counter ppo
ppo:[W];fencerel(Fence.r.r);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.r.r);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
candidate_ppo: [W];fencerel(Fence.r.r);[W], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.r.r);[W] pass test
==== candidate ppo ====
[W];fencerel(Fence.r.r);[W] [W];fencerel(Fence.r.r);[W] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 71
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
['W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence rw, r   | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.7sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  0.8sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  1.0sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  1.1sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  1.2sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 1
Time W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe  1.3996s
#Executions: 600

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence rw, r   | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.7sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  0.8sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  0.9sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  1.0sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  1.1sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe  1.2754s
#Executions: 600

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
strengthen,s,exe 0:x9=2; 1:x9=2;  [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;po;W
all_rels
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_rw_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_rw_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_rw_r']
check all rels
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_rw_r']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_rw_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W] target_ppo [W];po;[W]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')]
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [W];po;[W] target_ppo [W];po;[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	]]
ppo [W];po;[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWW Coe Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True
candidate_add_ppo W;fence_rw_r;W
all_rels
rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_rw_r']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_rw_r']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.rw.r);[W]
need_check_ppo [W];fencerel(Fence.rw.r);[W] target_ppo [W];fencerel(Fence.rw.r);[W]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_rw_r']
check all rels
check rel --: None P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	 True False ['fence', 'po', 'fence_rw_r']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	 True True ['po', 'fence_rw_r']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po', 'fence_rw_r']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]]
need_check_ppo [W];po;[W] target_ppo [W];fencerel(Fence.rw.r);[W]
need_check_ppo [W];fencerel(Fence.rw.r);[W] target_ppo [W];fencerel(Fence.rw.r);[W]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, 'fence_rw_r')]
{}
filter_cycle [[P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	]]
ppo [W];fencerel(Fence.rw.r);[W]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];fencerel(Fence.rw.r);[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];fencerel(Fence.rw.r);[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle Fence.rw.rdWW Coe Fence.rw.rwdWW Coe
stengthen state, 0:x9=2; 1:x9=2;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586bdfc12e0> [P0: <0x10>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x14>	lw x9_p0_1, 0(x8_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586bf5e64b0>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
         P0          |         P1           ;
<0x00> ori x5, x0, 2 | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)  | <0x04> sw x5, 0(x6)  ;
<0x08> fence rw, r   | <0x08> fence rw, rw  ;
<0x0C> ori x7, x0, 1 | <0x0C> ori x7, x0, 1 ;
<0x10> sw x7, 0(x8)  | <0x10> sw x7, 0(x8)  ;
<0x14> lw x9, 0(x8)  | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x9==2/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x9=1; 1:x9=1;  => 3
0:x9=1; 1:x9=2;  => 1
0:x9=2; 1:x9=1;  => 2
0:x9=2; 1:x9=2;  => 1
Time W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe  0.4253s
#Executions: 95

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_rw;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_rw;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 R;fence_w_r;W 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_r_r;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 W;fence_r_r;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_rw_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 W;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;W 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 W;fence_r_r;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 2
candidate_ppo: [W];po;[W], relax is False
candidate_ppo: [W];fencerel(Fence.rw.r);[W], relax is False
ID: 0 cur candidate_ppo: [W];po;[W],relax is False
[W];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];po;[W] contain_flag False can_relax_flag False
add ppo [W];po;[W] PPOValidFlag.Invalid
ID: 1 cur candidate_ppo: [W];fencerel(Fence.rw.r);[W],relax is False
[W];fencerel(Fence.rw.r);[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [W];fencerel(Fence.rw.r);[W] contain_flag False can_relax_flag False
add ppo [W];fencerel(Fence.rw.r);[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]']
ppo [W];fencerel(Fence.rw.r);[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus Fence.rw.rdWW Coe Fence.rw.rwdWW Coe
[W];fencerel(Fence.rw.r);[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
ppo [W];fencerel(Fence.rw.r);[W]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]}
W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; , 0:x9=2; 1:x9=2; ]
[0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]
['W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe']
check ppo [W];fencerel(Fence.rw.r);[W]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
check ppo [W];fencerel(Fence.rw.r);[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];fencerel(Fence.rw.r);[W]
start check
check counter ppo
ppo:[W];fencerel(Fence.rw.r);[W] => counter_ppo:
-----------------
ID0:candidate_ppo [W];fencerel(Fence.rw.r);[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
candidate_ppo: [W];fencerel(Fence.rw.r);[W], cur_failed_litmus_tests: [], passed? True

[W];fencerel(Fence.rw.r);[W] pass test
==== candidate ppo ====
[W];fencerel(Fence.rw.r);[W] [W];fencerel(Fence.rw.r);[W] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 72
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
['R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
          P0          |         P1           ;
<0x00> lw x5, 0(x6)   | <0x00> ori x5, x0, 1 ;
<0x04> lr.w x7, 0(x8) | <0x04> sw x5, 0(x6)  ;
                      | <0x08> fence rw, rw  ;
                      | <0x0C> ori x7, x0, 1 ;
                      | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=1;  => 1
Time R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe  0.0425s
#Executions: 18

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
          P0          |         P1           ;
<0x00> lw x5, 0(x6)   | <0x00> ori x5, x0, 1 ;
<0x04> lr.w x7, 0(x8) | <0x04> sw x5, 0(x6)  ;
                      | <0x08> fence rw, rw  ;
                      | <0x0C> ori x7, x0, 1 ;
                      | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=0;  => 1
0:x5=1; 0:x7=1;  => 1
Time R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe  0.0352s
#Executions: 18

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x5=1; 0:x7=0;  [P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	, 'po')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	, 'po')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	 False False
candidate_add_ppo R;po;XLr
all_rels
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.XLr(e2)

add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	, 'po')]]
need_check_ppo [R];po;[XLr] target_ppo [R];po;[XLr]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	 False False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	, 'po')]]
need_check_ppo [R];po;[XLr] target_ppo [R];po;[XLr]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [R];po;[XLr]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [R];po;[XLr]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[XLr]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Fre Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x7=0;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586bdfd22d0> [P0: <0x04>	lr.w x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586be326b40>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
          P0          |         P1           ;
<0x00> lw x5, 0(x6)   | <0x00> ori x5, x0, 1 ;
<0x04> lr.w x7, 0(x8) | <0x04> sw x5, 0(x6)  ;
                      | <0x08> fence rw, rw  ;
                      | <0x0C> ori x7, x0, 1 ;
                      | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=0;  => 1
0:x5=1; 0:x7=1;  => 1
Time R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe  0.0300s
#Executions: 9

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_rw;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_rw;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 R;fence_w_r;W 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_r_r;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 W;fence_r_r;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_rw_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 W;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;W 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 W;fence_r_r;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_rw_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 1
candidate_ppo: [R];po;[XLr], relax is False
ID: 0 cur candidate_ppo: [R];po;[XLr],relax is False
[R];po;[XLr]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [R];po;[XLr] contain_flag False can_relax_flag False
add ppo [R];po;[XLr] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]', '[R];po;[XLr]']
ppo [R];po;[XLr] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus PodRR Fre Fence.rw.rwdWW Rfe
[R];po;[XLr]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
ppo [R];po;[XLr]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [R];po;[XLr]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
check ppo [R];po;[XLr] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];po;[XLr]
start check
check counter ppo
ppo:[R];po;[XLr] => counter_ppo:
-----------------
ID0:candidate_ppo [R];po;[XLr]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
candidate_ppo: [R];po;[XLr], cur_failed_litmus_tests: [], passed? True

[R];po;[XLr] pass test
==== candidate ppo ====
[R];po;[XLr] [R];po;[XLr] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 73
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=0; , 0:x6=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe
[0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]
[0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=0; , 0:x6=1; 0:x8=1; ]
['RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x5=x; 0:x9=y; 1:x6=y; 1:x8=x}
               P0                |         P1           ;
<0x00> ori x7, x0, 2             | <0x00> ori x5, x0, 1 ;
<0x04> amoswap.w.rl x6, x7, (x5) | <0x04> sw x5, 0(x6)  ;
<0x08> lw x8, 0(x9)              | <0x08> fence rw, rw  ;
                                 | <0x0C> ori x7, x0, 1 ;
                                 | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x6==1/\0:x8==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x6=0; 0:x8=0;  => 1
0:x6=0; 0:x8=1;  => 1
0:x6=1; 0:x8=1;  => 1
Time RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe  0.0662s
#Executions: 24

validate litmus by cur_mm
{0:x5=x; 0:x9=y; 1:x6=y; 1:x8=x}
               P0                |         P1           ;
<0x00> ori x7, x0, 2             | <0x00> ori x5, x0, 1 ;
<0x04> amoswap.w.rl x6, x7, (x5) | <0x04> sw x5, 0(x6)  ;
<0x08> lw x8, 0(x9)              | <0x08> fence rw, rw  ;
                                 | <0x0C> ori x7, x0, 1 ;
                                 | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x6==1/\0:x8==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x6=0; 0:x8=0;  => 1
0:x6=0; 0:x8=1;  => 1
0:x6=1; 0:x8=0;  => 1
0:x6=1; 0:x8=1;  => 1
Time RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe  0.0533s
#Executions: 24

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x6=1; 0:x8=0;  [P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
events sequence
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
now check the paths P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
[(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]
[(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]
[(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]
[(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]
from this path get ppo
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False
candidate_add_ppo RL;rmw;RL;po;R
all_rels
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.RL(e1) and ra.rmw(e1,e2) and ra.RL(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [RL];rmw;[RL];po;[R] target_ppo [RL];rmw;[RL];po;[R]
add_rels_final
add rel final P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [RL];rmw;[RL];po;[R] target_ppo [RL];rmw;[RL];po;[R]
insert_path [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]
{<0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	: True}
filter_cycle [[P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	]]
ppo [RL];rmw;[RL];po;[R]
e1 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
e2 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
cycle str
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [RL];rmw;[RL];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [RL];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Rmw PodWRRlP Fre Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False
candidate_add_ppo RL;po;RL;po;R
all_rels
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.RL(e1) and ra.po(e1,e2) and ra.RL(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [RL];rmw;[RL];po;[R] target_ppo [RL];po;[RL];po;[R]
need_check_ppo [RL];po;[RL];po;[R] target_ppo [RL];po;[RL];po;[R]
add_rels_final
add rel final P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [RL];rmw;[RL];po;[R] target_ppo [RL];po;[RL];po;[R]
need_check_ppo [RL];po;[RL];po;[R] target_ppo [RL];po;[RL];po;[R]
insert_path [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]
{<0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	: True}
filter_cycle [[P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	]]
ppo [RL];po;[RL];po;[R]
e1 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
e2 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
cycle str
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [RL];po;[RL];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [RL];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Rmw PodWRRlP Fre Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False
candidate_add_ppo RL;po-loc;RL;po;R
all_rels
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.RL(e1) and ra.po_loc(e1,e2) and ra.RL(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [RL];rmw;[RL];po;[R] target_ppo [RL];po-loc;[RL];po;[R]
need_check_ppo [RL];po;[RL];po;[R] target_ppo [RL];po-loc;[RL];po;[R]
need_check_ppo [RL];po-loc;[RL];po;[R] target_ppo [RL];po-loc;[RL];po;[R]
add_rels_final
add rel final P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [RL];rmw;[RL];po;[R] target_ppo [RL];po-loc;[RL];po;[R]
need_check_ppo [RL];po;[RL];po;[R] target_ppo [RL];po-loc;[RL];po;[R]
need_check_ppo [RL];po-loc;[RL];po;[R] target_ppo [RL];po-loc;[RL];po;[R]
insert_path [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]
{<0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	: True}
filter_cycle [[P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	]]
ppo [RL];po-loc;[RL];po;[R]
e1 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
e2 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
cycle str
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [RL];po-loc;[RL];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [RL];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Rmw PodWRRlP Fre Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False
candidate_add_ppo RL;fri;RL;po;R
all_rels
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.RL(e1) and ra.fri(e1,e2) and ra.RL(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [RL];rmw;[RL];po;[R] target_ppo [RL];fri;[RL];po;[R]
need_check_ppo [RL];po;[RL];po;[R] target_ppo [RL];fri;[RL];po;[R]
need_check_ppo [RL];po-loc;[RL];po;[R] target_ppo [RL];fri;[RL];po;[R]
need_check_ppo [RL];fri;[RL];po;[R] target_ppo [RL];fri;[RL];po;[R]
add_rels_final
add rel final P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [RL];rmw;[RL];po;[R] target_ppo [RL];fri;[RL];po;[R]
need_check_ppo [RL];po;[RL];po;[R] target_ppo [RL];fri;[RL];po;[R]
need_check_ppo [RL];po-loc;[RL];po;[R] target_ppo [RL];fri;[RL];po;[R]
need_check_ppo [RL];fri;[RL];po;[R] target_ppo [RL];fri;[RL];po;[R]
insert_path [(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]
{<0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	: True}
filter_cycle [[P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	]]
ppo [RL];fri;[RL];po;[R]
e1 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
e2 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
cycle str
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [RL];fri;[RL];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [RL];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Rmw PodWRRlP Fre Fence.rw.rwdWW Rfe
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
events sequence
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(R), []
ei,ej,relations, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is False
(P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
now check the paths P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
stengthen state, 0:x6=1; 0:x8=0;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586bdfd3fe0> [P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w.rl x6_p0_1, x7_p0_1, (x5_p0_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586be550200>, <src.slide.synth.constraint.Constraint object at 0x7586bdfd0da0>] False
{0:x5=x; 0:x9=y; 1:x6=y; 1:x8=x}
               P0                |         P1           ;
<0x00> ori x7, x0, 2             | <0x00> ori x5, x0, 1 ;
<0x04> amoswap.w.rl x6, x7, (x5) | <0x04> sw x5, 0(x6)  ;
<0x08> lw x8, 0(x9)              | <0x08> fence rw, rw  ;
                                 | <0x0C> ori x7, x0, 1 ;
                                 | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x6==1/\0:x8==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x6=0; 0:x8=0;  => 1
0:x6=0; 0:x8=1;  => 1
0:x6=1; 0:x8=0;  => 1
0:x6=1; 0:x8=1;  => 1
Time RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe  0.0449s
#Executions: 12

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_rw;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_rw;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 R;fence_w_r;W 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_r_r;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 W;fence_r_r;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_rw_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 W;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;W 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 W;fence_r_r;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_rw_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func59 R;po;XLr 
def ppo_candidate_func59(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.XLr(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 2
candidate_ppos size: 4
candidate_ppos size: 0
candidate_ppo: [RL];po;[R], relax is False
ID: 0 cur candidate_ppo: [RL];po;[R],relax is False
[RL];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [RL];po;[R] contain_flag False can_relax_flag False
add ppo [RL];po;[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]', '[R];po;[XLr]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]', '[R];po;[XLr]', '[RL];po;[R]']
ppo [RL];po;[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe.litmus Rmw PodWRRlP Fre Fence.rw.rwdWW Rfe
[RL];po;[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
ppo [RL];po;[R]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=0; , 0:x6=1; 0:x8=1; ]}
RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe
[0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=0; , 0:x6=1; 0:x8=1; ]
[0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]
['RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe']
check ppo [RL];po;[R]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
[]
check ppo [RL];po;[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [RL];po;[R]
start check
check counter ppo
ppo:[RL];po;[R] => counter_ppo:
-----------------
ID0:candidate_ppo [RL];po;[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
[]
candidate_ppo: [RL];po;[R], cur_failed_litmus_tests: [], passed? True

[RL];po;[R] pass test
==== candidate ppo ====
[RL];po;[R] [RL];po;[R] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 74
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=0; , 0:x6=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe
[0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]
[0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=0; , 0:x6=1; 0:x8=1; ]
['AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
validate litmus by tgt_mm
{0:x5=x; 0:x9=y; 1:x6=y; 1:x8=x}
              P0              |         P1           ;
<0x00> ori x7, x0, 2          | <0x00> ori x5, x0, 1 ;
<0x04> amoswap.w x6, x7, (x5) | <0x04> sw x5, 0(x6)  ;
<0x08> lw x8, 0(x9)           | <0x08> fence rw, rw  ;
                              | <0x0C> ori x7, x0, 1 ;
                              | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x6==1/\0:x8==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x6=0; 0:x8=0;  => 1
0:x6=0; 0:x8=1;  => 1
0:x6=1; 0:x8=1;  => 1
Time AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe  0.0663s
#Executions: 24

validate litmus by cur_mm
{0:x5=x; 0:x9=y; 1:x6=y; 1:x8=x}
              P0              |         P1           ;
<0x00> ori x7, x0, 2          | <0x00> ori x5, x0, 1 ;
<0x04> amoswap.w x6, x7, (x5) | <0x04> sw x5, 0(x6)  ;
<0x08> lw x8, 0(x9)           | <0x08> fence rw, rw  ;
                              | <0x0C> ori x7, x0, 1 ;
                              | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x6==1/\0:x8==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x6=0; 0:x8=0;  => 1
0:x6=0; 0:x8=1;  => 1
0:x6=1; 0:x8=0;  => 1
0:x6=1; 0:x8=1;  => 1
Time AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe  0.0541s
#Executions: 24

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x6=1; 0:x8=0;  [P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
now check the paths P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False
candidate_add_ppo AMO;rmw;AMO;po;R
all_rels
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.AMO(e1) and ra.rmw(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[R] target_ppo [AMO];rmw;[AMO];po;[R]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[R] target_ppo [AMO];rmw;[AMO];po;[R]
insert_path [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]
{<0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	: True}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [AMO];rmw;[AMO];po;[R]
e1 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
e2 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [AMO];rmw;[AMO];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [AMO];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Rmw PodWR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False
candidate_add_ppo AMO;po;AMO;po;R
all_rels
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.AMO(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[R] target_ppo [AMO];po;[AMO];po;[R]
need_check_ppo [AMO];po;[AMO];po;[R] target_ppo [AMO];po;[AMO];po;[R]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[R] target_ppo [AMO];po;[AMO];po;[R]
need_check_ppo [AMO];po;[AMO];po;[R] target_ppo [AMO];po;[AMO];po;[R]
insert_path [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]
{<0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	: True}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [AMO];po;[AMO];po;[R]
e1 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
e2 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [AMO];po;[AMO];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [AMO];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Rmw PodWR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False
candidate_add_ppo AMO;po-loc;AMO;po;R
all_rels
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.AMO(e1) and ra.po_loc(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[R] target_ppo [AMO];po-loc;[AMO];po;[R]
need_check_ppo [AMO];po;[AMO];po;[R] target_ppo [AMO];po-loc;[AMO];po;[R]
need_check_ppo [AMO];po-loc;[AMO];po;[R] target_ppo [AMO];po-loc;[AMO];po;[R]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[R] target_ppo [AMO];po-loc;[AMO];po;[R]
need_check_ppo [AMO];po;[AMO];po;[R] target_ppo [AMO];po-loc;[AMO];po;[R]
need_check_ppo [AMO];po-loc;[AMO];po;[R] target_ppo [AMO];po-loc;[AMO];po;[R]
insert_path [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]
{<0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	: True}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [AMO];po-loc;[AMO];po;[R]
e1 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
e2 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [AMO];po-loc;[AMO];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [AMO];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Rmw PodWR Fre Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False
candidate_add_ppo AMO;fri;AMO;po;R
all_rels
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.AMO(e1) and ra.fri(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.R(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[R] target_ppo [AMO];fri;[AMO];po;[R]
need_check_ppo [AMO];po;[AMO];po;[R] target_ppo [AMO];fri;[AMO];po;[R]
need_check_ppo [AMO];po-loc;[AMO];po;[R] target_ppo [AMO];fri;[AMO];po;[R]
need_check_ppo [AMO];fri;[AMO];po;[R] target_ppo [AMO];fri;[AMO];po;[R]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[R] target_ppo [AMO];fri;[AMO];po;[R]
need_check_ppo [AMO];po;[AMO];po;[R] target_ppo [AMO];fri;[AMO];po;[R]
need_check_ppo [AMO];po-loc;[AMO];po;[R] target_ppo [AMO];fri;[AMO];po;[R]
need_check_ppo [AMO];fri;[AMO];po;[R] target_ppo [AMO];fri;[AMO];po;[R]
insert_path [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]
{<0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	: True}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [AMO];fri;[AMO];po;[R]
e1 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
e2 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [AMO];fri;[AMO];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [AMO];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Rmw PodWR Fre Fence.rw.rwdWW Rfe
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), []
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is False
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
now check the paths P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	
stengthen state, 0:x6=1; 0:x8=0;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586bdf08e00> [P0: <0x08>	lw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586bdfc38c0>, <src.slide.synth.constraint.Constraint object at 0x7586bdfd5e80>] False
{0:x5=x; 0:x9=y; 1:x6=y; 1:x8=x}
              P0              |         P1           ;
<0x00> ori x7, x0, 2          | <0x00> ori x5, x0, 1 ;
<0x04> amoswap.w x6, x7, (x5) | <0x04> sw x5, 0(x6)  ;
<0x08> lw x8, 0(x9)           | <0x08> fence rw, rw  ;
                              | <0x0C> ori x7, x0, 1 ;
                              | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x6==1/\0:x8==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x6=0; 0:x8=0;  => 1
0:x6=0; 0:x8=1;  => 1
0:x6=1; 0:x8=0;  => 1
0:x6=1; 0:x8=1;  => 1
Time AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe  0.0445s
#Executions: 12

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_rw;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_rw;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 R;fence_w_r;W 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_r_r;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 W;fence_r_r;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_rw_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 W;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;W 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 W;fence_r_r;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_rw_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func59 R;po;XLr 
def ppo_candidate_func59(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.XLr(e2)
 PPOInitFlag.Verified
ppo_candidate_func60 RL;po;R 
def ppo_candidate_func60(ra, e1: Event, e2: Event) -> bool:
    return ra.RL(e1) and ra.po(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 2
candidate_ppos size: 4
candidate_ppos size: 0
candidate_ppo: [AMO];po;[R], relax is False
ID: 0 cur candidate_ppo: [AMO];po;[R],relax is False
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[]
ppo [AMO];po;[R] contain_flag False can_relax_flag False
add ppo [AMO];po;[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]', '[R];po;[XLr]', '[RL];po;[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]', '[R];po;[XLr]', '[RL];po;[R]', '[AMO];po\\(po-loc);[R]']
ppo [AMO];po;[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus Rmw PodWR Fre Fence.rw.rwdWW Rfe
[AMO];po;[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
ppo [AMO];po;[R]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=0; , 0:x6=1; 0:x8=1; ]}
AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe
[0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=0; , 0:x6=1; 0:x8=1; ]
[0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]
['AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [AMO];po;[R]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
[]
check ppo [AMO];po;[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [AMO];po;[R]
start check
check counter ppo
ppo:[AMO];po;[R] => counter_ppo:
-----------------
ID0:candidate_ppo [AMO];po;[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
[]
candidate_ppo: [AMO];po;[R], cur_failed_litmus_tests: [], passed? True

[AMO];po;[R] pass test
==== candidate ppo ====
[AMO];po;[R] [AMO];po;[R] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 75
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_XLr_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_XLr_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
synth ppo by litmus test 76
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
['XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
          P0          |         P1           ;
<0x00> lr.w x5, 0(x6) | <0x00> ori x5, x0, 1 ;
<0x04> lw x7, 0(x8)   | <0x04> sw x5, 0(x6)  ;
                      | <0x08> fence rw, rw  ;
                      | <0x0C> ori x7, x0, 1 ;
                      | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=1;  => 1
Time XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe  0.0413s
#Executions: 18

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
          P0          |         P1           ;
<0x00> lr.w x5, 0(x6) | <0x00> ori x5, x0, 1 ;
<0x04> lw x7, 0(x8)   | <0x04> sw x5, 0(x6)  ;
                      | <0x08> fence rw, rw  ;
                      | <0x0C> ori x7, x0, 1 ;
                      | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=0;  => 1
0:x5=1; 0:x7=1;  => 1
Time XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe  0.0356s
#Executions: 18

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x5=1; 0:x7=0;  [P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	(R), P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
now check the paths P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
from this path get ppo
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	 False False
candidate_add_ppo XLr;po;R
all_rels
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.XLr(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	(R), P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]]
need_check_ppo [XLr];po;[R] target_ppo [XLr];po;[R]
add_rels_final
add rel final P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po']
check all rels
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	 False False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	(R), P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	(R), ['po']
this path is True
(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]]
need_check_ppo [XLr];po;[R] target_ppo [XLr];po;[R]
insert_path [(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	]]
ppo [XLr];po;[R]
e1 P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	
P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	
P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	
P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation rfe
path_single_ppo [XLr];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [XLr];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Fre Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x7=0;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586bde22690> [P0: <0x04>	lw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586bea468a0>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
          P0          |         P1           ;
<0x00> lr.w x5, 0(x6) | <0x00> ori x5, x0, 1 ;
<0x04> lw x7, 0(x8)   | <0x04> sw x5, 0(x6)  ;
                      | <0x08> fence rw, rw  ;
                      | <0x0C> ori x7, x0, 1 ;
                      | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x5==1/\0:x7==0)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x7=0;  => 1
0:x5=0; 0:x7=1;  => 1
0:x5=1; 0:x7=0;  => 1
0:x5=1; 0:x7=1;  => 1
Time XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe  0.0299s
#Executions: 9

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_rw;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_rw;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 R;fence_w_r;W 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_r_r;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 W;fence_r_r;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_rw_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 W;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;W 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 W;fence_r_r;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_rw_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func59 R;po;XLr 
def ppo_candidate_func59(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.XLr(e2)
 PPOInitFlag.Verified
ppo_candidate_func60 RL;po;R 
def ppo_candidate_func60(ra, e1: Event, e2: Event) -> bool:
    return ra.RL(e1) and ra.po(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func61 AMO;po\(po-loc);R 
def ppo_candidate_func61(ra, e1: Event, e2: Event) -> bool:
    return ra.AMO(e1) and ra.po(e1,e2) and not (ra.po_loc(e1,e2)) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 1
candidate_ppo: [XLr];po;[R], relax is False
ID: 0 cur candidate_ppo: [XLr];po;[R],relax is False
[XLr];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[]
ppo [XLr];po;[R] contain_flag False can_relax_flag False
add ppo [XLr];po;[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]', '[R];po;[XLr]', '[RL];po;[R]', '[AMO];po\\(po-loc);[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]', '[R];po;[XLr]', '[RL];po;[R]', '[AMO];po\\(po-loc);[R]', '[XLr];po;[R]']
ppo [XLr];po;[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus PodRR Fre Fence.rw.rwdWW Rfe
[XLr];po;[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
ppo [XLr];po;[R]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]}
XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=0; , 0:x5=1; 0:x7=1; ]
[0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]
['XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe']
check ppo [XLr];po;[R]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
check ppo [XLr];po;[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [XLr];po;[R]
start check
check counter ppo
ppo:[XLr];po;[R] => counter_ppo:
-----------------
ID0:candidate_ppo [XLr];po;[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
candidate_ppo: [XLr];po;[R], cur_failed_litmus_tests: [], passed? True

[XLr];po;[R] pass test
==== candidate ppo ====
[XLr];po;[R] [XLr];po;[R] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 77
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
synth ppo by litmus test 78
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_W_po_R_Rmw_PosWWRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_W_po_R_Rmw_PosWWRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 79
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_R_ctrl_XLr_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_R_ctrl_XLr_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 80
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_po_R_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_po_R_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 81
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_R_ctrl_XLr_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_R_ctrl_XLr_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
synth ppo by litmus test 82
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_R_ctrl_R_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_R_ctrl_R_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
synth ppo by litmus test 83
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_ctrl_R_Rmw_PodWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_ctrl_R_Rmw_PodWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 84
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_po_R_Rmw_PodWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_po_R_Rmw_PodWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 85
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; , 0:x6=1; 0:x10=2; ]}
now_herd_logs_ppo_remove {'AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; ]}
AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe
[0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; ]
[0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; , 0:x6=1; 0:x10=2; ]
['AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
validate litmus by tgt_mm
{0:x5=x; 0:x9=y; 1:x6=y; 1:x8=x}
              P0              |         P1           ;
<0x00> ori x7, x0, 2          | <0x00> ori x5, x0, 2 ;
<0x04> amoswap.w x6, x7, (x5) | <0x04> sw x5, 0(x6)  ;
<0x08> ori x8, x0, 1          | <0x08> fence rw, rw  ;
<0x0C> sw x8, 0(x9)           | <0x0C> ori x7, x0, 1 ;
<0x10> lw x10, 0(x9)          | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x10==2/\0:x6==1)

Progress [1/1]: |█████████████████████████████████████████---------| 83.3% 100/120 | Elapsed Time:  0.3sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x6=0; 0:x10=1;  => 2
0:x6=0; 0:x10=2;  => 1
0:x6=1; 0:x10=1;  => 1
Time AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe  0.3135s
#Executions: 120

validate litmus by cur_mm
{0:x5=x; 0:x9=y; 1:x6=y; 1:x8=x}
              P0              |         P1           ;
<0x00> ori x7, x0, 2          | <0x00> ori x5, x0, 2 ;
<0x04> amoswap.w x6, x7, (x5) | <0x04> sw x5, 0(x6)  ;
<0x08> ori x8, x0, 1          | <0x08> fence rw, rw  ;
<0x0C> sw x8, 0(x9)           | <0x0C> ori x7, x0, 1 ;
<0x10> lw x10, 0(x9)          | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x10==2/\0:x6==1)

Progress [1/1]: |█████████████████████████████████████████---------| 83.3% 100/120 | Elapsed Time:  0.3sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x6=0; 0:x10=1;  => 2
0:x6=0; 0:x10=2;  => 1
0:x6=1; 0:x10=1;  => 1
0:x6=1; 0:x10=2;  => 1
Time AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe  0.2894s
#Executions: 120

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x6=1; 0:x10=2;  [P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
now check the paths P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]
[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True
candidate_add_ppo AMO;rmw;AMO;po;W
all_rels
rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.AMO(e1) and ra.rmw(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.W(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W] target_ppo [AMO];rmw;[AMO];po;[W]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
check all rels
check rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W] target_ppo [AMO];rmw;[AMO];po;[W]
insert_path [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]
{<0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	: True}
filter_cycle [[P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	]]
ppo [AMO];rmw;[AMO];po;[W]
e1 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
e2 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
cycle str
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [AMO];rmw;[AMO];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [AMO];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Rmw PodWW Coe Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True
candidate_add_ppo AMO;po;AMO;po;W
all_rels
rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.AMO(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.W(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W] target_ppo [AMO];po;[AMO];po;[W]
need_check_ppo [AMO];po;[AMO];po;[W] target_ppo [AMO];po;[AMO];po;[W]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
check all rels
check rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W] target_ppo [AMO];po;[AMO];po;[W]
need_check_ppo [AMO];po;[AMO];po;[W] target_ppo [AMO];po;[AMO];po;[W]
insert_path [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]
{<0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	: True}
filter_cycle [[P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	]]
ppo [AMO];po;[AMO];po;[W]
e1 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
e2 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
cycle str
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [AMO];po;[AMO];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [AMO];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Rmw PodWW Coe Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True
candidate_add_ppo AMO;po-loc;AMO;po;W
all_rels
rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.AMO(e1) and ra.po_loc(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.W(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W] target_ppo [AMO];po-loc;[AMO];po;[W]
need_check_ppo [AMO];po;[AMO];po;[W] target_ppo [AMO];po-loc;[AMO];po;[W]
need_check_ppo [AMO];po-loc;[AMO];po;[W] target_ppo [AMO];po-loc;[AMO];po;[W]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
check all rels
check rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W] target_ppo [AMO];po-loc;[AMO];po;[W]
need_check_ppo [AMO];po;[AMO];po;[W] target_ppo [AMO];po-loc;[AMO];po;[W]
need_check_ppo [AMO];po-loc;[AMO];po;[W] target_ppo [AMO];po-loc;[AMO];po;[W]
insert_path [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]
{<0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	: True}
filter_cycle [[P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	]]
ppo [AMO];po-loc;[AMO];po;[W]
e1 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
e2 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
cycle str
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [AMO];po-loc;[AMO];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [AMO];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Rmw PodWW Coe Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True
candidate_add_ppo AMO;fri;AMO;po;W
all_rels
rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.AMO(e1) and ra.fri(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.W(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W] target_ppo [AMO];fri;[AMO];po;[W]
need_check_ppo [AMO];po;[AMO];po;[W] target_ppo [AMO];fri;[AMO];po;[W]
need_check_ppo [AMO];po-loc;[AMO];po;[W] target_ppo [AMO];fri;[AMO];po;[W]
need_check_ppo [AMO];fri;[AMO];po;[W] target_ppo [AMO];fri;[AMO];po;[W]
add_rels_final
add rel final P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
check all rels
check rel --: None P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 True False ['rfe']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 False False ['po']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	 True False ['po']
check rel P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
this path is True
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri')
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'rmw'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'po_loc'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')], [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [AMO];rmw;[AMO];po;[W] target_ppo [AMO];fri;[AMO];po;[W]
need_check_ppo [AMO];po;[AMO];po;[W] target_ppo [AMO];fri;[AMO];po;[W]
need_check_ppo [AMO];po-loc;[AMO];po;[W] target_ppo [AMO];fri;[AMO];po;[W]
need_check_ppo [AMO];fri;[AMO];po;[W] target_ppo [AMO];fri;[AMO];po;[W]
insert_path [(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, 'fri'), (P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]
{<0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	: True}
filter_cycle [[P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	]]
ppo [AMO];fri;[AMO];po;[W]
e1 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
e2 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
cycle str
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [AMO];fri;[AMO];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [AMO];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle Rmw PodWW Coe Fence.rw.rwdWW Rfe
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
events sequence
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:True
P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, is write event:False
P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(R), []
ei,ej,relations, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	(W), P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is False
(P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
now check the paths P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	 P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	
stengthen state, 0:x6=1; 0:x10=2;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586bdf37410> [P0: <0x0C>	sw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x04>	amoswap.w x6_p0_1, x7_p0_1, (x5_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x9_p0_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586bdfc0590>, <src.slide.synth.constraint.Constraint object at 0x7586bdf0be00>] False
{0:x5=x; 0:x9=y; 1:x6=y; 1:x8=x}
              P0              |         P1           ;
<0x00> ori x7, x0, 2          | <0x00> ori x5, x0, 2 ;
<0x04> amoswap.w x6, x7, (x5) | <0x04> sw x5, 0(x6)  ;
<0x08> ori x8, x0, 1          | <0x08> fence rw, rw  ;
<0x0C> sw x8, 0(x9)           | <0x0C> ori x7, x0, 1 ;
<0x10> lw x10, 0(x9)          | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x10==2/\0:x6==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x6=0; 0:x10=1;  => 2
0:x6=0; 0:x10=2;  => 1
0:x6=1; 0:x10=1;  => 2
0:x6=1; 0:x10=2;  => 1
Time AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe  0.1697s
#Executions: 60

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_rw;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_rw;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 R;fence_w_r;W 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_r_r;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 W;fence_r_r;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_rw_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 W;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;W 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 W;fence_r_r;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_rw_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func59 R;po;XLr 
def ppo_candidate_func59(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.XLr(e2)
 PPOInitFlag.Verified
ppo_candidate_func60 RL;po;R 
def ppo_candidate_func60(ra, e1: Event, e2: Event) -> bool:
    return ra.RL(e1) and ra.po(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func61 AMO;po\(po-loc);R 
def ppo_candidate_func61(ra, e1: Event, e2: Event) -> bool:
    return ra.AMO(e1) and ra.po(e1,e2) and not (ra.po_loc(e1,e2)) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func62 XLr;po;R 
def ppo_candidate_func62(ra, e1: Event, e2: Event) -> bool:
    return ra.XLr(e1) and ra.po(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 2
candidate_ppos size: 4
candidate_ppos size: 0
candidate_ppo: [AMO];po;[W], relax is False
ID: 0 cur candidate_ppo: [AMO];po;[W],relax is False
[AMO];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[]
ppo [AMO];po;[W] contain_flag False can_relax_flag False
add ppo [AMO];po;[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]', '[R];po;[XLr]', '[RL];po;[R]', '[AMO];po\\(po-loc);[R]', '[XLr];po;[R]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]', '[R];po;[XLr]', '[RL];po;[R]', '[AMO];po\\(po-loc);[R]', '[XLr];po;[R]', '[AMO];po;[W]']
ppo [AMO];po;[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe.litmus Rmw PodWW Coe Fence.rw.rwdWW Rfe
[AMO];po;[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
ppo [AMO];po;[W]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; , 0:x6=1; 0:x10=2; ]}
AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe
[0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; , 0:x6=1; 0:x10=2; ]
[0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; ]
['AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe']
check ppo [AMO];po;[W]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; ]}
[]
check ppo [AMO];po;[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [AMO];po;[W]
start check
check counter ppo
ppo:[AMO];po;[W] => counter_ppo:
-----------------
ID0:candidate_ppo [AMO];po;[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; ]}
[]
candidate_ppo: [AMO];po;[W], cur_failed_litmus_tests: [], passed? True

[AMO];po;[W] pass test
==== candidate ppo ====
[AMO];po;[W] [AMO];po;[W] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 86
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_po_R_Rmw_PodWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_po_R_Rmw_PodWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 87
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_addr_R_Rmw_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_addr_R_Rmw_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 88
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_ctrl_XLr_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_R_ctrl_XLr_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 89
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_W_po_XLr_DpCtrldW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_W_po_XLr_DpCtrldW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 90
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_po_loc_R_Rmw_PodWRRlP_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_po_loc_R_Rmw_PodWRRlP_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 91
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_R_addr_XLr_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_R_addr_XLr_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 92
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fri_W_po_XLr_Fri_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'R_fri_W_po_XLr_Fri_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
synth ppo by litmus test 93
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_addr_R_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_addr_R_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 94
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_po_loc_XLr_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_R_po_loc_XLr_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 95
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; , 0:x5=1; 0:x10=2; ]}
now_herd_logs_ppo_remove {'R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]
[0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; , 0:x5=1; 0:x10=2; ]
['R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
              P0              |         P1           ;
<0x00> lw x5, 0(x6)           | <0x00> ori x5, x0, 2 ;
<0x04> ori x9, x0, 1          | <0x04> sw x5, 0(x6)  ;
<0x08> amoswap.w x8, x9, (x7) | <0x08> fence rw, rw  ;
<0x0C> lw x10, 0(x7)          | <0x0C> ori x7, x0, 1 ;
                              | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x10==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x5=0; 0:x10=1;  => 2
0:x5=0; 0:x10=2;  => 1
0:x5=1; 0:x10=1;  => 1
Time R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe  0.2825s
#Executions: 96

validate litmus by cur_mm
{0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
              P0              |         P1           ;
<0x00> lw x5, 0(x6)           | <0x00> ori x5, x0, 2 ;
<0x04> ori x9, x0, 1          | <0x04> sw x5, 0(x6)  ;
<0x08> amoswap.w x8, x9, (x7) | <0x08> fence rw, rw  ;
<0x0C> lw x10, 0(x7)          | <0x0C> ori x7, x0, 1 ;
                              | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x10==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x10=1;  => 2
0:x5=0; 0:x10=2;  => 1
0:x5=1; 0:x10=1;  => 2
0:x5=1; 0:x10=2;  => 1
Time R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe  0.2253s
#Executions: 96

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x5=1; 0:x10=2;  [P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), []
this path is False
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
candidate_add_ppo R;po;AMO;rmw;AMO
all_rels
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.R(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.rmw(e2,e3) and ra.AMO(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [R];po;[AMO];rmw;[AMO] target_ppo [R];po;[AMO];rmw;[AMO]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['po']
check all rels
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [R];po;[AMO];rmw;[AMO] target_ppo [R];po;[AMO];rmw;[AMO]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')]
{<0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	: True}
filter_cycle [[P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	]]
ppo [R];po;[AMO];rmw;[AMO]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];po;[AMO];rmw;[AMO]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[AMO]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Rmw Coe Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
candidate_add_ppo R;po;AMO;po;AMO
all_rels
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.R(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.AMO(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [R];po;[AMO];rmw;[AMO] target_ppo [R];po;[AMO];po;[AMO]
need_check_ppo [R];po;[AMO];po;[AMO] target_ppo [R];po;[AMO];po;[AMO]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['po']
check all rels
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [R];po;[AMO];rmw;[AMO] target_ppo [R];po;[AMO];po;[AMO]
need_check_ppo [R];po;[AMO];po;[AMO] target_ppo [R];po;[AMO];po;[AMO]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')]
{<0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	: True}
filter_cycle [[P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	]]
ppo [R];po;[AMO];po;[AMO]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];po;[AMO];po;[AMO]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[AMO]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Rmw Coe Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
candidate_add_ppo R;po;AMO;po-loc;AMO
all_rels
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.R(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po_loc(e2,e3) and ra.AMO(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [R];po;[AMO];rmw;[AMO] target_ppo [R];po;[AMO];po-loc;[AMO]
need_check_ppo [R];po;[AMO];po;[AMO] target_ppo [R];po;[AMO];po-loc;[AMO]
need_check_ppo [R];po;[AMO];po-loc;[AMO] target_ppo [R];po;[AMO];po-loc;[AMO]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['po']
check all rels
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [R];po;[AMO];rmw;[AMO] target_ppo [R];po;[AMO];po-loc;[AMO]
need_check_ppo [R];po;[AMO];po;[AMO] target_ppo [R];po;[AMO];po-loc;[AMO]
need_check_ppo [R];po;[AMO];po-loc;[AMO] target_ppo [R];po;[AMO];po-loc;[AMO]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')]
{<0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	: True}
filter_cycle [[P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	]]
ppo [R];po;[AMO];po-loc;[AMO]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];po;[AMO];po-loc;[AMO]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[AMO]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Rmw Coe Fence.rw.rwdWW Rfe
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
candidate_add_ppo R;po;AMO;fri;AMO
all_rels
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.R(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.fri(e2,e3) and ra.AMO(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [R];po;[AMO];rmw;[AMO] target_ppo [R];po;[AMO];fri;[AMO]
need_check_ppo [R];po;[AMO];po;[AMO] target_ppo [R];po;[AMO];fri;[AMO]
need_check_ppo [R];po;[AMO];po-loc;[AMO] target_ppo [R];po;[AMO];fri;[AMO]
need_check_ppo [R];po;[AMO];fri;[AMO] target_ppo [R];po;[AMO];fri;[AMO]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['po']
check all rels
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [R];po;[AMO];rmw;[AMO] target_ppo [R];po;[AMO];fri;[AMO]
need_check_ppo [R];po;[AMO];po;[AMO] target_ppo [R];po;[AMO];fri;[AMO]
need_check_ppo [R];po;[AMO];po-loc;[AMO] target_ppo [R];po;[AMO];fri;[AMO]
need_check_ppo [R];po;[AMO];fri;[AMO] target_ppo [R];po;[AMO];fri;[AMO]
insert_path [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]
{<0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	: True}
filter_cycle [[P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	]]
ppo [R];po;[AMO];fri;[AMO]
e1 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [R];po;[AMO];fri;[AMO]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [R];po;[AMO]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRR Rmw Coe Fence.rw.rwdWW Rfe
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
now check the paths P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')]
[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo R;po;AMO;rmw;AMO;po;R
all_rels
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.R(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.rmw(e2,e3) and ra.AMO(e3) and ra.po(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [R];po;[AMO];rmw;[AMO];po;[R] target_ppo [R];po;[AMO];rmw;[AMO];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
check all rels
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo R;po;AMO;rmw;AMO;po-loc;R
all_rels
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.R(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.rmw(e2,e3) and ra.AMO(e3) and ra.po_loc(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [R];po;[AMO];rmw;[AMO];po;[R] target_ppo [R];po;[AMO];rmw;[AMO];po-loc;[R]
need_check_ppo [R];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [R];po;[AMO];rmw;[AMO];po-loc;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
check all rels
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo R;po;AMO;po;AMO;po;R
all_rels
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.R(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.AMO(e3) and ra.po(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [R];po;[AMO];rmw;[AMO];po;[R] target_ppo [R];po;[AMO];po;[AMO];po;[R]
need_check_ppo [R];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [R];po;[AMO];po;[AMO];po;[R]
need_check_ppo [R];po;[AMO];po;[AMO];po;[R] target_ppo [R];po;[AMO];po;[AMO];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
check all rels
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo R;po;AMO;po;AMO;po-loc;R
all_rels
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.R(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.AMO(e3) and ra.po_loc(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [R];po;[AMO];rmw;[AMO];po;[R] target_ppo [R];po;[AMO];po;[AMO];po-loc;[R]
need_check_ppo [R];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [R];po;[AMO];po;[AMO];po-loc;[R]
need_check_ppo [R];po;[AMO];po;[AMO];po;[R] target_ppo [R];po;[AMO];po;[AMO];po-loc;[R]
need_check_ppo [R];po;[AMO];po;[AMO];po-loc;[R] target_ppo [R];po;[AMO];po;[AMO];po-loc;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
check all rels
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo R;po;AMO;po-loc;AMO;po;R
all_rels
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.R(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po_loc(e2,e3) and ra.AMO(e3) and ra.po(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [R];po;[AMO];rmw;[AMO];po;[R] target_ppo [R];po;[AMO];po-loc;[AMO];po;[R]
need_check_ppo [R];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [R];po;[AMO];po-loc;[AMO];po;[R]
need_check_ppo [R];po;[AMO];po;[AMO];po;[R] target_ppo [R];po;[AMO];po-loc;[AMO];po;[R]
need_check_ppo [R];po;[AMO];po;[AMO];po-loc;[R] target_ppo [R];po;[AMO];po-loc;[AMO];po;[R]
need_check_ppo [R];po;[AMO];po-loc;[AMO];po;[R] target_ppo [R];po;[AMO];po-loc;[AMO];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
check all rels
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo R;po;AMO;po-loc;AMO;po-loc;R
all_rels
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.R(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po_loc(e2,e3) and ra.AMO(e3) and ra.po_loc(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [R];po;[AMO];rmw;[AMO];po;[R] target_ppo [R];po;[AMO];po-loc;[AMO];po-loc;[R]
need_check_ppo [R];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [R];po;[AMO];po-loc;[AMO];po-loc;[R]
need_check_ppo [R];po;[AMO];po;[AMO];po;[R] target_ppo [R];po;[AMO];po-loc;[AMO];po-loc;[R]
need_check_ppo [R];po;[AMO];po;[AMO];po-loc;[R] target_ppo [R];po;[AMO];po-loc;[AMO];po-loc;[R]
need_check_ppo [R];po;[AMO];po-loc;[AMO];po;[R] target_ppo [R];po;[AMO];po-loc;[AMO];po-loc;[R]
need_check_ppo [R];po;[AMO];po-loc;[AMO];po-loc;[R] target_ppo [R];po;[AMO];po-loc;[AMO];po-loc;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
check all rels
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo R;po;AMO;fri;AMO;po;R
all_rels
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.R(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.fri(e2,e3) and ra.AMO(e3) and ra.po(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [R];po;[AMO];rmw;[AMO];po;[R] target_ppo [R];po;[AMO];fri;[AMO];po;[R]
need_check_ppo [R];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [R];po;[AMO];fri;[AMO];po;[R]
need_check_ppo [R];po;[AMO];po;[AMO];po;[R] target_ppo [R];po;[AMO];fri;[AMO];po;[R]
need_check_ppo [R];po;[AMO];po;[AMO];po-loc;[R] target_ppo [R];po;[AMO];fri;[AMO];po;[R]
need_check_ppo [R];po;[AMO];po-loc;[AMO];po;[R] target_ppo [R];po;[AMO];fri;[AMO];po;[R]
need_check_ppo [R];po;[AMO];po-loc;[AMO];po-loc;[R] target_ppo [R];po;[AMO];fri;[AMO];po;[R]
need_check_ppo [R];po;[AMO];fri;[AMO];po;[R] target_ppo [R];po;[AMO];fri;[AMO];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
check all rels
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo R;po;AMO;fri;AMO;po-loc;R
all_rels
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.R(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.fri(e2,e3) and ra.AMO(e3) and ra.po_loc(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [R];po;[AMO];rmw;[AMO];po;[R] target_ppo [R];po;[AMO];fri;[AMO];po-loc;[R]
need_check_ppo [R];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [R];po;[AMO];fri;[AMO];po-loc;[R]
need_check_ppo [R];po;[AMO];po;[AMO];po;[R] target_ppo [R];po;[AMO];fri;[AMO];po-loc;[R]
need_check_ppo [R];po;[AMO];po;[AMO];po-loc;[R] target_ppo [R];po;[AMO];fri;[AMO];po-loc;[R]
need_check_ppo [R];po;[AMO];po-loc;[AMO];po;[R] target_ppo [R];po;[AMO];fri;[AMO];po-loc;[R]
need_check_ppo [R];po;[AMO];po-loc;[AMO];po-loc;[R] target_ppo [R];po;[AMO];fri;[AMO];po-loc;[R]
need_check_ppo [R];po;[AMO];fri;[AMO];po;[R] target_ppo [R];po;[AMO];fri;[AMO];po-loc;[R]
need_check_ppo [R];po;[AMO];fri;[AMO];po-loc;[R] target_ppo [R];po;[AMO];fri;[AMO];po-loc;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
check all rels
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
from this path get ppo
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False
candidate_add_ppo R;po;R
all_rels
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po', 'po_loc']
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False False ['po']
add rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
get_all_paths_from_e1_to_e2 [[(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')]]
need_check_ppo [AMO];rmw;[AMO];po;[R] target_ppo [R];po;[R]
need_check_ppo [AMO];rmw;[AMO];po-loc;[R] target_ppo [R];po;[R]
need_check_ppo [AMO];po;[AMO];po;[R] target_ppo [R];po;[R]
need_check_ppo [AMO];po;[AMO];po-loc;[R] target_ppo [R];po;[R]
need_check_ppo [AMO];po-loc;[AMO];po;[R] target_ppo [R];po;[R]
need_check_ppo [AMO];po-loc;[AMO];po-loc;[R] target_ppo [R];po;[R]
need_check_ppo [AMO];fri;[AMO];po;[R] target_ppo [R];po;[R]
need_check_ppo [AMO];fri;[AMO];po-loc;[R] target_ppo [R];po;[R]
exit get_path_from_e1_to_e2_by_ppo
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), []
this path is False
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 []
exit get_path_from_e1_to_e2_by_ppo
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	(R), P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [R];po;[AMO];rmw;[AMO];po;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[AMO];po;[AMO];po;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[AMO];po;[AMO];po-loc;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[AMO];po-loc;[AMO];po;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[AMO];po-loc;[AMO];po-loc;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[AMO];fri;[AMO];po;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[AMO];fri;[AMO];po-loc;[R] target_ppo [R];po;[R]
need_check_ppo [R];po;[R] target_ppo [R];po;[R]
add_rels_final
add rel final P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
check all rels
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	 False False ['po']
stengthen state, 0:x5=1; 0:x10=2;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586be4b7da0> [P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x08>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P0: <0x0C>	lw x10_p0_1, 0(x7_p0_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lw x5_p0_1, 0(x6_p0_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586befb72c0>, <src.slide.synth.constraint.Constraint object at 0x7586be409040>, <src.slide.synth.constraint.Constraint object at 0x7586beb84860>] False
{0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
              P0              |         P1           ;
<0x00> lw x5, 0(x6)           | <0x00> ori x5, x0, 2 ;
<0x04> ori x9, x0, 1          | <0x04> sw x5, 0(x6)  ;
<0x08> amoswap.w x8, x9, (x7) | <0x08> fence rw, rw  ;
<0x0C> lw x10, 0(x7)          | <0x0C> ori x7, x0, 1 ;
                              | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x10==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x10=1;  => 2
0:x5=0; 0:x10=2;  => 1
0:x5=1; 0:x10=1;  => 2
0:x5=1; 0:x10=2;  => 1
Time R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe  0.1763s
#Executions: 48

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_rw;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_rw;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 R;fence_w_r;W 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_r_r;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 W;fence_r_r;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_rw_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 W;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;W 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 W;fence_r_r;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_rw_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func59 R;po;XLr 
def ppo_candidate_func59(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.XLr(e2)
 PPOInitFlag.Verified
ppo_candidate_func60 RL;po;R 
def ppo_candidate_func60(ra, e1: Event, e2: Event) -> bool:
    return ra.RL(e1) and ra.po(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func61 AMO;po\(po-loc);R 
def ppo_candidate_func61(ra, e1: Event, e2: Event) -> bool:
    return ra.AMO(e1) and ra.po(e1,e2) and not (ra.po_loc(e1,e2)) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func62 XLr;po;R 
def ppo_candidate_func62(ra, e1: Event, e2: Event) -> bool:
    return ra.XLr(e1) and ra.po(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func63 AMO;po;W 
def ppo_candidate_func63(ra, e1: Event, e2: Event) -> bool:
    return ra.AMO(e1) and ra.po(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 3
candidate_ppos size: 0
candidate_ppos size: 4
candidate_ppos size: 0
candidate_ppo: [R];po;[AMO], relax is False
ID: 0 cur candidate_ppo: [R];po;[AMO],relax is False
[R];po;[AMO]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[]
ppo [R];po;[AMO] contain_flag False can_relax_flag False
add ppo [R];po;[AMO] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]', '[R];po;[XLr]', '[RL];po;[R]', '[AMO];po\\(po-loc);[R]', '[XLr];po;[R]', '[AMO];po;[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]', '[R];po;[XLr]', '[RL];po;[R]', '[AMO];po\\(po-loc);[R]', '[XLr];po;[R]', '[AMO];po;[W]', '[R];po;[AMO]']
ppo [R];po;[AMO] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe.litmus PodRR Rmw Coe Fence.rw.rwdWW Rfe
[R];po;[AMO]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
ppo [R];po;[AMO]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; , 0:x5=1; 0:x10=2; ]}
R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; , 0:x5=1; 0:x10=2; ]
[0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]
['R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe']
check ppo [R];po;[AMO]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
check ppo [R];po;[AMO] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [R];po;[AMO]
start check
check counter ppo
ppo:[R];po;[AMO] => counter_ppo:
-----------------
ID0:candidate_ppo [R];po;[AMO]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
candidate_ppo: [R];po;[AMO], cur_failed_litmus_tests: [], passed? True

[R];po;[AMO] pass test
==== candidate ppo ====
[R];po;[AMO] [R];po;[AMO] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 96
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_AMO_po_R_PosRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_AMO_po_R_PosRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 97
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_XLr_ctrl_R_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_XLr_ctrl_R_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
synth ppo by litmus test 98
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 99
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_W_po_R_PosRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_W_po_R_PosRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
synth ppo by litmus test 100
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_Rmw_PodWWRlP_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_W_Rmw_PodWWRlP_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 101
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_rsw_R_Rmw_PodWRRlP_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_rsw_R_Rmw_PodWRRlP_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 102
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_R_po_R_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_R_po_R_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 103
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_po_XLr_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_R_po_XLr_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 104
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_XLr_po_loc_R_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_XLr_po_loc_R_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 105
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_po_loc_R_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_po_loc_R_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 106
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_AMO_po_R_DpCtrldR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_AMO_po_R_DpCtrldR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 107
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_addr_R_Rmw_PodWRRlP_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_addr_R_Rmw_PodWRRlP_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 108
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_rsw_R_po_XLr_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'R_rsw_R_po_XLr_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
synth ppo by litmus test 109
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_coi_W_po_R_Rmw_CoiRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_coi_W_po_R_Rmw_CoiRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 110
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_R_ctrl_R_Rmw_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=0; , 0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_R_ctrl_R_Rmw_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=0; , 0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
synth ppo by litmus test 111
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_XLr_po_R_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_XLr_po_R_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 112
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_R_po_R_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_R_po_R_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
synth ppo by litmus test 113
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_addr_R_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_addr_R_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 114
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 115
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_rsw_R_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_rsw_R_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 116
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_R_po_R_Rmw_Rfi_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=0; , 0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_R_po_R_Rmw_Rfi_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=0; , 0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
synth ppo by litmus test 117
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_XLr_addr_R_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_XLr_addr_R_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 118
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_po_R_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_po_R_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 119
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_R_ctrl_R_Rmw_RfiRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=0; , 0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_R_ctrl_R_Rmw_RfiRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=0; , 0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
synth ppo by litmus test 120
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_R_ctrl_XLr_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_R_ctrl_XLr_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 121
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_W_po_XLr_PosRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_W_po_XLr_PosRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
synth ppo by litmus test 122
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_XLr_po_R_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_XLr_po_R_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
synth ppo by litmus test 123
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_W_po_R_Rmw_PosWW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_W_po_R_Rmw_PosWW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 124
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_AQ_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 125
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_R_ctrl_R_Rmw_PosWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_R_ctrl_R_Rmw_PosWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 126
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_rsw_R_ctrl_XLr_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'R_rsw_R_ctrl_XLr_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
synth ppo by litmus test 127
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_R_po_XLr_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_R_po_XLr_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 128
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_fri_W_po_R_Fri_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_fri_W_po_R_Fri_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
synth ppo by litmus test 129
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 130
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 131
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_R_po_loc_R_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_R_po_loc_R_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 132
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_R_po_R_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_R_po_R_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 133
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_addr_XLr_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_R_addr_XLr_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 134
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_XLr_ctrl_R_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_XLr_ctrl_R_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 135
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_po_loc_R_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_po_loc_R_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 136
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_R_ctrl_R_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_R_ctrl_R_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 137
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_po_R_PodRRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_AQ_po_R_PodRRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 138
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_XLr_po_R_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_XLr_po_R_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 139
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_R_po_R_Rmw_PosWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_R_po_R_Rmw_PosWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 140
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_R_po_XLr_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_R_po_XLr_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
synth ppo by litmus test 141
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_rsw_R_Rmw_PodWR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_rsw_R_Rmw_PodWR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 142
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_R_ctrl_R_Rmw_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_R_ctrl_R_Rmw_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 143
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_po_R_Rmw_PodWWRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_W_po_R_Rmw_PodWWRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 144
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_ctrl_R_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_ctrl_R_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 145
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_coi_W_po_R_Rmw_Coi_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_coi_W_po_R_Rmw_Coi_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 146
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_R_po_XLr_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_R_po_XLr_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 147
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
now_herd_logs_ppo_remove {'XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
['XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
          P0          |         P1           ;
<0x00> lr.w x5, 0(x6) | <0x00> ori x5, x0, 2 ;
<0x04> ori x7, x0, 1  | <0x04> sw x5, 0(x6)  ;
<0x08> sw x7, 0(x8)   | <0x08> fence rw, rw  ;
<0x0C> lw x9, 0(x8)   | <0x0C> ori x7, x0, 1 ;
                      | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
Time XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe  0.1992s
#Executions: 96

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
          P0          |         P1           ;
<0x00> lr.w x5, 0(x6) | <0x00> ori x5, x0, 2 ;
<0x04> ori x7, x0, 1  | <0x04> sw x5, 0(x6)  ;
<0x08> sw x7, 0(x8)   | <0x08> fence rw, rw  ;
<0x0C> lw x9, 0(x8)   | <0x0C> ori x7, x0, 1 ;
                      | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 1
0:x5=1; 0:x9=2;  => 1
Time XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe  0.1888s
#Executions: 96

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe.litmus
strengthen,s,exe 0:x5=1; 0:x9=2;  [P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x9_p0_1, 0(x8_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po']
this path is True
(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
now check the paths P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	
[(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
from this path get ppo
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	 False True
candidate_add_ppo XLr;po;W
all_rels
rel --: None P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.XLr(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po']
this path is True
(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]]
need_check_ppo [XLr];po;[W] target_ppo [XLr];po;[W]
add_rels_final
add rel final P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po']
check all rels
check rel --: None P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x0C>	lw x9_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	lw x9_p0_1, 0(x8_p0_0)	 False False ['po']
check rel P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	 False True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, is write event:False
P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	, is write event:True
ei,ej,relations, P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	(R), P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	(W), ['po']
this path is True
(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]]
need_check_ppo [XLr];po;[W] target_ppo [XLr];po;[W]
insert_path [(P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [XLr];po;[W]
e1 P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation rfe
path_single_ppo [XLr];po;[W]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];rfe
path_single_ppo justify [XLr];po;[W]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];rfe
diy_cycle PodRW Coe Fence.rw.rwdWW Rfe
stengthen state, 0:x5=1; 0:x9=2;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586bde3ee40> [P0: <0x08>	sw x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x00>	lr.w x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	lw x9_p0_1, 0(x8_p0_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586be931280>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
          P0          |         P1           ;
<0x00> lr.w x5, 0(x6) | <0x00> ori x5, x0, 2 ;
<0x04> ori x7, x0, 1  | <0x04> sw x5, 0(x6)  ;
<0x08> sw x7, 0(x8)   | <0x08> fence rw, rw  ;
<0x0C> lw x9, 0(x8)   | <0x0C> ori x7, x0, 1 ;
                      | <0x10> sw x7, 0(x8)  ;

QType.Exists (0:x9==2/\0:x5==1)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x5=0; 0:x9=1;  => 2
0:x5=0; 0:x9=2;  => 1
0:x5=1; 0:x9=1;  => 2
0:x5=1; 0:x9=2;  => 1
Time XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe  0.1136s
#Executions: 48

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_rw;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_rw;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 R;fence_w_r;W 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_r_r;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 W;fence_r_r;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_rw_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 W;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;W 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 W;fence_r_r;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_rw_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func59 R;po;XLr 
def ppo_candidate_func59(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.XLr(e2)
 PPOInitFlag.Verified
ppo_candidate_func60 RL;po;R 
def ppo_candidate_func60(ra, e1: Event, e2: Event) -> bool:
    return ra.RL(e1) and ra.po(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func61 AMO;po\(po-loc);R 
def ppo_candidate_func61(ra, e1: Event, e2: Event) -> bool:
    return ra.AMO(e1) and ra.po(e1,e2) and not (ra.po_loc(e1,e2)) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func62 XLr;po;R 
def ppo_candidate_func62(ra, e1: Event, e2: Event) -> bool:
    return ra.XLr(e1) and ra.po(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func63 AMO;po;W 
def ppo_candidate_func63(ra, e1: Event, e2: Event) -> bool:
    return ra.AMO(e1) and ra.po(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func64 R;po;AMO 
def ppo_candidate_func64(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.AMO(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 1
candidate_ppo: [XLr];po;[W], relax is False
ID: 0 cur candidate_ppo: [XLr];po;[W],relax is False
[XLr];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[]
ppo [XLr];po;[W] contain_flag False can_relax_flag False
add ppo [XLr];po;[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]', '[R];po;[XLr]', '[RL];po;[R]', '[AMO];po\\(po-loc);[R]', '[XLr];po;[R]', '[AMO];po;[W]', '[R];po;[AMO]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]', '[R];po;[XLr]', '[RL];po;[R]', '[AMO];po\\(po-loc);[R]', '[XLr];po;[R]', '[AMO];po;[W]', '[R];po;[AMO]', '[XLr];po;[W]']
ppo [XLr];po;[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe.litmus PodRW Coe Fence.rw.rwdWW Rfe
[XLr];po;[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
ppo [XLr];po;[W]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]}
XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; , 0:x5=1; 0:x9=2; ]
[0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]
['XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe']
check ppo [XLr];po;[W]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
check ppo [XLr];po;[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [XLr];po;[W]
start check
check counter ppo
ppo:[XLr];po;[W] => counter_ppo:
-----------------
ID0:candidate_ppo [XLr];po;[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
candidate_ppo: [XLr];po;[W], cur_failed_litmus_tests: [], passed? True

[XLr];po;[W] pass test
==== candidate ppo ====
[XLr];po;[W] [XLr];po;[W] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe.litmus
synth ppo by litmus test 148
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_XLr_ctrl_R_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_XLr_ctrl_R_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 149
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_po_XLr_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_W_po_XLr_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 150
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_R_po_R_Rmw_PosWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_R_po_R_Rmw_PosWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 151
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_R_addr_R_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_R_addr_R_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 152
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_po_R_PodRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_po_R_PodRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 153
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_ctrl_R_Rmw_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_ctrl_R_Rmw_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 154
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 155
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_W_po_R_DpCtrldW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_W_po_R_DpCtrldW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 156
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_R_po_loc_XLr_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_R_po_loc_XLr_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 157
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_R_ctrl_R_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_R_ctrl_R_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 158
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_R_po_R_Rmw_RfiRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=0; , 0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_R_po_R_Rmw_RfiRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=0; , 0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
synth ppo by litmus test 159
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_ctrl_R_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_ctrl_R_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 160
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_R_rsw_R_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_R_rsw_R_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 161
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_po_R_Rmw_PodWW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_po_R_Rmw_PodWW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 162
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_po_loc_R_Rmw_PodWR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_po_loc_R_Rmw_PodWR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 163
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_R_po_W_Rmw_Rfi_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x11=1; , 0:x6=0; 0:x8=1; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=2; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_R_po_W_Rmw_Rfi_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x11=1; , 0:x6=0; 0:x8=1; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=2; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
[]
synth ppo by litmus test 164
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_po_W_PodRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_po_W_PodRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 165
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_po_loc_R_PodRR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_po_loc_R_PodRR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 166
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_po_loc_XLr_PodRW_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; , 0:x5=1; 0:x9=2; 0:x10=2; ]}
now_herd_logs_ppo_remove {'R_po_W_po_loc_XLr_PodRW_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; , 0:x5=1; 0:x9=2; 0:x10=2; ]}
[]
synth ppo by litmus test 167
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_ctrl_W_Rmw_PodWR_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_ctrl_W_Rmw_PodWR_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 168
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_po_loc_W_PodRR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_po_loc_W_PodRR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 169
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_W_po_loc_XLr_DpCtrldW_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_W_po_loc_XLr_DpCtrldW_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 170
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_ctrl_W_PodRR_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_ctrl_W_PodRR_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 171
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_po_loc_W_Rmw_PodWWRlP_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=2; , 0:x6=0; 0:x11=3; , 0:x6=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'RL_po_W_po_loc_W_Rmw_PodWWRlP_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=2; , 0:x6=0; 0:x11=3; , 0:x6=1; 0:x11=2; ]}
[]
synth ppo by litmus test 172
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_addr_W_Rmw_PodWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_addr_W_Rmw_PodWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
synth ppo by litmus test 173
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_R_po_AMO_PosRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_R_po_AMO_PosRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 174
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_data_W_Rmw_PodWRRlP_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_data_W_Rmw_PodWRRlP_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 175
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_rfi_XLr_PodRW_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; , 0:x5=1; 0:x9=2; 0:x10=2; ]}
now_herd_logs_ppo_remove {'R_po_W_rfi_XLr_PodRW_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; , 0:x5=1; 0:x9=2; 0:x10=2; ]}
[]
synth ppo by litmus test 176
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_W_po_W_Rmw_PosWW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_W_po_W_Rmw_PosWW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 177
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_W_po_W_PosRW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_W_po_W_PosRW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 178
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_ctrl_W_PodRR_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_ctrl_W_PodRR_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 179
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_coi_W_Rmw_PodWWRlP_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=2; , 0:x6=0; 0:x11=3; , 0:x6=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'RL_po_W_coi_W_Rmw_PodWWRlP_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=2; , 0:x6=0; 0:x11=3; , 0:x6=1; 0:x11=2; ]}
[]
synth ppo by litmus test 180
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_po_loc_R_PodRRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_AQ_po_loc_R_PodRRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 181
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_po_AQ_PodRW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_W_po_AQ_PodRW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 182
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_ctrl_AQ_PodRR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_R_ctrl_AQ_PodRR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 183
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_po_AQ_PodRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_R_po_AQ_PodRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 184
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_po_AMO_PodRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_R_po_AMO_PodRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 185
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_data_W_PodRR_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_data_W_PodRR_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 186
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_R_po_W_PosRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_R_po_W_PosRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 187
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_po_loc_W_PodRRPAq_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'R_po_AQ_po_loc_W_PodRRPAq_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
synth ppo by litmus test 188
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_po_loc_AMO_PodRW_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'R_po_W_po_loc_AMO_PodRW_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
synth ppo by litmus test 189
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_W_po_AQ_PosRW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_W_po_AQ_PosRW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 190
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_R_po_W_Rmw_PosWR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_R_po_W_Rmw_PosWR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 191
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_W_po_AMO_PosRW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_W_po_AMO_PosRW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 192
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_rfi_AMO_PodRW_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=2; , 0:x5=0; 0:x9=1; 0:x11=3; , 0:x5=0; 0:x9=3; 0:x11=2; , 0:x5=1; 0:x9=1; 0:x11=2; , 0:x5=1; 0:x9=3; 0:x11=2; ]}
now_herd_logs_ppo_remove {'R_po_W_rfi_AMO_PodRW_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=2; , 0:x5=0; 0:x9=1; 0:x11=3; , 0:x5=0; 0:x9=3; 0:x11=2; , 0:x5=1; 0:x9=1; 0:x11=2; , 0:x5=1; 0:x9=3; 0:x11=2; ]}
[]
synth ppo by litmus test 193
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_po_W_PodRW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_po_W_PodRW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 194
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_po_W_Rmw_PodWW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_po_W_Rmw_PodWW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 195
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_po_loc_W_PodRR_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'R_po_AMO_po_loc_W_PodRR_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
synth ppo by litmus test 196
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_po_loc_W_Rmw_PodWR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_po_loc_W_Rmw_PodWR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 197
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_fri_W_po_W_Fri_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_fri_W_po_W_Fri_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 198
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_addr_W_PodRR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_addr_W_PodRR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
synth ppo by litmus test 199
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_rfi_R_Rmw_PodWW_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_rfi_R_Rmw_PodWW_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 200
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_coi_W_PodRRPAq_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'R_po_AQ_coi_W_PodRRPAq_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
synth ppo by litmus test 201
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_W_po_loc_R_DpCtrldW_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_W_po_loc_R_DpCtrldW_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 202
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_po_loc_W_Rmw_PodWRRlP_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_po_loc_W_Rmw_PodWRRlP_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 203
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_fri_W_Rmw_PodWRRlP_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; 0:x11=1; , 0:x6=0; 0:x8=0; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_fri_W_Rmw_PodWRRlP_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; 0:x11=1; , 0:x6=0; 0:x8=0; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
[]
synth ppo by litmus test 204
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_R_po_AQ_PosRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_R_po_AQ_PosRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 205
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_po_W_PodRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_po_W_PodRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 206
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_fri_W_PodRR_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; 0:x10=1; , 0:x5=0; 0:x7=0; 0:x10=2; , 0:x5=0; 0:x7=2; 0:x10=1; , 0:x5=1; 0:x7=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_fri_W_PodRR_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; 0:x10=1; , 0:x5=0; 0:x7=0; 0:x10=2; , 0:x5=0; 0:x7=2; 0:x10=1; , 0:x5=1; 0:x7=2; 0:x10=1; ]}
[]
synth ppo by litmus test 207
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_rsw_R_po_AMO_PosRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_rsw_R_po_AMO_PosRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 208
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_po_loc_AMO_PodRR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_R_po_loc_AMO_PodRR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 209
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_data_W_Rmw_PodWR_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_data_W_Rmw_PodWR_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 210
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_coi_W_po_W_Rmw_Coi_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_coi_W_po_W_Rmw_Coi_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 211
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_rsw_R_po_AQ_PosRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_rsw_R_po_AQ_PosRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 212
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_R_po_W_Rmw_RfiRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x11=1; , 0:x6=0; 0:x8=1; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=2; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_R_po_W_Rmw_RfiRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x11=1; , 0:x6=0; 0:x8=1; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=2; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
[]
synth ppo by litmus test 213
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_po_loc_AQ_PodRR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_R_po_loc_AQ_PodRR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 214
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_W_po_W_Rmw_PosWWRlP_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_W_po_W_Rmw_PosWWRlP_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 215
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_po_loc_R_Rmw_PodWW_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_po_loc_R_Rmw_PodWW_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 216
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_W_DpDatadW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_W_DpDatadW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 217
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_ctrl_AMO_PodRR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_R_ctrl_AMO_PodRR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 218
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_XLr_po_W_PosRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_XLr_po_W_PosRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 219
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_po_loc_W_PodRW_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=2; , 0:x5=0; 0:x10=3; , 0:x5=1; 0:x10=2; ]}
now_herd_logs_ppo_remove {'XLr_po_W_po_loc_W_PodRW_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=2; , 0:x5=0; 0:x10=3; , 0:x5=1; 0:x10=2; ]}
[]
synth ppo by litmus test 220
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_addr_W_Rmw_PodWRRlP_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_addr_W_Rmw_PodWRRlP_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
synth ppo by litmus test 221
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_W_rfi_XLr_DpCtrldW_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=0; , 0:x5=0; 0:x9=1; 0:x11=1; , 0:x5=1; 0:x9=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_W_rfi_XLr_DpCtrldW_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=0; , 0:x5=0; 0:x9=1; 0:x11=1; , 0:x5=1; 0:x9=1; 0:x11=1; ]}
[]
synth ppo by litmus test 222
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_po_loc_W_Rmw_PodWW_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=2; , 0:x6=0; 0:x11=3; , 0:x6=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'AMO_po_W_po_loc_W_Rmw_PodWW_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=2; , 0:x6=0; 0:x11=3; , 0:x6=1; 0:x11=2; ]}
[]
synth ppo by litmus test 223
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_po_W_PodRRPAq_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_AQ_po_W_PodRRPAq_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 224
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 225
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_rfi_R_Rmw_PodWWRlP_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_W_rfi_R_Rmw_PodWWRlP_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 226
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fri_W_po_AQ_Fri_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_fri_W_po_AQ_Fri_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 227
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_po_W_Rmw_PodWWRlP_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_W_po_W_Rmw_PodWWRlP_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 228
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_po_AMO_PodRW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_W_po_AMO_PodRW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 229
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_ctrl_W_Rmw_PodWRRlP_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_ctrl_W_Rmw_PodWRRlP_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 230
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_rfi_R_PodRW_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_rfi_R_PodRW_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; ]}
[]
synth ppo by litmus test 231
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_coi_W_PodRW_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=2; , 0:x5=0; 0:x10=3; , 0:x5=1; 0:x10=2; ]}
now_herd_logs_ppo_remove {'XLr_po_W_coi_W_PodRW_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=2; , 0:x5=0; 0:x10=3; , 0:x5=1; 0:x10=2; ]}
[]
synth ppo by litmus test 232
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_AMO_po_W_PosRR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_AMO_po_W_PosRR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 233
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_coi_W_po_W_Rmw_CoiRlP_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_coi_W_po_W_Rmw_CoiRlP_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 234
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_rfi_AQ_PodRW_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=2; , 0:x5=0; 0:x9=1; 0:x11=3; , 0:x5=0; 0:x9=3; 0:x11=2; , 0:x5=1; 0:x9=1; 0:x11=2; , 0:x5=1; 0:x9=3; 0:x11=2; ]}
now_herd_logs_ppo_remove {'R_po_W_rfi_AQ_PodRW_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=2; , 0:x5=0; 0:x9=1; 0:x11=3; , 0:x5=0; 0:x9=3; 0:x11=2; , 0:x5=1; 0:x9=1; 0:x11=2; , 0:x5=1; 0:x9=3; 0:x11=2; ]}
[]
synth ppo by litmus test 235
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fri_W_po_AMO_Fri_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_fri_W_po_AMO_Fri_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 236
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_po_loc_R_PodRW_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_po_loc_R_PodRW_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; ]}
[]
synth ppo by litmus test 237
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_data_W_PodRR_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_data_W_PodRR_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 238
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_W_rfi_R_DpCtrldW_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=0; , 0:x5=0; 0:x9=1; 0:x11=1; , 0:x5=1; 0:x9=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_W_rfi_R_DpCtrldW_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=0; , 0:x5=0; 0:x9=1; 0:x11=1; , 0:x5=1; 0:x9=1; 0:x11=1; ]}
[]
synth ppo by litmus test 239
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_fri_W_PodRR_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; 0:x10=1; , 0:x5=0; 0:x7=0; 0:x10=2; , 0:x5=0; 0:x7=2; 0:x10=1; , 0:x5=1; 0:x7=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_fri_W_PodRR_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; 0:x10=1; , 0:x5=0; 0:x7=0; 0:x10=2; , 0:x5=0; 0:x7=2; 0:x10=1; , 0:x5=1; 0:x7=2; 0:x10=1; ]}
[]
synth ppo by litmus test 240
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_addr_W_PodRR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_addr_W_PodRR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
synth ppo by litmus test 241
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_po_W_Rmw_PodWR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_po_W_Rmw_PodWR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 242
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_rfi_R_PodRR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_rfi_R_PodRR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 243
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_R_po_W_Rmw_PosWRRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_R_po_W_Rmw_PosWRRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 244
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_po_W_PodRR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_po_W_PodRR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 245
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_po_loc_AQ_PodRW_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'R_po_W_po_loc_AQ_PodRW_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
synth ppo by litmus test 246
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_po_loc_W_PodRR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_po_loc_W_PodRR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 247
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_coi_W_PodRR_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'R_po_AMO_coi_W_PodRR_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
synth ppo by litmus test 248
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 249
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_coi_W_Rmw_PodWW_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=2; , 0:x6=0; 0:x11=3; , 0:x6=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'AMO_po_W_coi_W_Rmw_PodWW_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=2; , 0:x6=0; 0:x11=3; , 0:x6=1; 0:x11=2; ]}
[]
synth ppo by litmus test 250
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_po_W_Rmw_PodWRRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_po_W_Rmw_PodWRRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 251
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_fri_W_Rmw_PodWR_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; 0:x11=1; , 0:x6=0; 0:x8=0; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_fri_W_Rmw_PodWR_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; 0:x11=1; , 0:x6=0; 0:x8=0; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
[]
synth ppo by litmus test 252
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_po_loc_R_Rmw_PodWWRlP_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_W_po_loc_R_Rmw_PodWWRlP_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 253
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_rfi_R_PodRRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_AQ_rfi_R_PodRRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 254
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fri_W_po_loc_XLr_Fri_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'R_fri_W_po_loc_XLr_Fri_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
synth ppo by litmus test 255
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_W_rfi_R_PosRW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_W_rfi_R_PosRW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
[]
synth ppo by litmus test 256
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_W_po_loc_R_Rmw_PosWW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_W_po_loc_R_Rmw_PosWW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
synth ppo by litmus test 257
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_coi_W_rfi_R_Rmw_Coi_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_coi_W_rfi_R_Rmw_Coi_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
[]
synth ppo by litmus test 258
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_fri_W_po_loc_R_Fri_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_fri_W_po_loc_R_Fri_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
synth ppo by litmus test 259
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_W_rfi_R_Rmw_PosWWRlP_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_W_rfi_R_Rmw_PosWWRlP_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
[]
synth ppo by litmus test 260
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_W_po_loc_R_Rmw_PosWWRlP_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_W_po_loc_R_Rmw_PosWWRlP_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
synth ppo by litmus test 261
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fri_W_rfi_XLr_Fri_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'R_fri_W_rfi_XLr_Fri_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
[]
synth ppo by litmus test 262
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_W_po_loc_XLr_PosRW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_W_po_loc_XLr_PosRW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
synth ppo by litmus test 263
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_coi_W_po_loc_R_Rmw_Coi_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_coi_W_po_loc_R_Rmw_Coi_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
synth ppo by litmus test 264
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_W_rfi_R_Rmw_PosWW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_W_rfi_R_Rmw_PosWW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
[]
synth ppo by litmus test 265
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_coi_W_po_loc_R_Rmw_CoiRlP_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'RL_coi_W_po_loc_R_Rmw_CoiRlP_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
synth ppo by litmus test 266
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_W_po_loc_R_PosRW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_W_po_loc_R_PosRW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
synth ppo by litmus test 267
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_fri_W_rfi_R_Fri_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_fri_W_rfi_R_Fri_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
[]
synth ppo by litmus test 268
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_W_rfi_XLr_PosRW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_W_rfi_XLr_PosRW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
[]
synth ppo by litmus test 269
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_coi_W_rfi_R_Rmw_CoiRlP_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
now_herd_logs_ppo_remove {'RL_coi_W_rfi_R_Rmw_CoiRlP_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
[]
synth ppo by litmus test 270
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
          P0          |         P1           ;
<0x00> ori x5, x0, 2  | <0x00> ori x5, x0, 1 ;
<0x04> sw x5, 0(x6)   | <0x04> sw x5, 0(x6)  ;
<0x08> lr.w x7, 0(x8) | <0x08> fence rw, rw  ;
                      | <0x0C> ori x7, x0, 1 ;
                      | <0x10> sw x7, 0(x8)  ;
                      | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x7==0/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
0:x7=0; 1:x9=1;  => 1
0:x7=1; 1:x9=1;  => 2
0:x7=1; 1:x9=2;  => 1
Time W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe  0.2313s
#Executions: 96

validate litmus by cur_mm
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
          P0          |         P1           ;
<0x00> ori x5, x0, 2  | <0x00> ori x5, x0, 1 ;
<0x04> sw x5, 0(x6)   | <0x04> sw x5, 0(x6)  ;
<0x08> lr.w x7, 0(x8) | <0x08> fence rw, rw  ;
                      | <0x0C> ori x7, x0, 1 ;
                      | <0x10> sw x7, 0(x8)  ;
                      | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x7==0/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x7=0; 1:x9=1;  => 2
0:x7=0; 1:x9=2;  => 1
0:x7=1; 1:x9=1;  => 2
0:x7=1; 1:x9=2;  => 1
Time W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe  0.1761s
#Executions: 96

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus
strengthen,s,exe 0:x7=0; 1:x9=2;  [P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, 'po')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, 'po')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	 True False
candidate_add_ppo W;po;XLr
all_rels
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.XLr(e2)

add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, 'po')]]
need_check_ppo [W];po;[XLr] target_ppo [W];po;[XLr]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	 True False ['po']
check all rels
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	 True False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	(R), ['po']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, 'po')]]
need_check_ppo [W];po;[XLr] target_ppo [W];po;[XLr]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	]]
ppo [W];po;[XLr]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	
cycle str
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation coe
path_single_ppo [W];po;[XLr]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[XLr]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWR Fre Fence.rw.rwdWW Coe
stengthen state, 0:x7=0; 1:x9=2;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586bdf09880> [P0: <0x08>	lr.w x7_p0_1, 0(x8_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586bdd24f80>] False
{0:x6=x; 0:x8=y; 1:x6=y; 1:x8=x}
          P0          |         P1           ;
<0x00> ori x5, x0, 2  | <0x00> ori x5, x0, 1 ;
<0x04> sw x5, 0(x6)   | <0x04> sw x5, 0(x6)  ;
<0x08> lr.w x7, 0(x8) | <0x08> fence rw, rw  ;
                      | <0x0C> ori x7, x0, 1 ;
                      | <0x10> sw x7, 0(x8)  ;
                      | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x7==0/\1:x9==2)

Progress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
0:x7=0; 1:x9=1;  => 2
0:x7=0; 1:x9=2;  => 1
0:x7=1; 1:x9=1;  => 2
0:x7=1; 1:x9=2;  => 1
Time W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe  0.0985s
#Executions: 32

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_rw;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_rw;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 R;fence_w_r;W 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_r_r;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 W;fence_r_r;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_rw_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 W;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;W 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 W;fence_r_r;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_rw_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func59 R;po;XLr 
def ppo_candidate_func59(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.XLr(e2)
 PPOInitFlag.Verified
ppo_candidate_func60 RL;po;R 
def ppo_candidate_func60(ra, e1: Event, e2: Event) -> bool:
    return ra.RL(e1) and ra.po(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func61 AMO;po\(po-loc);R 
def ppo_candidate_func61(ra, e1: Event, e2: Event) -> bool:
    return ra.AMO(e1) and ra.po(e1,e2) and not (ra.po_loc(e1,e2)) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func62 XLr;po;R 
def ppo_candidate_func62(ra, e1: Event, e2: Event) -> bool:
    return ra.XLr(e1) and ra.po(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func63 AMO;po;W 
def ppo_candidate_func63(ra, e1: Event, e2: Event) -> bool:
    return ra.AMO(e1) and ra.po(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func64 R;po;AMO 
def ppo_candidate_func64(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.AMO(e2)
 PPOInitFlag.Verified
ppo_candidate_func65 XLr;po;W 
def ppo_candidate_func65(ra, e1: Event, e2: Event) -> bool:
    return ra.XLr(e1) and ra.po(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 1
candidate_ppo: [W];po;[XLr], relax is False
ID: 0 cur candidate_ppo: [W];po;[XLr],relax is False
[W];po;[XLr]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[]
ppo [W];po;[XLr] contain_flag False can_relax_flag False
add ppo [W];po;[XLr] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]', '[R];po;[XLr]', '[RL];po;[R]', '[AMO];po\\(po-loc);[R]', '[XLr];po;[R]', '[AMO];po;[W]', '[R];po;[AMO]', '[XLr];po;[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]', '[R];po;[XLr]', '[RL];po;[R]', '[AMO];po\\(po-loc);[R]', '[XLr];po;[R]', '[AMO];po;[W]', '[R];po;[AMO]', '[XLr];po;[W]', '[W];po;[XLr]']
ppo [W];po;[XLr] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus PodWR Fre Fence.rw.rwdWW Coe
[W];po;[XLr]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
ppo [W];po;[XLr]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe
[0:x7=0; 1:x9=1; , 0:x7=0; 1:x9=2; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
[0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]
['W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe']
check ppo [W];po;[XLr]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
check ppo [W];po;[XLr] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];po;[XLr]
start check
check counter ppo
ppo:[W];po;[XLr] => counter_ppo:
-----------------
ID0:candidate_ppo [W];po;[XLr]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
candidate_ppo: [W];po;[XLr], cur_failed_litmus_tests: [], passed? True

[W];po;[XLr] pass test
==== candidate ppo ====
[W];po;[XLr] [W];po;[XLr] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 271
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
[]
synth ppo by litmus test 272
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
synth ppo by litmus test 273
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
[]
synth ppo by litmus test 274
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_XLr_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_XLr_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
synth ppo by litmus test 275
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.rw.rw+ctrlfence.r.r': [0:x7=0; 1:x7=0; 1:x8=0; 1:x12=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x12=0; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x12=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x12=0; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x12=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.rw.rw+ctrlfence.r.r': [0:x7=0; 1:x7=0; 1:x8=0; 1:x12=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x12=0; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x12=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x12=0; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x12=1; [y]=1; ]}
[]
synth ppo by litmus test 276
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; , 1:x9=2; 0:x10=2; ]}
now_herd_logs_ppo_remove {'W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe
[1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]
[1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; , 1:x9=2; 0:x10=2; ]
['W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
              P0              |         P1           ;
<0x00> ori x5, x0, 2          | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)           | <0x04> sw x5, 0(x6)  ;
<0x08> ori x9, x0, 1          | <0x08> fence rw, rw  ;
<0x0C> amoswap.w x8, x9, (x7) | <0x0C> ori x7, x0, 1 ;
<0x10> lw x10, 0(x7)          | <0x10> sw x7, 0(x8)  ;
                              | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x10==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  1.0sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  1.0sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  1.3sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  1.5sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  1.7sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 3
1:x9=1; 0:x10=1;  => 3
1:x9=1; 0:x10=2;  => 1
1:x9=2; 0:x10=1;  => 1
Time W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe  1.8861s
#Executions: 600

validate litmus by cur_mm
{0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
              P0              |         P1           ;
<0x00> ori x5, x0, 2          | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)           | <0x04> sw x5, 0(x6)  ;
<0x08> ori x9, x0, 1          | <0x08> fence rw, rw  ;
<0x0C> amoswap.w x8, x9, (x7) | <0x0C> ori x7, x0, 1 ;
<0x10> lw x10, 0(x7)          | <0x10> sw x7, 0(x8)  ;
                              | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x10==2/\1:x9==2)

Progress [1/1]: |████████------------------------------------------| 16.7% 100/600 | Elapsed Time:  0.9sProgress [1/1]: |████████████████----------------------------------| 33.3% 200/600 | Elapsed Time:  1.0sProgress [1/1]: |█████████████████████████-------------------------| 50.0% 300/600 | Elapsed Time:  1.2sProgress [1/1]: |█████████████████████████████████-----------------| 66.7% 400/600 | Elapsed Time:  1.3sProgress [1/1]: |█████████████████████████████████████████---------| 83.3% 500/600 | Elapsed Time:  1.3sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x9=1; 0:x10=1;  => 4
1:x9=1; 0:x10=2;  => 2
1:x9=2; 0:x10=1;  => 2
1:x9=2; 0:x10=2;  => 1
Time W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe  1.4446s
#Executions: 600

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe.litmus
strengthen,s,exe 1:x9=2; 0:x10=2;  [P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), []
this path is False
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
candidate_add_ppo W;po;AMO;rmw;AMO
all_rels
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.rmw(e2,e3) and ra.AMO(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [W];po;[AMO];rmw;[AMO] target_ppo [W];po;[AMO];rmw;[AMO]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
check all rels
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [W];po;[AMO];rmw;[AMO] target_ppo [W];po;[AMO];rmw;[AMO]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')]
{<0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	: True}
filter_cycle [[P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	]]
ppo [W];po;[AMO];rmw;[AMO]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[AMO];rmw;[AMO]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[AMO]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWR Rmw Coe Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
candidate_add_ppo W;po;AMO;po;AMO
all_rels
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.AMO(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [W];po;[AMO];rmw;[AMO] target_ppo [W];po;[AMO];po;[AMO]
need_check_ppo [W];po;[AMO];po;[AMO] target_ppo [W];po;[AMO];po;[AMO]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
check all rels
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [W];po;[AMO];rmw;[AMO] target_ppo [W];po;[AMO];po;[AMO]
need_check_ppo [W];po;[AMO];po;[AMO] target_ppo [W];po;[AMO];po;[AMO]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')]
{<0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	: True}
filter_cycle [[P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	]]
ppo [W];po;[AMO];po;[AMO]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[AMO];po;[AMO]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[AMO]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWR Rmw Coe Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
candidate_add_ppo W;po;AMO;po-loc;AMO
all_rels
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po_loc(e2,e3) and ra.AMO(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [W];po;[AMO];rmw;[AMO] target_ppo [W];po;[AMO];po-loc;[AMO]
need_check_ppo [W];po;[AMO];po;[AMO] target_ppo [W];po;[AMO];po-loc;[AMO]
need_check_ppo [W];po;[AMO];po-loc;[AMO] target_ppo [W];po;[AMO];po-loc;[AMO]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
check all rels
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [W];po;[AMO];rmw;[AMO] target_ppo [W];po;[AMO];po-loc;[AMO]
need_check_ppo [W];po;[AMO];po;[AMO] target_ppo [W];po;[AMO];po-loc;[AMO]
need_check_ppo [W];po;[AMO];po-loc;[AMO] target_ppo [W];po;[AMO];po-loc;[AMO]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')]
{<0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	: True}
filter_cycle [[P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	]]
ppo [W];po;[AMO];po-loc;[AMO]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[AMO];po-loc;[AMO]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[AMO]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWR Rmw Coe Fence.rw.rwdWW Coe
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
candidate_add_ppo W;po;AMO;fri;AMO
all_rels
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e3) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.fri(e2,e3) and ra.AMO(e3)  for e2 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [W];po;[AMO];rmw;[AMO] target_ppo [W];po;[AMO];fri;[AMO]
need_check_ppo [W];po;[AMO];po;[AMO] target_ppo [W];po;[AMO];fri;[AMO]
need_check_ppo [W];po;[AMO];po-loc;[AMO] target_ppo [W];po;[AMO];fri;[AMO]
need_check_ppo [W];po;[AMO];fri;[AMO] target_ppo [W];po;[AMO];fri;[AMO]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
check all rels
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]]
need_check_ppo [W];po;[AMO];rmw;[AMO] target_ppo [W];po;[AMO];fri;[AMO]
need_check_ppo [W];po;[AMO];po;[AMO] target_ppo [W];po;[AMO];fri;[AMO]
need_check_ppo [W];po;[AMO];po-loc;[AMO] target_ppo [W];po;[AMO];fri;[AMO]
need_check_ppo [W];po;[AMO];fri;[AMO] target_ppo [W];po;[AMO];fri;[AMO]
insert_path [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')]
{<0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	: True}
filter_cycle [[P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	]]
ppo [W];po;[AMO];fri;[AMO]
e1 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
e2 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
cycle str after change
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	
start_relation coe
end relation coe
path_single_ppo [W];po;[AMO];fri;[AMO]
other_single_ppo coe;[W];fencerel(Fence.rw.rw);[W];coe
path_single_ppo justify [W];po;[AMO]
other_single_ppo justify coe;[W];fencerel(Fence.rw.rw);[W];coe
diy_cycle PodWR Rmw Coe Fence.rw.rwdWW Coe
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
now check the paths P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')]
[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo W;po;AMO;rmw;AMO;po;R
all_rels
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.rmw(e2,e3) and ra.AMO(e3) and ra.po(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [W];po;[AMO];rmw;[AMO];po;[R] target_ppo [W];po;[AMO];rmw;[AMO];po;[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
check all rels
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo W;po;AMO;rmw;AMO;po-loc;R
all_rels
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.rmw(e2,e3) and ra.AMO(e3) and ra.po_loc(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [W];po;[AMO];rmw;[AMO];po;[R] target_ppo [W];po;[AMO];rmw;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [W];po;[AMO];rmw;[AMO];po-loc;[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
check all rels
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo W;po;AMO;po;AMO;po;R
all_rels
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.AMO(e3) and ra.po(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [W];po;[AMO];rmw;[AMO];po;[R] target_ppo [W];po;[AMO];po;[AMO];po;[R]
need_check_ppo [W];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [W];po;[AMO];po;[AMO];po;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po;[R] target_ppo [W];po;[AMO];po;[AMO];po;[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
check all rels
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo W;po;AMO;po;AMO;po-loc;R
all_rels
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po(e2,e3) and ra.AMO(e3) and ra.po_loc(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [W];po;[AMO];rmw;[AMO];po;[R] target_ppo [W];po;[AMO];po;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [W];po;[AMO];po;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po;[R] target_ppo [W];po;[AMO];po;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po-loc;[R] target_ppo [W];po;[AMO];po;[AMO];po-loc;[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
check all rels
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo W;po;AMO;po-loc;AMO;po;R
all_rels
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po_loc(e2,e3) and ra.AMO(e3) and ra.po(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [W];po;[AMO];rmw;[AMO];po;[R] target_ppo [W];po;[AMO];po-loc;[AMO];po;[R]
need_check_ppo [W];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [W];po;[AMO];po-loc;[AMO];po;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po;[R] target_ppo [W];po;[AMO];po-loc;[AMO];po;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po-loc;[R] target_ppo [W];po;[AMO];po-loc;[AMO];po;[R]
need_check_ppo [W];po;[AMO];po-loc;[AMO];po;[R] target_ppo [W];po;[AMO];po-loc;[AMO];po;[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
check all rels
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo W;po;AMO;po-loc;AMO;po-loc;R
all_rels
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.po_loc(e2,e3) and ra.AMO(e3) and ra.po_loc(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [W];po;[AMO];rmw;[AMO];po;[R] target_ppo [W];po;[AMO];po-loc;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [W];po;[AMO];po-loc;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po;[R] target_ppo [W];po;[AMO];po-loc;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po-loc;[R] target_ppo [W];po;[AMO];po-loc;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];po-loc;[AMO];po;[R] target_ppo [W];po;[AMO];po-loc;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];po-loc;[AMO];po-loc;[R] target_ppo [W];po;[AMO];po-loc;[AMO];po-loc;[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
check all rels
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo W;po;AMO;fri;AMO;po;R
all_rels
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.fri(e2,e3) and ra.AMO(e3) and ra.po(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [W];po;[AMO];rmw;[AMO];po;[R] target_ppo [W];po;[AMO];fri;[AMO];po;[R]
need_check_ppo [W];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [W];po;[AMO];fri;[AMO];po;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po;[R] target_ppo [W];po;[AMO];fri;[AMO];po;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po-loc;[R] target_ppo [W];po;[AMO];fri;[AMO];po;[R]
need_check_ppo [W];po;[AMO];po-loc;[AMO];po;[R] target_ppo [W];po;[AMO];fri;[AMO];po;[R]
need_check_ppo [W];po;[AMO];po-loc;[AMO];po-loc;[R] target_ppo [W];po;[AMO];fri;[AMO];po;[R]
need_check_ppo [W];po;[AMO];fri;[AMO];po;[R] target_ppo [W];po;[AMO];fri;[AMO];po;[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
check all rels
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo W;po;AMO;fri;AMO;po-loc;R
all_rels
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e4) -> bool:
    return any([ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2) and ra.fri(e2,e3) and ra.AMO(e3) and ra.po_loc(e3,e4) and ra.R(e4)  for e2 in ra.execution  for e3 in ra.execution ])
# 
add_rels
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [W];po;[AMO];rmw;[AMO];po;[R] target_ppo [W];po;[AMO];fri;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [W];po;[AMO];fri;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po;[R] target_ppo [W];po;[AMO];fri;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po-loc;[R] target_ppo [W];po;[AMO];fri;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];po-loc;[AMO];po;[R] target_ppo [W];po;[AMO];fri;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];po-loc;[AMO];po-loc;[R] target_ppo [W];po;[AMO];fri;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];fri;[AMO];po;[R] target_ppo [W];po;[AMO];fri;[AMO];po-loc;[R]
need_check_ppo [W];po;[AMO];fri;[AMO];po-loc;[R] target_ppo [W];po;[AMO];fri;[AMO];po-loc;[R]
add_rels_final
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
check all rels
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
from this path get ppo
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False
candidate_add_ppo W;po;R
all_rels
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po', 'po_loc']
add rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['po']
add rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), []
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is False
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is False
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
get_all_paths_from_e1_to_e2 []
exit get_path_from_e1_to_e2_by_ppo
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, is write event:True
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['fence', 'po', 'fence_rw_rw']
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc']
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')
get_all_paths_from_e1_to_e2 [[(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'po'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, 'fence_rw_rw'), (P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'fence_rw_rw')]]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[W];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];fencerel(Fence.rw.rw);[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, is write event:True
P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, is write event:False
ei,ej,relations, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	(W), P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	(R), ['po', 'po_loc']
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')
this path is True
(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')
get_all_paths_from_e1_to_e2 [[(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po')], [(P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	, 'po_loc')]]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), []
this path is False
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 []
exit get_path_from_e1_to_e2_by_ppo
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, is write event:True
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:False
P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, is write event:True
P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, is write event:False
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(R), P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), ['rmw', 'po', 'po_loc', 'fri']
ei,ej,relations, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	(W), P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	(R), ['po', 'po_loc']
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri')
(P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')
this path is True
(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'rmw'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po_loc'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'po'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, 'fri'), (P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po_loc')], [(P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, 'po')]]
need_check_ppo [W];po;[AMO];rmw;[AMO];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[AMO];rmw;[AMO];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[AMO];po;[AMO];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[AMO];po-loc;[AMO];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[AMO];po-loc;[AMO];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[AMO];fri;[AMO];po;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[AMO];fri;[AMO];po-loc;[R] target_ppo [W];po;[R]
need_check_ppo [W];po;[R] target_ppo [W];po;[R]
add_rels_final
add rel final P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
add rel final P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
add rel final P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
check all rels
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True True ['coe']
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['coe']
check rel --: None P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 True False ['rfe']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['rfe']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 True True ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	 P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	 True False ['po', 'po_loc']
check rel P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	 P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	 True False ['po']
stengthen state, 1:x9=2; 0:x10=2;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586bdfd7440> [P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P0: <0x0C>	amoswap.w x8_p0_1, x9_p0_1, (x7_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P0: <0x10>	lw x10_p0_1, 0(x7_p0_0)	, P1: <0x10>	sw x7_p1_1, 0(x8_p1_0)	, P0: <0x04>	sw x5_p0_1, 0(x6_p0_0)	, P1: <0x14>	lw x9_p1_1, 0(x8_p1_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586be99cf80>, <src.slide.synth.constraint.Constraint object at 0x7586be99c9e0>, <src.slide.synth.constraint.Constraint object at 0x7586befb7a70>] False
{0:x6=x; 0:x7=y; 1:x6=y; 1:x8=x}
              P0              |         P1           ;
<0x00> ori x5, x0, 2          | <0x00> ori x5, x0, 2 ;
<0x04> sw x5, 0(x6)           | <0x04> sw x5, 0(x6)  ;
<0x08> ori x9, x0, 1          | <0x08> fence rw, rw  ;
<0x0C> amoswap.w x8, x9, (x7) | <0x0C> ori x7, x0, 1 ;
<0x10> lw x10, 0(x7)          | <0x10> sw x7, 0(x8)  ;
                              | <0x14> lw x9, 0(x8)  ;

QType.Exists (0:x10==2/\1:x9==2)

Progress [1/1]: |█████████████████████████-------------------------| 50.0% 100/200 | Elapsed Time:  0.7sProgress [1/1]: |██████████████████████████████████████████████████| 100.0%

States 4
1:x9=1; 0:x10=1;  => 4
1:x9=1; 0:x10=2;  => 2
1:x9=2; 0:x10=1;  => 2
1:x9=2; 0:x10=2;  => 1
Time W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe  0.8161s
#Executions: 200

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_rw;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_rw;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 R;fence_w_r;W 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_r_r;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 W;fence_r_r;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_rw_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 W;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;W 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 W;fence_r_r;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_rw_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func59 R;po;XLr 
def ppo_candidate_func59(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.XLr(e2)
 PPOInitFlag.Verified
ppo_candidate_func60 RL;po;R 
def ppo_candidate_func60(ra, e1: Event, e2: Event) -> bool:
    return ra.RL(e1) and ra.po(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func61 AMO;po\(po-loc);R 
def ppo_candidate_func61(ra, e1: Event, e2: Event) -> bool:
    return ra.AMO(e1) and ra.po(e1,e2) and not (ra.po_loc(e1,e2)) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func62 XLr;po;R 
def ppo_candidate_func62(ra, e1: Event, e2: Event) -> bool:
    return ra.XLr(e1) and ra.po(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func63 AMO;po;W 
def ppo_candidate_func63(ra, e1: Event, e2: Event) -> bool:
    return ra.AMO(e1) and ra.po(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func64 R;po;AMO 
def ppo_candidate_func64(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.AMO(e2)
 PPOInitFlag.Verified
ppo_candidate_func65 XLr;po;W 
def ppo_candidate_func65(ra, e1: Event, e2: Event) -> bool:
    return ra.XLr(e1) and ra.po(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func66 W;po;XLr 
def ppo_candidate_func66(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.XLr(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 3
candidate_ppos size: 0
candidate_ppos size: 4
candidate_ppos size: 0
candidate_ppo: [W];po;[AMO], relax is False
ID: 0 cur candidate_ppo: [W];po;[AMO],relax is False
[W];po;[AMO]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[]
ppo [W];po;[AMO] contain_flag False can_relax_flag False
add ppo [W];po;[AMO] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]', '[R];po;[XLr]', '[RL];po;[R]', '[AMO];po\\(po-loc);[R]', '[XLr];po;[R]', '[AMO];po;[W]', '[R];po;[AMO]', '[XLr];po;[W]', '[W];po;[XLr]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]', '[R];po;[XLr]', '[RL];po;[R]', '[AMO];po\\(po-loc);[R]', '[XLr];po;[R]', '[AMO];po;[W]', '[R];po;[AMO]', '[XLr];po;[W]', '[W];po;[XLr]', '[W];po;[AMO]']
ppo [W];po;[AMO] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe.litmus PodWR Rmw Coe Fence.rw.rwdWW Coe
[W];po;[AMO]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
ppo [W];po;[AMO]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; , 1:x9=2; 0:x10=2; ]}
W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe
[1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; , 1:x9=2; 0:x10=2; ]
[1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]
['W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe']
check ppo [W];po;[AMO]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
[]
check ppo [W];po;[AMO] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [W];po;[AMO]
start check
check counter ppo
ppo:[W];po;[AMO] => counter_ppo:
-----------------
ID0:candidate_ppo [W];po;[AMO]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
[]
candidate_ppo: [W];po;[AMO], cur_failed_litmus_tests: [], passed? True

[W];po;[AMO] pass test
==== candidate ppo ====
[W];po;[AMO] [W];po;[AMO] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo/W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe.litmus
synth ppo by litmus test 277
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_po_XLr_PodWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_R_po_XLr_PodWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
synth ppo by litmus test 278
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_addr_R_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_addr_R_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
synth ppo by litmus test 279
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_W_po_XLr_PosWW_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; , 0:x8=1; 1:x9=3; ]}
now_herd_logs_ppo_remove {'W_po_loc_W_po_XLr_PosWW_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; , 0:x8=1; 1:x9=3; ]}
[]
synth ppo by litmus test 280
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_po_loc_R_PodWR_PosRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_XLr_po_loc_R_PodWR_PosRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
synth ppo by litmus test 281
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_addr_XLr_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_R_addr_XLr_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
synth ppo by litmus test 282
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_ctrl_XLr_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_R_ctrl_XLr_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
synth ppo by litmus test 283
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_R_po_XLr_Rfi_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_rfi_R_po_XLr_Rfi_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
[]
synth ppo by litmus test 284
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_ctrl_R_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_XLr_ctrl_R_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
synth ppo by litmus test 285
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_W_po_XLr_PodWW_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_W_po_XLr_PodWW_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
synth ppo by litmus test 286
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_po_R_PosWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_po_R_PosWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
[]
synth ppo by litmus test 287
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_po_loc_XLr_PodWR_PosRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_R_po_loc_XLr_PodWR_PosRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
synth ppo by litmus test 288
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_ctrl_R_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_ctrl_R_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
[]
synth ppo by litmus test 289
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_AMO_po_R_PosWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=1; 1:x9=3; ]}
now_herd_logs_ppo_remove {'W_po_loc_AMO_po_R_PosWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=1; 1:x9=3; ]}
[]
synth ppo by litmus test 290
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_AQ_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
[]
synth ppo by litmus test 291
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_AMO_po_R_Rfi_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=1; 0:x9=1; 1:x9=3; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; , 0:x7=2; 0:x9=1; 1:x9=3; ]}
now_herd_logs_ppo_remove {'W_rfi_AMO_po_R_Rfi_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=1; 0:x9=1; 1:x9=3; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; , 0:x7=2; 0:x9=1; 1:x9=3; ]}
[]
synth ppo by litmus test 292
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_R_addr_XLr_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_loc_R_addr_XLr_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
synth ppo by litmus test 293
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_po_R_Rfi_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_po_R_Rfi_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
[]
synth ppo by litmus test 294
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_R_po_XLr_PosWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_loc_R_po_XLr_PosWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
[]
synth ppo by litmus test 295
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_po_R_PodWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_XLr_po_R_PodWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
synth ppo by litmus test 296
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_coi_W_po_XLr_Coi_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; , 0:x8=1; 1:x9=3; ]}
now_herd_logs_ppo_remove {'W_coi_W_po_XLr_Coi_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; , 0:x8=1; 1:x9=3; ]}
[]
synth ppo by litmus test 297
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_po_R_PodWRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_AQ_po_R_PodWRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
synth ppo by litmus test 298
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_addr_R_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_addr_R_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; ]}
[]
synth ppo by litmus test 299
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_addr_R_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_addr_R_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
synth ppo by litmus test 300
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_ctrl_R_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_ctrl_R_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
[]
synth ppo by litmus test 301
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_R_addr_XLr_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_rfi_R_addr_XLr_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; ]}
[]
synth ppo by litmus test 302
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_R_ctrl_XLr_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_rfi_R_ctrl_XLr_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
[]
synth ppo by litmus test 303
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_R_ctrl_XLr_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_loc_R_ctrl_XLr_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
[]
synth ppo by litmus test 304
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_po_R_PodWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_po_R_PodWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
synth ppo by litmus test 305
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_addr_R_Rmw_PodWRRlP_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_addr_R_Rmw_PodWRRlP_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 306
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_XLr_po_R_Rmw_PosWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_XLr_po_R_Rmw_PosWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 307
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_Rmw_PodWRRlP_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_Rmw_PodWRRlP_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 308
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SC_po_W': [1:x5=0; 1:x7=0; [x]=0; , 1:x5=0; 1:x7=0; [x]=2; , 1:x5=0; 1:x7=2; [x]=2; , 1:x5=1; 1:x7=0; [x]=0; , 1:x5=1; 1:x7=0; [x]=2; , 1:x5=1; 1:x7=2; [x]=2; ]}
now_herd_logs_ppo_remove {'SC_po_W': [1:x5=0; 1:x7=0; [x]=0; , 1:x5=0; 1:x7=0; [x]=2; , 1:x5=0; 1:x7=2; [x]=2; , 1:x5=1; 1:x7=0; [x]=0; , 1:x5=1; 1:x7=2; [x]=2; ]}
SC_po_W
[1:x5=0; 1:x7=0; [x]=0; , 1:x5=0; 1:x7=0; [x]=2; , 1:x5=0; 1:x7=2; [x]=2; , 1:x5=1; 1:x7=0; [x]=0; , 1:x5=1; 1:x7=2; [x]=2; ]
[1:x5=0; 1:x7=0; [x]=0; , 1:x5=0; 1:x7=0; [x]=2; , 1:x5=0; 1:x7=2; [x]=2; , 1:x5=1; 1:x7=0; [x]=0; , 1:x5=1; 1:x7=0; [x]=2; , 1:x5=1; 1:x7=2; [x]=2; ]
['SC_po_W']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo_variant/SC_po_W.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x9=y; 1:x6=y; 1:x8=x}
            P0            |         P1          ;
<0x00> ori x5, x0, 1      | <0x00> lw x5, 0(x6) ;
<0x04> lr.w x5, 0(x6)     | <0x04> fence rw, rw ;
<0x08> ori x7, x0, 2      | <0x08> lw x7, 0(x8) ;
<0x0C> sc.w x10, x7, (x6) |                     ;
<0x10> ori x8, x0, 1      |                     ;
<0x14> sw x8, 0(x9)       |                     ;

QType.Exists (x==2/\1:x5==1/\1:x7==0)

Progress [1/2]: |██████████████████████████████████████████████████| 100.0%Progress [2/2]: |██████████████████████████████████████████████████| 100.0%

States 5
1:x5=0; 1:x7=0; [x]=0;  => 1
1:x5=0; 1:x7=0; [x]=2;  => 1
1:x5=0; 1:x7=2; [x]=2;  => 1
1:x5=1; 1:x7=0; [x]=0;  => 1
1:x5=1; 1:x7=2; [x]=2;  => 1
Time SC_po_W  0.2299s
#Executions: 70

validate litmus by cur_mm
{0:x6=x; 0:x9=y; 1:x6=y; 1:x8=x}
            P0            |         P1          ;
<0x00> ori x5, x0, 1      | <0x00> lw x5, 0(x6) ;
<0x04> lr.w x5, 0(x6)     | <0x04> fence rw, rw ;
<0x08> ori x7, x0, 2      | <0x08> lw x7, 0(x8) ;
<0x0C> sc.w x10, x7, (x6) |                     ;
<0x10> ori x8, x0, 1      |                     ;
<0x14> sw x8, 0(x9)       |                     ;

QType.Exists (x==2/\1:x5==1/\1:x7==0)

Progress [1/2]: |██████████████████████████████████████████████████| 100.0%Progress [2/2]: |██████████████████████████████████████████████████| 100.0%

States 6
1:x5=0; 1:x7=0; [x]=0;  => 1
1:x5=0; 1:x7=0; [x]=2;  => 1
1:x5=0; 1:x7=2; [x]=2;  => 1
1:x5=1; 1:x7=0; [x]=0;  => 1
1:x5=1; 1:x7=0; [x]=2;  => 1
1:x5=1; 1:x7=2; [x]=2;  => 1
Time SC_po_W  0.2222s
#Executions: 70

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo_variant/SC_po_W.litmus
strengthen,s,exe 1:x5=1; 1:x7=0; [x]=2;  [P0: <0x04>	lr.w x5_p0_2, 0(x6_p0_0)	, P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	
events sequence
P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	, is write event:True
P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	(W), P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is True
(P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	, P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
now check the paths P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	
[(P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	, P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]
from this path get ppo
P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	 True True
candidate_add_ppo XSc;po;W
all_rels
rel --: None P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
rel --: None P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 True True ['coe']
rel --: None P0: <0x04>	lr.w x5_p0_2, 0(x6_p0_0)	 True False ['rfe']
rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
rel P0: <0x04>	lr.w x5_p0_2, 0(x6_p0_0)	 P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 False True ['fre']
rel P0: <0x04>	lr.w x5_p0_2, 0(x6_p0_0)	 P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
rel P0: <0x04>	lr.w x5_p0_2, 0(x6_p0_0)	 P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.XSc(e1) and ra.po(e1,e2) and ra.W(e2)

add_rels
add rel P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	 True True ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	, is write event:True
P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	(W), P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is True
(P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	, P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	, P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [XSc];po;[W] target_ppo [XSc];po;[W]
add_rels_final
add rel final P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	 True True ['po']
check all rels
check rel --: None P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x04>	lr.w x5_p0_2, 0(x6_p0_0)	 True False ['rfe']
check rel --: None P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	 P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 True False ['rfe']
check rel P0: <0x04>	lr.w x5_p0_2, 0(x6_p0_0)	 P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 False True ['fre']
check rel P0: <0x04>	lr.w x5_p0_2, 0(x6_p0_0)	 P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	 False True ['po']
check rel P0: <0x04>	lr.w x5_p0_2, 0(x6_p0_0)	 P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	 P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	 False False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	 True True ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	, is write event:True
P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	, is write event:True
ei,ej,relations, P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	(W), P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	(W), ['po']
this path is True
(P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	, P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	, P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [XSc];po;[W] target_ppo [XSc];po;[W]
insert_path [(P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	, P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	, 'po')]
{}
filter_cycle [[P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	, P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	]]
ppo [XSc];po;[W]
e1 P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	
e2 P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	
cycle str
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	
P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	
P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	
P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	
P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	
start_relation rfe
end relation fre
path_single_ppo [XSc];po;[W]
other_single_ppo rfe;[R];fencerel(Fence.rw.rw);[R];fre
path_single_ppo justify [XSc];po;[W]
other_single_ppo justify rfe;[R];fencerel(Fence.rw.rw);[R];fre
diy_cycle PodWW Rfe Fence.rw.rwdRR Fre
stengthen state, 1:x5=1; 1:x7=0; [x]=2;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586be9e59a0> [P0: <0x04>	lr.w x5_p0_2, 0(x6_p0_0)	, P0: <0x14>	sw x8_p0_1, 0(x9_p0_0)	, P1: <0x00>	lw x5_p1_1, 0(x6_p1_0)	, P1: <0x08>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586bdf1f470>] False
{0:x6=x; 0:x9=y; 1:x6=y; 1:x8=x}
            P0            |         P1          ;
<0x00> ori x5, x0, 1      | <0x00> lw x5, 0(x6) ;
<0x04> lr.w x5, 0(x6)     | <0x04> fence rw, rw ;
<0x08> ori x7, x0, 2      | <0x08> lw x7, 0(x8) ;
<0x0C> sc.w x10, x7, (x6) |                     ;
<0x10> ori x8, x0, 1      |                     ;
<0x14> sw x8, 0(x9)       |                     ;

QType.Exists (x==2/\1:x5==1/\1:x7==0)

Progress [1/2]: |██████████████████████████████████████████████████| 100.0%Progress [2/2]: |██████████████████████████████████████████████████| 100.0%

States 6
1:x5=0; 1:x7=0; [x]=0;  => 1
1:x5=0; 1:x7=0; [x]=2;  => 1
1:x5=0; 1:x7=2; [x]=2;  => 1
1:x5=1; 1:x7=0; [x]=0;  => 1
1:x5=1; 1:x7=0; [x]=2;  => 1
1:x5=1; 1:x7=2; [x]=2;  => 1
Time SC_po_W  0.1097s
#Executions: 30

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_rw;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_rw;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 R;fence_w_r;W 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_r_r;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 W;fence_r_r;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_rw_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 W;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;W 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 W;fence_r_r;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_rw_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func59 R;po;XLr 
def ppo_candidate_func59(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.XLr(e2)
 PPOInitFlag.Verified
ppo_candidate_func60 RL;po;R 
def ppo_candidate_func60(ra, e1: Event, e2: Event) -> bool:
    return ra.RL(e1) and ra.po(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func61 AMO;po\(po-loc);R 
def ppo_candidate_func61(ra, e1: Event, e2: Event) -> bool:
    return ra.AMO(e1) and ra.po(e1,e2) and not (ra.po_loc(e1,e2)) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func62 XLr;po;R 
def ppo_candidate_func62(ra, e1: Event, e2: Event) -> bool:
    return ra.XLr(e1) and ra.po(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func63 AMO;po;W 
def ppo_candidate_func63(ra, e1: Event, e2: Event) -> bool:
    return ra.AMO(e1) and ra.po(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func64 R;po;AMO 
def ppo_candidate_func64(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.AMO(e2)
 PPOInitFlag.Verified
ppo_candidate_func65 XLr;po;W 
def ppo_candidate_func65(ra, e1: Event, e2: Event) -> bool:
    return ra.XLr(e1) and ra.po(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func66 W;po;XLr 
def ppo_candidate_func66(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.XLr(e2)
 PPOInitFlag.Verified
ppo_candidate_func67 W;po;AMO 
def ppo_candidate_func67(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 1
candidate_ppo: [XSc];po;[W], relax is False
ID: 0 cur candidate_ppo: [XSc];po;[W],relax is False
[XSc];po;[W]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[]
ppo [XSc];po;[W] contain_flag False can_relax_flag False
add ppo [XSc];po;[W] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]', '[R];po;[XLr]', '[RL];po;[R]', '[AMO];po\\(po-loc);[R]', '[XLr];po;[R]', '[AMO];po;[W]', '[R];po;[AMO]', '[XLr];po;[W]', '[W];po;[XLr]', '[W];po;[AMO]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]', '[R];po;[XLr]', '[RL];po;[R]', '[AMO];po\\(po-loc);[R]', '[XLr];po;[R]', '[AMO];po;[W]', '[R];po;[AMO]', '[XLr];po;[W]', '[W];po;[XLr]', '[W];po;[AMO]', '[XSc];po;[W]']
ppo [XSc];po;[W] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/XSc_po_W_PodWW_Rfe_Fence_rw_rwdRR_Fre.litmus PodWW Rfe Fence.rw.rwdRR Fre
[XSc];po;[W]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
ppo [XSc];po;[W]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/XLr_rmw_XSc_po_W_Rfi_PosRW_PodWW_Coe_Fence_rw_rwdWR_Fre.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_rmw_XSc_po_W_Rfi_PosRW_PodWW_Coe_Fence_rw_rwdWR_Fre': [0:x7=1; 1:x7=0; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=0; 0:x11=1; 0:x12=1; , 0:x7=1; 1:x7=1; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=1; 0:x11=1; 0:x12=1; , 0:x7=1; 1:x7=1; 0:x11=2; 0:x12=1; , 0:x7=1; 1:x7=2; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=2; 0:x11=2; 0:x12=0; ]}
now_herd_logs_ppo_remove {'XLr_rmw_XSc_po_W_Rfi_PosRW_PodWW_Coe_Fence_rw_rwdWR_Fre': [0:x7=1; 1:x7=0; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=0; 0:x11=1; 0:x12=1; , 0:x7=1; 1:x7=1; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=1; 0:x11=1; 0:x12=1; , 0:x7=1; 1:x7=1; 0:x11=2; 0:x12=0; , 0:x7=1; 1:x7=1; 0:x11=2; 0:x12=1; , 0:x7=1; 1:x7=2; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=2; 0:x11=2; 0:x12=0; ]}
XLr_rmw_XSc_po_W_Rfi_PosRW_PodWW_Coe_Fence_rw_rwdWR_Fre
[0:x7=1; 1:x7=0; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=0; 0:x11=1; 0:x12=1; , 0:x7=1; 1:x7=1; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=1; 0:x11=1; 0:x12=1; , 0:x7=1; 1:x7=1; 0:x11=2; 0:x12=0; , 0:x7=1; 1:x7=1; 0:x11=2; 0:x12=1; , 0:x7=1; 1:x7=2; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=2; 0:x11=2; 0:x12=0; ]
[0:x7=1; 1:x7=0; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=0; 0:x11=1; 0:x12=1; , 0:x7=1; 1:x7=1; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=1; 0:x11=1; 0:x12=1; , 0:x7=1; 1:x7=1; 0:x11=2; 0:x12=1; , 0:x7=1; 1:x7=2; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=2; 0:x11=2; 0:x12=0; ]
['XLr_rmw_XSc_po_W_Rfi_PosRW_PodWW_Coe_Fence_rw_rwdWR_Fre']
check ppo [XSc];po;[W]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/XLr_rmw_XSc_po_W_Rfi_PosRW_PodWW_Coe_Fence_rw_rwdWR_Fre.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_rmw_XSc_po_W_Rfi_PosRW_PodWW_Coe_Fence_rw_rwdWR_Fre': [0:x7=1; 1:x7=0; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=0; 0:x11=1; 0:x12=1; , 0:x7=1; 1:x7=1; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=1; 0:x11=1; 0:x12=1; , 0:x7=1; 1:x7=1; 0:x11=2; 0:x12=1; , 0:x7=1; 1:x7=2; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=2; 0:x11=2; 0:x12=0; ]}
now_herd_logs_ppo_remove {'XLr_rmw_XSc_po_W_Rfi_PosRW_PodWW_Coe_Fence_rw_rwdWR_Fre': [0:x7=1; 1:x7=0; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=0; 0:x11=1; 0:x12=1; , 0:x7=1; 1:x7=1; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=1; 0:x11=1; 0:x12=1; , 0:x7=1; 1:x7=1; 0:x11=2; 0:x12=1; , 0:x7=1; 1:x7=2; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=2; 0:x11=2; 0:x12=0; ]}
[]
check ppo [XSc];po;[W] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [XSc];po;[W]
start check
check counter ppo
ppo:[XSc];po;[W] => counter_ppo:
-----------------
ID0:candidate_ppo [XSc];po;[W]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo_variant/SC_po_W.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/XLr_rmw_XSc_po_W_Rfi_PosRW_PodWW_Coe_Fence_rw_rwdWR_Fre.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SC_po_W': [1:x5=0; 1:x7=0; [x]=0; , 1:x5=0; 1:x7=0; [x]=2; , 1:x5=0; 1:x7=2; [x]=2; , 1:x5=1; 1:x7=0; [x]=0; , 1:x5=1; 1:x7=2; [x]=2; ]}
now_herd_logs_ppo_remove {'SC_po_W': [1:x5=0; 1:x7=0; [x]=0; , 1:x5=0; 1:x7=0; [x]=2; , 1:x5=0; 1:x7=2; [x]=2; , 1:x5=1; 1:x7=0; [x]=0; , 1:x5=1; 1:x7=2; [x]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_rmw_XSc_po_W_Rfi_PosRW_PodWW_Coe_Fence_rw_rwdWR_Fre': [0:x7=1; 1:x7=0; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=0; 0:x11=1; 0:x12=1; , 0:x7=1; 1:x7=1; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=1; 0:x11=1; 0:x12=1; , 0:x7=1; 1:x7=1; 0:x11=2; 0:x12=1; , 0:x7=1; 1:x7=2; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=2; 0:x11=2; 0:x12=0; ]}
now_herd_logs_ppo_remove {'XLr_rmw_XSc_po_W_Rfi_PosRW_PodWW_Coe_Fence_rw_rwdWR_Fre': [0:x7=1; 1:x7=0; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=0; 0:x11=1; 0:x12=1; , 0:x7=1; 1:x7=1; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=1; 0:x11=1; 0:x12=1; , 0:x7=1; 1:x7=1; 0:x11=2; 0:x12=1; , 0:x7=1; 1:x7=2; 0:x11=1; 0:x12=0; , 0:x7=1; 1:x7=2; 0:x11=2; 0:x12=0; ]}
[]
candidate_ppo: [XSc];po;[W], cur_failed_litmus_tests: [], passed? True

[XSc];po;[W] pass test
==== candidate ppo ====
[XSc];po;[W] [XSc];po;[W] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo_variant/SC_po_W.litmus
synth ppo by litmus test 309
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_R_ctrl_XLr_Rmw_RfiRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_R_ctrl_XLr_Rmw_RfiRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
synth ppo by litmus test 310
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_po_XLr_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_po_XLr_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 311
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_R_po_XLr_Rmw_Rfi_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_R_po_XLr_Rmw_Rfi_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
synth ppo by litmus test 312
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_po_loc_R_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_po_loc_R_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 313
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_XLr_ctrl_R_Rmw_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_XLr_ctrl_R_Rmw_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 314
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 315
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_R_po_XLr_Rmw_PosWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_R_po_XLr_Rmw_PosWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 316
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_po_loc_XLr_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_po_loc_XLr_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 317
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_XLr_ctrl_R_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_XLr_ctrl_R_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 318
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_AMO_po_XLr_PosRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_AMO_po_XLr_PosRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 319
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_po_R_Rmw_PodWRRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_po_R_Rmw_PodWRRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 320
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_XLr_po_R_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_XLr_po_R_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 321
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_W_po_XLr_Rmw_PosWW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_W_po_XLr_Rmw_PosWW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 322
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_XLr_po_XLr_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_XLr_po_XLr_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
synth ppo by litmus test 323
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_po_R_Rmw_PodWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_po_R_Rmw_PodWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 324
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_R_po_XLr_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_R_po_XLr_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 325
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 326
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_XLr_po_R_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_XLr_po_R_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
synth ppo by litmus test 327
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_XLr_ctrl_XLr_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_XLr_ctrl_XLr_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 328
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_R_ctrl_XLr_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_R_ctrl_XLr_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 329
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_W_po_XLr_Rmw_PosWWRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_W_po_XLr_Rmw_PosWWRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 330
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_R_po_XLr_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_R_po_XLr_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
synth ppo by litmus test 331
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_W_po_XLr_PosRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_W_po_XLr_PosRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
synth ppo by litmus test 332
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_ctrl_XLr_Rmw_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_ctrl_XLr_Rmw_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 333
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_AMO_po_R_Rmw_Rfi_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x10=1; , 0:x6=0; 0:x8=2; 0:x10=0; , 0:x6=0; 0:x8=2; 0:x10=1; , 0:x6=1; 0:x8=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_AMO_po_R_Rmw_Rfi_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x10=1; , 0:x6=0; 0:x8=2; 0:x10=0; , 0:x6=0; 0:x8=2; 0:x10=1; , 0:x6=1; 0:x8=2; 0:x10=1; ]}
[]
synth ppo by litmus test 334
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_ctrl_XLr_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_ctrl_XLr_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 335
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_XLr_po_R_Rmw_PosWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_XLr_po_R_Rmw_PosWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 336
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 337
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_po_R_PodRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_po_R_PodRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 338
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_addr_XLr_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_addr_XLr_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 339
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_AMO_po_R_Rmw_RfiRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x10=1; , 0:x6=0; 0:x8=2; 0:x10=0; , 0:x6=0; 0:x8=2; 0:x10=1; , 0:x6=1; 0:x8=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_AMO_po_R_Rmw_RfiRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x10=1; , 0:x6=0; 0:x8=2; 0:x10=0; , 0:x6=0; 0:x8=2; 0:x10=1; , 0:x6=1; 0:x8=2; 0:x10=1; ]}
[]
synth ppo by litmus test 340
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_R_ctrl_XLr_Rmw_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_R_ctrl_XLr_Rmw_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 341
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SC_po_R': [0:x8=0; 1:x7=0; [x]=0; , 0:x8=0; 1:x7=0; [x]=2; , 0:x8=0; 1:x7=2; [x]=2; , 0:x8=1; 1:x7=0; [x]=0; , 0:x8=1; 1:x7=0; [x]=2; , 0:x8=1; 1:x7=2; [x]=2; ]}
now_herd_logs_ppo_remove {'SC_po_R': [0:x8=0; 1:x7=0; [x]=0; , 0:x8=0; 1:x7=2; [x]=2; , 0:x8=1; 1:x7=0; [x]=0; , 0:x8=1; 1:x7=0; [x]=2; , 0:x8=1; 1:x7=2; [x]=2; ]}
SC_po_R
[0:x8=0; 1:x7=0; [x]=0; , 0:x8=0; 1:x7=2; [x]=2; , 0:x8=1; 1:x7=0; [x]=0; , 0:x8=1; 1:x7=0; [x]=2; , 0:x8=1; 1:x7=2; [x]=2; ]
[0:x8=0; 1:x7=0; [x]=0; , 0:x8=0; 1:x7=0; [x]=2; , 0:x8=0; 1:x7=2; [x]=2; , 0:x8=1; 1:x7=0; [x]=0; , 0:x8=1; 1:x7=0; [x]=2; , 0:x8=1; 1:x7=2; [x]=2; ]
['SC_po_R']
synth ppo by litmus test ['/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo_variant/SC_po_R.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
validate litmus by tgt_mm
{0:x6=x; 0:x9=y; 1:x6=y; 1:x8=x}
            P0            |         P1           ;
<0x00> ori x5, x0, 1      | <0x00> ori x5, x0, 1 ;
<0x04> lr.w x5, 0(x6)     | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 2      | <0x08> fence rw, rw  ;
<0x0C> sc.w x10, x7, (x6) | <0x0C> lw x7, 0(x8)  ;
<0x10> lw x8, 0(x9)       |                      ;

QType.Exists (x==2/\0:x8==0/\1:x7==0)

Progress [1/2]: |██████████████████████████████████████████████████| 100.0%Progress [2/2]: |██████████████████████████████████████████████████| 100.0%

States 5
0:x8=0; 1:x7=0; [x]=0;  => 1
0:x8=0; 1:x7=2; [x]=2;  => 1
0:x8=1; 1:x7=0; [x]=0;  => 1
0:x8=1; 1:x7=0; [x]=2;  => 1
0:x8=1; 1:x7=2; [x]=2;  => 1
Time SC_po_R  0.2412s
#Executions: 70

validate litmus by cur_mm
{0:x6=x; 0:x9=y; 1:x6=y; 1:x8=x}
            P0            |         P1           ;
<0x00> ori x5, x0, 1      | <0x00> ori x5, x0, 1 ;
<0x04> lr.w x5, 0(x6)     | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 2      | <0x08> fence rw, rw  ;
<0x0C> sc.w x10, x7, (x6) | <0x0C> lw x7, 0(x8)  ;
<0x10> lw x8, 0(x9)       |                      ;

QType.Exists (x==2/\0:x8==0/\1:x7==0)

Progress [1/2]: |██████████████████████████████████████████████████| 100.0%Progress [2/2]: |██████████████████████████████████████████████████| 100.0%

States 6
0:x8=0; 1:x7=0; [x]=0;  => 1
0:x8=0; 1:x7=0; [x]=2;  => 1
0:x8=0; 1:x7=2; [x]=2;  => 1
0:x8=1; 1:x7=0; [x]=0;  => 1
0:x8=1; 1:x7=0; [x]=2;  => 1
0:x8=1; 1:x7=2; [x]=2;  => 1
Time SC_po_R  0.2410s
#Executions: 70

failed file: /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo_variant/SC_po_R.litmus
strengthen,s,exe 0:x8=0; 1:x7=0; [x]=2;  [P0: <0x04>	lr.w x5_p0_2, 0(x6_p0_0)	, P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	]
--------------create constraint-------------------------
use constraint extract ppo from e1,e2 P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	
events sequence
P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	, is write event:True
P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	(W), P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is True
(P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	, P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
now check the paths P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	
[(P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	, P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]
from this path get ppo
P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	 True False
candidate_add_ppo XSc;po;R
all_rels
rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
rel --: None P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 True True ['coe']
rel --: None P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	 True False ['rfe']
rel --: None P0: <0x04>	lr.w x5_p0_2, 0(x6_p0_0)	 True False ['rfe']
rel --: None P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
rel P0: <0x04>	lr.w x5_p0_2, 0(x6_p0_0)	 P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
rel P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 False True ['fre']
rel P0: <0x04>	lr.w x5_p0_2, 0(x6_p0_0)	 P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
rel P0: <0x04>	lr.w x5_p0_2, 0(x6_p0_0)	 P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
python_func_string 
def ppo_candidate_func__1(ra, e1: Event, e2: Event) -> bool:
    return ra.XSc(e1) and ra.po(e1,e2) and ra.R(e2)

add_rels
add rel P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	 True False ['po']
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	, is write event:True
P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	(W), P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is True
(P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	, P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	, P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [XSc];po;[R] target_ppo [XSc];po;[R]
add_rels_final
add rel final P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	 True False ['po']
check all rels
check rel --: None P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 True True ['coe']
check rel --: None P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 True True ['coe']
check rel --: None P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	 True False ['rfe']
check rel --: None P0: <0x04>	lr.w x5_p0_2, 0(x6_p0_0)	 True False ['rfe']
check rel --: None P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['rfe']
check rel P0: <0x04>	lr.w x5_p0_2, 0(x6_p0_0)	 P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	 P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 False True ['fre']
check rel P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 False True ['fre']
check rel P0: <0x04>	lr.w x5_p0_2, 0(x6_p0_0)	 P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	 False False ['po']
check rel P0: <0x04>	lr.w x5_p0_2, 0(x6_p0_0)	 P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 False True ['rmw', 'po', 'po_loc', 'fri']
check rel P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	 P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	 True False ['fence', 'po', 'fence_rw_rw']
check rel P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	 P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	 True False ['po']
need insert
enter get_path_from_e1_to_e2_by_ppo
events sequence
P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	, is write event:True
P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	, is write event:False
ei,ej,relations, P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	(W), P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	(R), ['po']
this path is True
(P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	, P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	, 'po')
get_all_paths_from_e1_to_e2 [[(P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	, P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]]
need_check_ppo [XSc];po;[R] target_ppo [XSc];po;[R]
insert_path [(P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	, P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	, 'po')]
{}
filter_cycle [[P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	]]
ppo [XSc];po;[R]
e1 P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	
e2 P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	
cycle str
P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	
cycle str after change
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	
P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	
cycle str after change
P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	
P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	
P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
cycle str after change
P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	
P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	
P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	
P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	
start_relation fre
end relation fre
path_single_ppo [XSc];po;[R]
other_single_ppo fre;[W];fencerel(Fence.rw.rw);[R];fre
path_single_ppo justify [XSc];po;[R]
other_single_ppo justify fre;[W];fencerel(Fence.rw.rw);[R];fre
diy_cycle PodWR Fre Fence.rw.rwdWR Fre
stengthen state, 0:x8=0; 1:x7=0; [x]=2;  <src.slide.analysis.rel.GlobalRelationAnalyzer object at 0x7586be4b4d10> [P0: <0x04>	lr.w x5_p0_2, 0(x6_p0_0)	, P0: <0x10>	lw x8_p0_1, 0(x9_p0_0)	, P1: <0x04>	sw x5_p1_1, 0(x6_p1_0)	, P1: <0x0C>	lw x7_p1_1, 0(x8_p1_0)	, P0: <0x0C>	sc.w x10_p0_1, x7_p0_1, (x6_p0_0)	] [<src.slide.synth.constraint.Constraint object at 0x7586bdeafce0>] False
{0:x6=x; 0:x9=y; 1:x6=y; 1:x8=x}
            P0            |         P1           ;
<0x00> ori x5, x0, 1      | <0x00> ori x5, x0, 1 ;
<0x04> lr.w x5, 0(x6)     | <0x04> sw x5, 0(x6)  ;
<0x08> ori x7, x0, 2      | <0x08> fence rw, rw  ;
<0x0C> sc.w x10, x7, (x6) | <0x0C> lw x7, 0(x8)  ;
<0x10> lw x8, 0(x9)       |                      ;

QType.Exists (x==2/\0:x8==0/\1:x7==0)

Progress [1/2]: |██████████████████████████████████████████████████| 100.0%Progress [2/2]: |██████████████████████████████████████████████████| 100.0%

States 6
0:x8=0; 1:x7=0; [x]=0;  => 1
0:x8=0; 1:x7=0; [x]=2;  => 1
0:x8=0; 1:x7=2; [x]=2;  => 1
0:x8=1; 1:x7=0; [x]=0;  => 1
0:x8=1; 1:x7=0; [x]=2;  => 1
0:x8=1; 1:x7=2; [x]=2;  => 1
Time SC_po_R  0.1018s
#Executions: 23

complete exe list
get new mm
uninit_func_list
ppo_candidate_func38 W;fence_r_rw;W 
def ppo_candidate_func38(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func39 R;fence_rw_w;R 
def ppo_candidate_func39(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func40 R;fence_w_w;W 
def ppo_candidate_func40(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func41 W;fence_rw_w;R 
def ppo_candidate_func41(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func42 R;fence_w_w;R 
def ppo_candidate_func42(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func43 W;fence_w_w;R 
def ppo_candidate_func43(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func44 W;fence_r_rw;R 
def ppo_candidate_func44(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func45 R;fence_r_w;R 
def ppo_candidate_func45(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func46 R;fence_w_r;R 
def ppo_candidate_func46(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func47 R;fence_w_rw;R 
def ppo_candidate_func47(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func48 W;fence_tso;R 
def ppo_candidate_func48(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func49 R;fence_w_rw;W 
def ppo_candidate_func49(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func50 R;fence_w_r;W 
def ppo_candidate_func50(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func51 R;fence_r_r;W 
def ppo_candidate_func51(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func52 W;fence_r_r;R 
def ppo_candidate_func52(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func53 W;fence_r_w;R 
def ppo_candidate_func53(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func54 R;fence_rw_r;W 
def ppo_candidate_func54(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func55 W;fence_w_r;W 
def ppo_candidate_func55(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func56 W;fence_r_w;W 
def ppo_candidate_func56(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func57 W;fence_r_r;W 
def ppo_candidate_func57(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func58 W;fence_rw_r;W 
def ppo_candidate_func58(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func59 R;po;XLr 
def ppo_candidate_func59(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.XLr(e2)
 PPOInitFlag.Verified
ppo_candidate_func60 RL;po;R 
def ppo_candidate_func60(ra, e1: Event, e2: Event) -> bool:
    return ra.RL(e1) and ra.po(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func61 AMO;po\(po-loc);R 
def ppo_candidate_func61(ra, e1: Event, e2: Event) -> bool:
    return ra.AMO(e1) and ra.po(e1,e2) and not (ra.po_loc(e1,e2)) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func62 XLr;po;R 
def ppo_candidate_func62(ra, e1: Event, e2: Event) -> bool:
    return ra.XLr(e1) and ra.po(e1,e2) and ra.R(e2)
 PPOInitFlag.Verified
ppo_candidate_func63 AMO;po;W 
def ppo_candidate_func63(ra, e1: Event, e2: Event) -> bool:
    return ra.AMO(e1) and ra.po(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func64 R;po;AMO 
def ppo_candidate_func64(ra, e1: Event, e2: Event) -> bool:
    return ra.R(e1) and ra.po(e1,e2) and ra.AMO(e2)
 PPOInitFlag.Verified
ppo_candidate_func65 XLr;po;W 
def ppo_candidate_func65(ra, e1: Event, e2: Event) -> bool:
    return ra.XLr(e1) and ra.po(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
ppo_candidate_func66 W;po;XLr 
def ppo_candidate_func66(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.XLr(e2)
 PPOInitFlag.Verified
ppo_candidate_func67 W;po;AMO 
def ppo_candidate_func67(ra, e1: Event, e2: Event) -> bool:
    return ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2)
 PPOInitFlag.Verified
ppo_candidate_func68 XSc;po;W 
def ppo_candidate_func68(ra, e1: Event, e2: Event) -> bool:
    return ra.XSc(e1) and ra.po(e1,e2) and ra.W(e2)
 PPOInitFlag.Verified
init failed: 1
start synth
any_ppo size: 1
candidate_ppos size: 1
candidate_ppo: [XSc];po;[R], relax is False
ID: 0 cur candidate_ppo: [XSc];po;[R],relax is False
[XSc];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[]
ppo [XSc];po;[R] contain_flag False can_relax_flag False
add ppo [XSc];po;[R] PPOValidFlag.Valid
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
before_cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]', '[R];po;[XLr]', '[RL];po;[R]', '[AMO];po\\(po-loc);[R]', '[XLr];po;[R]', '[AMO];po;[W]', '[R];po;[AMO]', '[XLr];po;[W]', '[W];po;[XLr]', '[W];po;[AMO]', '[XSc];po;[W]']
after cat_str_array ['[R];po-loc;[W]', '[W];po-loc;[W]', '([R];po-loc\\(po-loc;[W];po-loc)\\(rsw);[R])\\([AMO];po-loc;[R])', '[XSc];rfi;[R]', '[AMO];rfi;[R]', '[R];fencerel(Fence.r.r);[R]', '[R];fencerel(Fence.r.w);[W]', '[R];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.rw);[W]', '[W];fencerel(Fence.w.r);[R]', '[W];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.w.rw);[W]', '[W];fencerel(Fence.w.rw);[R]', '[R];fencerel(Fence.rw.r);[R]', '[W];fencerel(Fence.rw.r);[R]', '[R];fencerel(Fence.rw.w);[W]', '[W];fencerel(Fence.rw.w);[W]', '[R];fencerel(Fence.rw.rw);[W]', '[W];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.rw.rw);[W]', '[R];fencerel(Fence.rw.rw);[R]', '[W];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[W]', '[R];fencerel(Fence.tso);[R]', '[AQ];po;[W]', '[AQ];po;[R]', '[W];po;[RL]', '[R];po;[RL]', '[RL];po;[AQ]', '[XLr];rmw;[XSc]', '[R];addr;[W]', '[R];addr;[R]', '[R];data;[W]', '[R];ctrl;[W]', '[R];addr;[W];rfi;[R]', '[R];data;[W];rfi;[R]', '[R];addr;[W];po;[W]', '[R];addr;[R];po;[W]', '[W];fencerel(Fence.r.rw);[W]', '[R];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[W]', '[W];fencerel(Fence.rw.w);[R]', '[R];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.w.w);[R]', '[W];fencerel(Fence.r.rw);[R]', '[R];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.w.r);[R]', '[R];fencerel(Fence.w.rw);[R]', '[W];fencerel(Fence.tso);[R]', '[R];fencerel(Fence.w.rw);[W]', '[R];fencerel(Fence.w.r);[W]', '[R];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.r.r);[R]', '[W];fencerel(Fence.r.w);[R]', '[R];fencerel(Fence.rw.r);[W]', '[W];fencerel(Fence.w.r);[W]', '[W];fencerel(Fence.r.w);[W]', '[W];fencerel(Fence.r.r);[W]', '[W];fencerel(Fence.rw.r);[W]', '[R];po;[XLr]', '[RL];po;[R]', '[AMO];po\\(po-loc);[R]', '[XLr];po;[R]', '[AMO];po;[W]', '[R];po;[AMO]', '[XLr];po;[W]', '[W];po;[XLr]', '[W];po;[AMO]', '[XSc];po;[W]', '[XSc];po;[R]']
ppo [XSc];po;[R] index 0
diyone7 cmd: eval $(opam env); diyone7 -arch RISC-V -obs local -name /home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/XSc_po_R_PodWR_Fre_Fence_rw_rwdWR_Fre.litmus PodWR Fre Fence.rw.rwdWR Fre
[XSc];po;[R]
test use herd
old_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
new_cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
ppo [XSc];po;[R]
new_test_path_list ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/XLr_rmw_XSc_po_R_Rfi_PosRW_PodWR_Fre_Fence_rw_rwdWR_Fre.litmus']
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-0.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_rmw_XSc_po_R_Rfi_PosRW_PodWR_Fre_Fence_rw_rwdWR_Fre': [0:x7=1; 0:x9=0; 1:x7=1; 0:x11=1; , 0:x7=1; 0:x9=0; 1:x7=2; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=0; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=0; 0:x11=1; , 0:x7=1; 0:x9=1; 1:x7=1; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=1; 0:x11=1; , 0:x7=1; 0:x9=1; 1:x7=2; 0:x11=0; ]}
now_herd_logs_ppo_remove {'XLr_rmw_XSc_po_R_Rfi_PosRW_PodWR_Fre_Fence_rw_rwdWR_Fre': [0:x7=1; 0:x9=0; 1:x7=1; 0:x11=0; , 0:x7=1; 0:x9=0; 1:x7=1; 0:x11=1; , 0:x7=1; 0:x9=0; 1:x7=2; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=0; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=0; 0:x11=1; , 0:x7=1; 0:x9=1; 1:x7=1; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=1; 0:x11=1; , 0:x7=1; 0:x9=1; 1:x7=2; 0:x11=0; ]}
XLr_rmw_XSc_po_R_Rfi_PosRW_PodWR_Fre_Fence_rw_rwdWR_Fre
[0:x7=1; 0:x9=0; 1:x7=1; 0:x11=0; , 0:x7=1; 0:x9=0; 1:x7=1; 0:x11=1; , 0:x7=1; 0:x9=0; 1:x7=2; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=0; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=0; 0:x11=1; , 0:x7=1; 0:x9=1; 1:x7=1; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=1; 0:x11=1; , 0:x7=1; 0:x9=1; 1:x7=2; 0:x11=0; ]
[0:x7=1; 0:x9=0; 1:x7=1; 0:x11=1; , 0:x7=1; 0:x9=0; 1:x7=2; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=0; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=0; 0:x11=1; , 0:x7=1; 0:x9=1; 1:x7=1; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=1; 0:x11=1; , 0:x7=1; 0:x9=1; 1:x7=2; 0:x11=0; ]
['XLr_rmw_XSc_po_R_Rfi_PosRW_PodWR_Fre_Fence_rw_rwdWR_Fre']
check ppo [XSc];po;[R]
new_test_paths ['/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/XLr_rmw_XSc_po_R_Rfi_PosRW_PodWR_Fre_Fence_rw_rwdWR_Fre.litmus']
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_rmw_XSc_po_R_Rfi_PosRW_PodWR_Fre_Fence_rw_rwdWR_Fre': [0:x7=1; 0:x9=0; 1:x7=1; 0:x11=1; , 0:x7=1; 0:x9=0; 1:x7=2; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=0; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=0; 0:x11=1; , 0:x7=1; 0:x9=1; 1:x7=1; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=1; 0:x11=1; , 0:x7=1; 0:x9=1; 1:x7=2; 0:x11=0; ]}
now_herd_logs_ppo_remove {'XLr_rmw_XSc_po_R_Rfi_PosRW_PodWR_Fre_Fence_rw_rwdWR_Fre': [0:x7=1; 0:x9=0; 1:x7=1; 0:x11=1; , 0:x7=1; 0:x9=0; 1:x7=2; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=0; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=0; 0:x11=1; , 0:x7=1; 0:x9=1; 1:x7=1; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=1; 0:x11=1; , 0:x7=1; 0:x9=1; 1:x7=2; 0:x11=0; ]}
[]
check ppo [XSc];po;[R] True
===== run all new tests on the validated candidate ppos =====
check these ppo
ID0:candidate_ppo [XSc];po;[R]
start check
check counter ppo
ppo:[XSc];po;[R] => counter_ppo:
-----------------
ID0:candidate_ppo [XSc];po;[R]
before add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
end add cat array
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
check cat array start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
check cat array end
check litmus test suite
/home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo_variant/SC_po_R.litmus
/home/whq/Desktop/code_list/slide/src/slide/../output/new_tests/XLr_rmw_XSc_po_R_Rfi_PosRW_PodWR_Fre_Fence_rw_rwdWR_Fre.litmus
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SC_po_R': [0:x8=0; 1:x7=0; [x]=0; , 0:x8=0; 1:x7=2; [x]=2; , 0:x8=1; 1:x7=0; [x]=0; , 0:x8=1; 1:x7=0; [x]=2; , 0:x8=1; 1:x7=2; [x]=2; ]}
now_herd_logs_ppo_remove {'SC_po_R': [0:x8=0; 1:x7=0; [x]=0; , 0:x8=0; 1:x7=2; [x]=2; , 0:x8=1; 1:x7=0; [x]=0; , 0:x8=1; 1:x7=0; [x]=2; , 0:x8=1; 1:x7=2; [x]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_rmw_XSc_po_R_Rfi_PosRW_PodWR_Fre_Fence_rw_rwdWR_Fre': [0:x7=1; 0:x9=0; 1:x7=1; 0:x11=1; , 0:x7=1; 0:x9=0; 1:x7=2; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=0; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=0; 0:x11=1; , 0:x7=1; 0:x9=1; 1:x7=1; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=1; 0:x11=1; , 0:x7=1; 0:x9=1; 1:x7=2; 0:x11=0; ]}
now_herd_logs_ppo_remove {'XLr_rmw_XSc_po_R_Rfi_PosRW_PodWR_Fre_Fence_rw_rwdWR_Fre': [0:x7=1; 0:x9=0; 1:x7=1; 0:x11=1; , 0:x7=1; 0:x9=0; 1:x7=2; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=0; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=0; 0:x11=1; , 0:x7=1; 0:x9=1; 1:x7=1; 0:x11=0; , 0:x7=1; 0:x9=1; 1:x7=1; 0:x11=1; , 0:x7=1; 0:x9=1; 1:x7=2; 0:x11=0; ]}
[]
candidate_ppo: [XSc];po;[R], cur_failed_litmus_tests: [], passed? True

[XSc];po;[R] pass test
==== candidate ppo ====
[XSc];po;[R] [XSc];po;[R] False
finished /home/whq/Desktop/code_list/slide/src/slide/../output/complete_litmus_rvwmo_variant/SC_po_R.litmus
synth ppo by litmus test 342
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_AMO_po_R_PosRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_AMO_po_R_PosRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 343
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_po_XLr_PodRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_po_XLr_PodRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 344
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_po_loc_XLr_Rmw_PodWRRlP_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_po_loc_XLr_Rmw_PodWRRlP_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 345
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_XLr_addr_XLr_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_XLr_addr_XLr_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 346
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_addr_XLr_Rmw_PodWRRlP_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_addr_XLr_Rmw_PodWRRlP_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 347
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_XLr_ctrl_R_Rmw_RfiRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_XLr_ctrl_R_Rmw_RfiRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
synth ppo by litmus test 348
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_po_XLr_Rmw_PodWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_po_XLr_Rmw_PodWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 349
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_addr_XLr_Rmw_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_addr_XLr_Rmw_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 350
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_R_ctrl_XLr_Rmw_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_R_ctrl_XLr_Rmw_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
synth ppo by litmus test 351
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_XLr_po_R_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_XLr_po_R_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 352
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_R_ctrl_XLr_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_R_ctrl_XLr_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 353
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.rw.rw+popx': [0:x5=0; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=0; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=1; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; ]}
now_herd_logs_ppo_remove {'LB+fence.rw.rw+popx': [0:x5=0; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=0; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=1; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; ]}
[]
synth ppo by litmus test 354
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_ctrl_XLr_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_ctrl_XLr_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 355
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 356
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_XLr_po_loc_R_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_XLr_po_loc_R_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 357
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_po_XLr_Rmw_PodWW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_po_XLr_Rmw_PodWW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 358
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_XLr_ctrl_R_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_XLr_ctrl_R_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
synth ppo by litmus test 359
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_AMO_po_R_DpCtrldR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_AMO_po_R_DpCtrldR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 360
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_po_XLr_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_po_XLr_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 361
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_AMO_po_R_Rmw_PosWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_AMO_po_R_Rmw_PosWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 362
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_po_R_PodRRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_po_R_PodRRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 363
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_XLr_ctrl_XLr_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_XLr_ctrl_XLr_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
synth ppo by litmus test 364
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_R_po_XLr_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_R_po_XLr_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 365
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_po_R_Rmw_PodWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_po_R_Rmw_PodWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 366
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_po_loc_XLr_Rmw_PodWR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_po_loc_XLr_Rmw_PodWR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 367
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_ctrl_XLr_Rmw_PodWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_ctrl_XLr_Rmw_PodWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 368
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_AMO_po_XLr_DpCtrldR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_AMO_po_XLr_DpCtrldR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 369
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_XLr_addr_R_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_XLr_addr_R_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 370
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_rmw_XSc_po_R_PosRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; 0:x10=0; , 0:x5=0; 0:x8=0; 0:x10=1; , 0:x5=0; 0:x8=1; 0:x10=0; , 0:x5=0; 0:x8=1; 0:x10=1; , 0:x5=1; 0:x8=1; 0:x10=0; , 0:x5=1; 0:x8=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_rmw_XSc_po_R_PosRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; 0:x10=0; , 0:x5=0; 0:x8=0; 0:x10=1; , 0:x5=0; 0:x8=1; 0:x10=0; , 0:x5=0; 0:x8=1; 0:x10=1; , 0:x5=1; 0:x8=1; 0:x10=0; , 0:x5=1; 0:x8=1; 0:x10=1; ]}
[]
synth ppo by litmus test 371
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_po_R_Rmw_PodWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_po_R_Rmw_PodWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 372
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_AMO_po_R_Rmw_PosWRRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_AMO_po_R_Rmw_PosWRRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 373
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_XLr_po_loc_XLr_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_XLr_po_loc_XLr_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 374
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_ctrl_R_Rmw_PodWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_ctrl_R_Rmw_PodWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 375
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_R_ctrl_XLr_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_R_ctrl_XLr_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
synth ppo by litmus test 376
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_R_addr_XLr_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_R_addr_XLr_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 377
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_po_loc_R_Rmw_PodWR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_po_loc_R_Rmw_PodWR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 378
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_R_po_loc_XLr_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_R_po_loc_XLr_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 379
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_XLr_ctrl_XLr_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_XLr_ctrl_XLr_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 380
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_R_po_XLr_Rmw_RfiRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_R_po_XLr_Rmw_RfiRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
synth ppo by litmus test 381
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.rw.rw+poxp': [1:x6=0; 1:x7=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; [x]=1; [y]=1; , 1:x6=0; 1:x7=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=1; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'S+fence.rw.rw+poxp': [1:x6=0; 1:x7=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; [x]=1; [y]=1; , 1:x6=0; 1:x7=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=1; [x]=1; [y]=1; ]}
[]
synth ppo by litmus test 382
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_XLr_ctrl_R_Rmw_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_XLr_ctrl_R_Rmw_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
synth ppo by litmus test 383
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.rw.rw+popx': [1:x5=0; 1:x9=0; 1:x10=0; [x]=2; , 1:x5=0; 1:x9=0; 1:x10=1; [x]=2; , 1:x5=0; 1:x9=2; 1:x10=0; [x]=1; , 1:x5=0; 1:x9=2; 1:x10=1; [x]=2; , 1:x5=1; 1:x9=2; 1:x10=0; [x]=1; , 1:x5=1; 1:x9=2; 1:x10=1; [x]=2; ]}
now_herd_logs_ppo_remove {'S+fence.rw.rw+popx': [1:x5=0; 1:x9=0; 1:x10=0; [x]=2; , 1:x5=0; 1:x9=0; 1:x10=1; [x]=2; , 1:x5=0; 1:x9=2; 1:x10=0; [x]=1; , 1:x5=0; 1:x9=2; 1:x10=1; [x]=2; , 1:x5=1; 1:x9=2; 1:x10=0; [x]=1; , 1:x5=1; 1:x9=2; 1:x10=1; [x]=2; ]}
[]
synth ppo by litmus test 384
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_R_ctrl_XLr_Rmw_PosWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_R_ctrl_XLr_Rmw_PosWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 385
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 386
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_W_po_XLr_DpCtrldW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_W_po_XLr_DpCtrldW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 387
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_XLr_po_XLr_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_XLr_po_XLr_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 388
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_po_R_Rmw_PodWRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_po_R_Rmw_PodWRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 389
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_XLr_po_XLr_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_XLr_po_XLr_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 390
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_po_loc_XLr_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_po_loc_XLr_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 391
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_addr_R_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_addr_R_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 392
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_XLr_ctrl_R_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_XLr_ctrl_R_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 393
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.rw.rw+poxp': [0:x5=0; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+fence.rw.rw+poxp': [0:x5=0; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; [y]=1; ]}
[]
synth ppo by litmus test 394
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_po_R_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_po_R_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 395
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_po_loc_R_Rmw_PodWRRlP_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_po_loc_R_Rmw_PodWRRlP_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 396
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_po_XLr_Rmw_PodWWRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_W_po_XLr_Rmw_PodWWRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 397
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_XLr_po_R_Rmw_Rfi_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_XLr_po_R_Rmw_Rfi_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
synth ppo by litmus test 398
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_fri_W_po_XLr_Fri_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_fri_W_po_XLr_Fri_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
synth ppo by litmus test 399
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_XLr_po_R_Rmw_RfiRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_XLr_po_R_Rmw_RfiRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
synth ppo by litmus test 400
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_po_XLr_Rmw_PodWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_po_XLr_Rmw_PodWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 401
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_XLr_ctrl_R_Rmw_PosWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_XLr_ctrl_R_Rmw_PosWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 402
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_R_po_XLr_Rmw_PosWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_R_po_XLr_Rmw_PosWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 403
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_coi_W_po_XLr_Rmw_Coi_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_coi_W_po_XLr_Rmw_Coi_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 404
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_po_XLr_PodRRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_AQ_po_XLr_PodRRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 405
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_po_XLr_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_po_XLr_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 406
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_ctrl_R_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_ctrl_R_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 407
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_ctrl_R_Rmw_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_ctrl_R_Rmw_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 408
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_addr_R_Rmw_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_addr_R_Rmw_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 409
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_coi_W_po_XLr_Rmw_CoiRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_coi_W_po_XLr_Rmw_CoiRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 410
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_addr_XLr_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_addr_XLr_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 411
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 412
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_rfi_AMO_PodRR_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'R_po_AMO_rfi_AMO_PodRR_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
[]
synth ppo by litmus test 413
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_XLr_po_AQ_PosRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_XLr_po_AQ_PosRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 414
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_po_AMO_Rmw_PodWRRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_po_AMO_Rmw_PodWRRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
synth ppo by litmus test 415
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_ctrl_W_PodRR_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_ctrl_W_PodRR_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 416
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_po_W_Rmw_PodWR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_po_W_Rmw_PodWR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 417
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_po_AQ_PodRW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_po_AQ_PodRW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 418
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_po_AMO_PodRRPAq_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'R_po_AQ_po_AMO_PodRRPAq_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
synth ppo by litmus test 419
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_XLr_po_W_Rmw_Rfi_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=2; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_XLr_po_W_Rmw_Rfi_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=2; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
[]
synth ppo by litmus test 420
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_po_loc_R_Rmw_PodWRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_po_loc_R_Rmw_PodWRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
synth ppo by litmus test 421
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_ctrl_AQ_Rmw_PodWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_ctrl_AQ_Rmw_PodWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
synth ppo by litmus test 422
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_data_W_Rmw_PodWR_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_data_W_Rmw_PodWR_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 423
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_po_loc_W_Rmw_PodWRRlP_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_po_loc_W_Rmw_PodWRRlP_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 424
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 425
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_R_po_AMO_Rmw_PosWRRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_R_po_AMO_Rmw_PosWRRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 426
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_R_po_AQ_Rmw_Rfi_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_R_po_AQ_Rmw_Rfi_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
[]
synth ppo by litmus test 427
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_coi_W_Rmw_PodWRPAq_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_coi_W_Rmw_PodWRPAq_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
[]
synth ppo by litmus test 428
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_po_AMO_PodRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_po_AMO_PodRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 429
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_coi_W_po_AMO_Rmw_Coi_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_coi_W_po_AMO_Rmw_Coi_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 430
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_po_loc_AMO_Rmw_PodWR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_po_loc_AMO_Rmw_PodWR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 431
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_addr_W_PodRR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_addr_W_PodRR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
synth ppo by litmus test 432
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_po_AMO_PodRR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_po_AMO_PodRR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
synth ppo by litmus test 433
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_po_AMO_PodRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_po_AMO_PodRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 434
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_po_W_Rmw_PodWRRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_po_W_Rmw_PodWRRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 435
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_W_po_AMO_Rmw_PosWWRlP_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_W_po_AMO_Rmw_PosWWRlP_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 436
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_R_po_AQ_Rmw_PosWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_R_po_AQ_Rmw_PosWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 437
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_fri_W_PodRR_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; 0:x10=1; , 0:x5=0; 0:x7=0; 0:x10=2; , 0:x5=0; 0:x7=2; 0:x10=1; , 0:x5=1; 0:x7=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_fri_W_PodRR_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; 0:x10=1; , 0:x5=0; 0:x7=0; 0:x10=2; , 0:x5=0; 0:x7=2; 0:x10=1; , 0:x5=1; 0:x7=2; 0:x10=1; ]}
[]
synth ppo by litmus test 438
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_po_loc_W_PodRRPAq_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_po_loc_W_PodRRPAq_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
synth ppo by litmus test 439
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_rmw_XSc_PodRR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=0; , 0:x5=0; 0:x10=2; 0:x11=0; , 0:x5=0; 0:x10=2; 0:x11=1; , 0:x5=1; 0:x10=1; 0:x11=0; , 0:x5=1; 0:x10=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_rmw_XSc_PodRR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=0; , 0:x5=0; 0:x10=2; 0:x11=0; , 0:x5=0; 0:x10=2; 0:x11=1; , 0:x5=1; 0:x10=1; 0:x11=0; , 0:x5=1; 0:x10=2; 0:x11=1; ]}
[]
synth ppo by litmus test 440
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_coi_W_PodRRPAq_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_coi_W_PodRRPAq_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
synth ppo by litmus test 441
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_fri_W_po_AMO_Fri_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_fri_W_po_AMO_Fri_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 442
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_po_loc_AQ_PodRR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_po_loc_AQ_PodRR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 443
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_rfi_XLr_PodRW_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_rfi_XLr_PodRW_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; ]}
[]
synth ppo by litmus test 444
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_po_loc_AQ_PodRW_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'XLr_po_W_po_loc_AQ_PodRW_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
synth ppo by litmus test 445
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_rfi_AMO_PodRW_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=2; , 0:x5=0; 0:x9=1; 0:x11=3; , 0:x5=0; 0:x9=3; 0:x11=2; , 0:x5=1; 0:x9=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'XLr_po_W_rfi_AMO_PodRW_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=2; , 0:x5=0; 0:x9=1; 0:x11=3; , 0:x5=0; 0:x9=3; 0:x11=2; , 0:x5=1; 0:x9=1; 0:x11=2; ]}
[]
synth ppo by litmus test 446
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_XLr_po_W_Rmw_PosWR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_XLr_po_W_Rmw_PosWR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 447
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_po_AQ_Rmw_PodWW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_po_AQ_Rmw_PodWW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
synth ppo by litmus test 448
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_AMO_po_AMO_PosRR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_AMO_po_AMO_PosRR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 449
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_rfi_AQ_Rmw_PodWW_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x12=2; , 0:x6=0; 0:x10=1; 0:x12=3; , 0:x6=0; 0:x10=3; 0:x12=2; , 0:x6=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'AMO_po_W_rfi_AQ_Rmw_PodWW_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x12=2; , 0:x6=0; 0:x10=1; 0:x12=3; , 0:x6=0; 0:x10=3; 0:x12=2; , 0:x6=1; 0:x10=1; 0:x12=2; ]}
[]
synth ppo by litmus test 450
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_fri_W_Rmw_PodWRRlP_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; 0:x11=1; , 0:x6=0; 0:x8=0; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_fri_W_Rmw_PodWRRlP_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; 0:x11=1; , 0:x6=0; 0:x8=0; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
[]
synth ppo by litmus test 451
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_coi_W_Rmw_PodWR_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_coi_W_Rmw_PodWR_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
[]
synth ppo by litmus test 452
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_po_loc_XLr_PodRRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_AQ_po_loc_XLr_PodRRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 453
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_po_loc_XLr_Rmw_PodWW_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_po_loc_XLr_Rmw_PodWW_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 454
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_W_po_AQ_PosRW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_W_po_AQ_PosRW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 455
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_po_loc_W_Rmw_PodWR_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_po_loc_W_Rmw_PodWR_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
[]
synth ppo by litmus test 456
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_AMO_po_W_Rmw_Rfi_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_AMO_po_W_Rmw_Rfi_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
[]
synth ppo by litmus test 457
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_po_loc_XLr_PodRW_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_po_loc_XLr_PodRW_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; ]}
[]
synth ppo by litmus test 458
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_rfi_R_PodRR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_rfi_R_PodRR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 459
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_AMO_po_AQ_PosRR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_AMO_po_AQ_PosRR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 460
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_rmw_XSc_po_W_PosRW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=0; , 0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=2; 0:x11=0; , 0:x5=0; 0:x10=2; 0:x11=1; , 0:x5=1; 0:x10=1; 0:x11=0; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_rmw_XSc_po_W_PosRW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=0; , 0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=2; 0:x11=0; , 0:x5=0; 0:x10=2; 0:x11=1; , 0:x5=1; 0:x10=1; 0:x11=0; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 461
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_XLr_po_W_PosRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_XLr_po_W_PosRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 462
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_po_loc_AQ_PodRR_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'R_po_AMO_po_loc_AQ_PodRR_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
[]
synth ppo by litmus test 463
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_AMO_po_W_Rmw_PosWRRlP_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_AMO_po_W_Rmw_PosWRRlP_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 464
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_rfi_XLr_Rmw_PodWWRlP_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_W_rfi_XLr_Rmw_PodWWRlP_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 465
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_po_W_PodRRPAq_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_po_W_PodRRPAq_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 466
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_rfi_AMO_PodRRPAq_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'R_po_AQ_rfi_AMO_PodRRPAq_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
[]
synth ppo by litmus test 467
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_po_loc_AQ_Rmw_PodWW_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'AMO_po_W_po_loc_AQ_Rmw_PodWW_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
[]
synth ppo by litmus test 468
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_XLr_po_W_Rmw_PosWRRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_XLr_po_W_Rmw_PosWRRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 469
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_R_po_AMO_PosRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_R_po_AMO_PosRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 470
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_R_po_AQ_PosRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_R_po_AQ_PosRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 471
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_fri_W_po_AQ_Fri_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_fri_W_po_AQ_Fri_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 472
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_ctrl_AMO_Rmw_PodWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_ctrl_AMO_Rmw_PodWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
synth ppo by litmus test 473
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_po_loc_XLr_PodRR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_po_loc_XLr_PodRR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 474
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_ctrl_W_Rmw_PodWRRlP_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_ctrl_W_Rmw_PodWRRlP_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 475
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_rfi_AMO_Rmw_PodWWRlP_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x12=2; , 0:x6=0; 0:x10=1; 0:x12=3; , 0:x6=0; 0:x10=3; 0:x12=2; , 0:x6=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'RL_po_W_rfi_AMO_Rmw_PodWWRlP_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x12=2; , 0:x6=0; 0:x10=1; 0:x12=3; , 0:x6=0; 0:x10=3; 0:x12=2; , 0:x6=1; 0:x10=1; 0:x12=2; ]}
[]
synth ppo by litmus test 476
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_po_loc_XLr_Rmw_PodWWRlP_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_W_po_loc_XLr_Rmw_PodWWRlP_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 477
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_po_AQ_PodRR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_po_AQ_PodRR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
synth ppo by litmus test 478
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_addr_W_Rmw_PodWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_addr_W_Rmw_PodWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
synth ppo by litmus test 479
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_po_AMO_Rmw_PodWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_po_AMO_Rmw_PodWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
synth ppo by litmus test 480
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_po_AMO_PodRW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_po_AMO_PodRW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 481
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_rfi_AQ_PodRW_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=2; , 0:x5=0; 0:x9=1; 0:x11=3; , 0:x5=0; 0:x9=3; 0:x11=2; , 0:x5=1; 0:x9=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'XLr_po_W_rfi_AQ_PodRW_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=2; , 0:x5=0; 0:x9=1; 0:x11=3; , 0:x5=0; 0:x9=3; 0:x11=2; , 0:x5=1; 0:x9=1; 0:x11=2; ]}
[]
synth ppo by litmus test 482
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_W_po_loc_XLr_DpCtrldW_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_W_po_loc_XLr_DpCtrldW_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 483
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_rfi_R_Rmw_PodWR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_rfi_R_Rmw_PodWR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
synth ppo by litmus test 484
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_po_W_Rmw_PodWRRlP_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_po_W_Rmw_PodWRRlP_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
synth ppo by litmus test 485
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_ctrl_AMO_PodRR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_ctrl_AMO_PodRR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 486
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_po_W_Rmw_PodWR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_po_W_Rmw_PodWR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
synth ppo by litmus test 487
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_ctrl_AMO_PodRR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_ctrl_AMO_PodRR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 488
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_po_loc_AMO_PodRW_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'XLr_po_W_po_loc_AMO_PodRW_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
synth ppo by litmus test 489
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_ctrl_AQ_PodRR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_ctrl_AQ_PodRR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 490
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_po_loc_W_PodRR_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_po_loc_W_PodRR_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
synth ppo by litmus test 491
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_rfi_AQ_PodRR_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'R_po_AMO_rfi_AQ_PodRR_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
[]
synth ppo by litmus test 492
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_po_loc_W_Rmw_PodWR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_po_loc_W_Rmw_PodWR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 493
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_data_W_PodRR_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_data_W_PodRR_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 494
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_XLr_po_AMO_PosRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_XLr_po_AMO_PosRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 495
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_po_loc_R_PodRRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_po_loc_R_PodRRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 496
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_rfi_R_Rmw_PodWRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_rfi_R_Rmw_PodWRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
synth ppo by litmus test 497
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_R_po_AMO_Rmw_PosWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_R_po_AMO_Rmw_PosWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 498
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_po_loc_AQ_Rmw_PodWR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_po_loc_AQ_Rmw_PodWR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 499
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_W_po_AQ_Rmw_PosWW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_W_po_AQ_Rmw_PosWW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 500
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_AMO_po_W_Rmw_RfiRlP_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_AMO_po_W_Rmw_RfiRlP_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
[]
synth ppo by litmus test 501
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_R_po_AMO_Rmw_RfiRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_R_po_AMO_Rmw_RfiRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
[]
synth ppo by litmus test 502
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_po_loc_AMO_Rmw_PodWWRlP_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'RL_po_W_po_loc_AMO_Rmw_PodWWRlP_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
[]
synth ppo by litmus test 503
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_W_po_AMO_PosRW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_W_po_AMO_PosRW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 504
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_rfi_XLr_PodRR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_rfi_XLr_PodRR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 505
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_W_po_AMO_Rmw_PosWW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_W_po_AMO_Rmw_PosWW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 506
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_coi_W_po_AQ_Rmw_Coi_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_coi_W_po_AQ_Rmw_Coi_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 507
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_po_AQ_PodRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_po_AQ_PodRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 508
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_po_loc_AMO_Rmw_PodWRRlP_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_po_loc_AMO_Rmw_PodWRRlP_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 509
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_po_loc_AMO_PodRR_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'R_po_AMO_po_loc_AMO_PodRR_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
[]
synth ppo by litmus test 510
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_po_W_PodRR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_po_W_PodRR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 511
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_po_loc_AQ_PodRRPAq_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'R_po_AQ_po_loc_AQ_PodRRPAq_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
[]
synth ppo by litmus test 512
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_rfi_XLr_Rmw_PodWW_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_rfi_XLr_Rmw_PodWW_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 513
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_po_loc_AQ_PodRR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_po_loc_AQ_PodRR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 514
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_ctrl_W_Rmw_PodWR_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_ctrl_W_Rmw_PodWR_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 515
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_po_W_PodRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_po_W_PodRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 516
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_rfi_R_Rmw_PodWRRlP_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_rfi_R_Rmw_PodWRRlP_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
synth ppo by litmus test 517
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_po_AMO_Rmw_PodWWRlP_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'RL_po_W_po_AMO_Rmw_PodWWRlP_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
synth ppo by litmus test 518
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_po_AQ_PodRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_po_AQ_PodRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 519
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_addr_W_Rmw_PodWRRlP_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_addr_W_Rmw_PodWRRlP_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
synth ppo by litmus test 520
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_AMO_po_W_Rmw_PosWR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_AMO_po_W_Rmw_PosWR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 521
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_coi_W_Rmw_PodWRRlP_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_coi_W_Rmw_PodWRRlP_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
[]
synth ppo by litmus test 522
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_rfi_AMO_Rmw_PodWW_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x12=2; , 0:x6=0; 0:x10=1; 0:x12=3; , 0:x6=0; 0:x10=3; 0:x12=2; , 0:x6=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'AMO_po_W_rfi_AMO_Rmw_PodWW_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x12=2; , 0:x6=0; 0:x10=1; 0:x12=3; , 0:x6=0; 0:x10=3; 0:x12=2; , 0:x6=1; 0:x10=1; 0:x12=2; ]}
[]
synth ppo by litmus test 523
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_po_W_Rmw_PodWRPAq_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_po_W_Rmw_PodWRPAq_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
synth ppo by litmus test 524
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_po_loc_AMO_PodRR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_po_loc_AMO_PodRR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 525
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_po_loc_R_Rmw_PodWR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_po_loc_R_Rmw_PodWR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
synth ppo by litmus test 526
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_AMO_po_W_PosRR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_AMO_po_W_PosRR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 527
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_po_loc_R_PodRR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_po_loc_R_PodRR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 528
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_fri_W_Rmw_PodWR_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; 0:x11=1; , 0:x6=0; 0:x8=0; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_fri_W_Rmw_PodWR_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; 0:x11=1; , 0:x6=0; 0:x8=0; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
[]
synth ppo by litmus test 529
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_rfi_R_PodRRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_rfi_R_PodRRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 530
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_R_po_AMO_Rmw_Rfi_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_R_po_AMO_Rmw_Rfi_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
[]
synth ppo by litmus test 531
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_po_loc_W_Rmw_PodWRPAq_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_po_loc_W_Rmw_PodWRPAq_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
[]
synth ppo by litmus test 532
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_po_loc_AMO_PodRRPAq_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'R_po_AQ_po_loc_AMO_PodRRPAq_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
[]
synth ppo by litmus test 533
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_coi_W_PodRR_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_coi_W_PodRR_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
synth ppo by litmus test 534
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_po_AQ_Rmw_PodWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_po_AQ_Rmw_PodWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
synth ppo by litmus test 535
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_ctrl_AMO_Rmw_PodWRRlP_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_ctrl_AMO_Rmw_PodWRRlP_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
synth ppo by litmus test 536
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_po_AMO_Rmw_PodWW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_po_AMO_Rmw_PodWW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
synth ppo by litmus test 537
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_po_loc_W_Rmw_PodWRRlP_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_po_loc_W_Rmw_PodWRRlP_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
[]
synth ppo by litmus test 538
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_R_po_AQ_Rmw_RfiRlP_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_R_po_AQ_Rmw_RfiRlP_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
[]
synth ppo by litmus test 539
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_po_loc_R_Rmw_PodWRRlP_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_po_loc_R_Rmw_PodWRRlP_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
synth ppo by litmus test 540
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_po_loc_W_PodRR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_po_loc_W_PodRR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 541
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_ctrl_AQ_PodRR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_ctrl_AQ_PodRR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 542
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_XLr_po_W_Rmw_RfiRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=2; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_XLr_po_W_Rmw_RfiRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=2; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
[]
synth ppo by litmus test 543
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_rfi_AQ_Rmw_PodWWRlP_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x12=2; , 0:x6=0; 0:x10=1; 0:x12=3; , 0:x6=0; 0:x10=3; 0:x12=2; , 0:x6=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'RL_po_W_rfi_AQ_Rmw_PodWWRlP_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x12=2; , 0:x6=0; 0:x10=1; 0:x12=3; , 0:x6=0; 0:x10=3; 0:x12=2; , 0:x6=1; 0:x10=1; 0:x12=2; ]}
[]
synth ppo by litmus test 544
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_coi_W_po_AMO_Rmw_CoiRlP_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_coi_W_po_AMO_Rmw_CoiRlP_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 545
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_W_rfi_XLr_DpCtrldW_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=0; , 0:x5=0; 0:x9=1; 0:x11=1; , 0:x5=1; 0:x9=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_W_rfi_XLr_DpCtrldW_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=0; , 0:x5=0; 0:x9=1; 0:x11=1; , 0:x5=1; 0:x9=1; 0:x11=1; ]}
[]
synth ppo by litmus test 546
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_data_W_Rmw_PodWRRlP_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_data_W_Rmw_PodWRRlP_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 547
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_rfi_AQ_PodRRPAq_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'R_po_AQ_rfi_AQ_PodRRPAq_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
[]
synth ppo by litmus test 548
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_po_AQ_PodRRPAq_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'R_po_AQ_po_AQ_PodRRPAq_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
synth ppo by litmus test 549
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 550
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_po_loc_AMO_PodRR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_po_loc_AMO_PodRR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 551
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_rfi_XLr_PodRRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_AQ_rfi_XLr_PodRRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 552
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_po_loc_AMO_Rmw_PodWW_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'AMO_po_W_po_loc_AMO_Rmw_PodWW_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
[]
synth ppo by litmus test 553
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_AMO_po_W_Rfi_Rmw_PodWW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=1; 1:x9=3; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; , 0:x7=2; 1:x9=3; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_rfi_AMO_po_W_Rfi_Rmw_PodWW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=1; 1:x9=3; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; , 0:x7=2; 1:x9=3; 0:x11=1; ]}
[]
synth ppo by litmus test 554
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_ctrl_W_PodWR_DpCtrldW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_ctrl_W_PodWR_DpCtrldW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 555
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_coi_W_PodWR_Rmw_Coi_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'W_po_AMO_coi_W_PodWR_Rmw_Coi_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
[]
synth ppo by litmus test 556
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_W_rfi_AMO_PodWW_Rfi_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; 0:x11=2; , 0:x9=1; 1:x9=1; 0:x11=3; , 0:x9=1; 1:x9=2; 0:x11=2; , 0:x9=3; 1:x9=1; 0:x11=2; , 0:x9=3; 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'W_po_W_rfi_AMO_PodWW_Rfi_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; 0:x11=2; , 0:x9=1; 1:x9=1; 0:x11=3; , 0:x9=1; 1:x9=2; 0:x11=2; , 0:x9=3; 1:x9=1; 0:x11=2; , 0:x9=3; 1:x9=2; 0:x11=2; ]}
[]
synth ppo by litmus test 557
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_po_AMO_PodWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_R_po_AMO_PodWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
synth ppo by litmus test 558
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_data_W_PosWR_DpDatadW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_data_W_PosWR_DpDatadW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
[]
synth ppo by litmus test 559
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_rfi_R_PodWRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_AQ_rfi_R_PodWRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 560
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_R_ctrl_AQ_Rfi_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_rfi_R_ctrl_AQ_Rfi_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 561
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_po_loc_R_PodWR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_po_loc_R_PodWR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 562
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_rfi_R_PodWR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_rfi_R_PodWR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 563
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_coi_W_po_AMO_Coi_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=3; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_coi_W_po_AMO_Coi_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=3; 0:x11=1; ]}
[]
synth ppo by litmus test 564
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_po_loc_W_PodWR_Rmw_PosWW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'W_po_AMO_po_loc_W_PodWR_Rmw_PosWW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
[]
synth ppo by litmus test 565
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_ctrl_AMO_PodWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_R_ctrl_AMO_PodWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
synth ppo by litmus test 566
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_po_W_Rfi_PodRW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=2; , 0:x7=2; 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_po_W_Rfi_PodRW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=2; , 0:x7=2; 1:x9=2; 0:x10=1; ]}
[]
synth ppo by litmus test 567
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_addr_W_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_addr_W_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
synth ppo by litmus test 568
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_W_po_AMO_PodWW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_W_po_AMO_PodWW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
synth ppo by litmus test 569
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_W_po_AMO_PosWW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=3; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_W_po_AMO_PosWW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=3; 0:x11=1; ]}
[]
synth ppo by litmus test 570
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_W_po_AQ_PodWW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_W_po_AQ_PodWW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
synth ppo by litmus test 571
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_W_rfi_AQ_PodWW_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; 0:x11=2; , 0:x9=1; 1:x9=1; 0:x11=3; , 0:x9=1; 1:x9=2; 0:x11=2; , 0:x9=3; 1:x9=1; 0:x11=2; , 0:x9=3; 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'W_po_W_rfi_AQ_PodWW_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; 0:x11=2; , 0:x9=1; 1:x9=1; 0:x11=3; , 0:x9=1; 1:x9=2; 0:x11=2; , 0:x9=3; 1:x9=1; 0:x11=2; , 0:x9=3; 1:x9=2; 0:x11=2; ]}
[]
synth ppo by litmus test 572
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_coi_W_PodWRPAq_Rmw_Coi_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'W_po_AQ_coi_W_PodWRPAq_Rmw_Coi_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
[]
synth ppo by litmus test 573
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_addr_W_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=2; , 0:x7=2; 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_addr_W_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=2; , 0:x7=2; 1:x9=2; 0:x12=1; ]}
[]
synth ppo by litmus test 574
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_po_W_PosWR_PodRW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_po_W_PosWR_PodRW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
[]
synth ppo by litmus test 575
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_data_W_PodWR_DpDatadW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_data_W_PodWR_DpDatadW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 576
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_po_loc_W_PodWR_PosRW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_po_loc_W_PodWR_PosRW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
[]
synth ppo by litmus test 577
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_R_ctrl_AMO_PosWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_R_ctrl_AMO_PosWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 578
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_po_W_PodWR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_po_W_PodWR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
synth ppo by litmus test 579
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_ctrl_W_PosWR_DpCtrldW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_ctrl_W_PosWR_DpCtrldW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
[]
synth ppo by litmus test 580
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_R_ctrl_AMO_Rfi_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_rfi_R_ctrl_AMO_Rfi_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 581
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_po_loc_W_PodWRPAq_Rmw_PosWW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'W_po_AQ_po_loc_W_PodWRPAq_Rmw_PosWW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
[]
synth ppo by litmus test 582
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_po_loc_AMO_PodWR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_R_po_loc_AMO_PodWR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 583
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_po_AQ_PodWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_R_po_AQ_PodWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
synth ppo by litmus test 584
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_R_po_AQ_PosWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_R_po_AQ_PosWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 585
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_fri_W_PodWR_Fri_Coe_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; 0:x10=1; , 0:x7=0; 1:x9=1; 0:x10=2; , 0:x7=2; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_fri_W_PodWR_Fri_Coe_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; 0:x10=1; , 0:x7=0; 1:x9=1; 0:x10=2; , 0:x7=2; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=2; 0:x10=1; ]}
[]
synth ppo by litmus test 586
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_po_loc_R_PodWRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_AQ_po_loc_R_PodWRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 587
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_W_po_AQ_PosWW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=3; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_W_po_AQ_PosWW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=3; 0:x11=1; ]}
[]
synth ppo by litmus test 588
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_addr_W_PodWR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_addr_W_PodWR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
[]
synth ppo by litmus test 589
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_po_W_PodWR_PodRW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_po_W_PodWR_PodRW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 590
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_data_W_Rfi_DpDatadW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=2; , 0:x7=2; 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_data_W_Rfi_DpDatadW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=2; , 0:x7=2; 1:x9=2; 0:x10=1; ]}
[]
synth ppo by litmus test 591
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_R_po_AMO_PosWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_R_po_AMO_PosWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 592
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_W_po_loc_AQ_PodWW_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'W_po_W_po_loc_AQ_PodWW_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
[]
synth ppo by litmus test 593
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_ctrl_W_Rfi_DpCtrldW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=2; , 0:x7=2; 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_ctrl_W_Rfi_DpCtrldW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=2; , 0:x7=2; 1:x9=2; 0:x10=1; ]}
[]
synth ppo by litmus test 594
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_R_ctrl_AQ_PosWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_R_ctrl_AQ_PosWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 595
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=2; , 0:x7=2; 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=2; , 0:x7=2; 1:x9=2; 0:x12=1; ]}
[]
synth ppo by litmus test 596
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
synth ppo by litmus test 597
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_W_po_loc_XLr_PodWW_PosWR_Fre_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; 0:x10=1; , 0:x9=1; 1:x9=1; 0:x10=2; , 0:x9=1; 1:x9=2; 0:x10=1; , 0:x9=2; 1:x9=1; 0:x10=2; , 0:x9=2; 1:x9=2; 0:x10=2; ]}
now_herd_logs_ppo_remove {'W_po_W_po_loc_XLr_PodWW_PosWR_Fre_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; 0:x10=1; , 0:x9=1; 1:x9=1; 0:x10=2; , 0:x9=1; 1:x9=2; 0:x10=1; , 0:x9=2; 1:x9=1; 0:x10=2; , 0:x9=2; 1:x9=2; 0:x10=2; ]}
[]
synth ppo by litmus test 598
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_coi_W_po_AQ_Coi_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=3; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_coi_W_po_AQ_Coi_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=3; 0:x11=1; ]}
[]
synth ppo by litmus test 599
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_R_po_AQ_Rfi_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_rfi_R_po_AQ_Rfi_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 600
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_R_po_AMO_Rfi_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_rfi_R_po_AMO_Rfi_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 601
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_ctrl_AQ_PodWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_R_ctrl_AQ_PodWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
synth ppo by litmus test 602
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_W_rfi_XLr_PodWW_Rfi_Fre_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; 0:x10=1; , 0:x9=1; 1:x9=1; 0:x10=2; , 0:x9=1; 1:x9=2; 0:x10=1; , 0:x9=2; 1:x9=1; 0:x10=2; , 0:x9=2; 1:x9=2; 0:x10=2; ]}
now_herd_logs_ppo_remove {'W_po_W_rfi_XLr_PodWW_Rfi_Fre_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; 0:x10=1; , 0:x9=1; 1:x9=1; 0:x10=2; , 0:x9=1; 1:x9=2; 0:x10=1; , 0:x9=2; 1:x9=1; 0:x10=2; , 0:x9=2; 1:x9=2; 0:x10=2; ]}
[]
synth ppo by litmus test 603
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_po_W_PodWRPAq_Rmw_PodWW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_AQ_po_W_PodWRPAq_Rmw_PodWW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
synth ppo by litmus test 604
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_AMO_po_W_PosWR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=3; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_AMO_po_W_PosWR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=3; 0:x11=1; ]}
[]
synth ppo by litmus test 605
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_po_loc_AQ_PodWR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_R_po_loc_AQ_PodWR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 606
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_W_po_loc_AMO_PodWW_PosWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'W_po_W_po_loc_AMO_PodWW_PosWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
[]
synth ppo by litmus test 607
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_coi_W_po_loc_XLr_Rmw_CoiRlP_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'RL_coi_W_po_loc_XLr_Rmw_CoiRlP_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
synth ppo by litmus test 608
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_W_po_loc_XLr_Rmw_PosWW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_W_po_loc_XLr_Rmw_PosWW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
synth ppo by litmus test 609
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_coi_W_rfi_XLr_Rmw_Coi_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_coi_W_rfi_XLr_Rmw_Coi_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
[]
synth ppo by litmus test 610
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_W_rfi_XLr_Rmw_PosWW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_W_rfi_XLr_Rmw_PosWW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
[]
synth ppo by litmus test 611
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_fri_W_po_loc_XLr_Fri_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_fri_W_po_loc_XLr_Fri_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
synth ppo by litmus test 612
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_fri_W_rfi_XLr_Fri_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_fri_W_rfi_XLr_Fri_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
[]
synth ppo by litmus test 613
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_coi_W_rfi_XLr_Rmw_CoiRlP_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
now_herd_logs_ppo_remove {'RL_coi_W_rfi_XLr_Rmw_CoiRlP_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
[]
synth ppo by litmus test 614
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_W_po_loc_XLr_Rmw_PosWWRlP_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_W_po_loc_XLr_Rmw_PosWWRlP_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
synth ppo by litmus test 615
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_coi_W_po_loc_XLr_Rmw_Coi_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_coi_W_po_loc_XLr_Rmw_Coi_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
synth ppo by litmus test 616
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_W_rfi_XLr_Rmw_PosWWRlP_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_W_rfi_XLr_Rmw_PosWWRlP_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
[]
synth ppo by litmus test 617
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_W_rfi_XLr_PosRW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_W_rfi_XLr_PosRW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
[]
synth ppo by litmus test 618
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_W_po_loc_XLr_PosRW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_W_po_loc_XLr_PosRW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
synth ppo by litmus test 619
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_W_rfi_XLr_PosWW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x8=1; 1:x9=1; 0:x13=1; , 0:x8=3; 1:x9=1; 0:x13=1; , 0:x8=3; 1:x9=1; 0:x13=2; , 0:x8=3; 1:x9=2; 0:x13=1; , 0:x8=3; 1:x9=3; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_W_rfi_XLr_PosWW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x8=1; 1:x9=1; 0:x13=1; , 0:x8=3; 1:x9=1; 0:x13=1; , 0:x8=3; 1:x9=1; 0:x13=2; , 0:x8=3; 1:x9=2; 0:x13=1; , 0:x8=3; 1:x9=3; 0:x13=1; ]}
[]
synth ppo by litmus test 620
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_W_po_loc_XLr_PosWW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; , 1:x9=3; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_W_po_loc_XLr_PosWW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; , 1:x9=3; 0:x13=1; ]}
[]
synth ppo by litmus test 621
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_R_po_loc_XLr_PosWR_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_R_po_loc_XLr_PosWR_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
[]
synth ppo by litmus test 622
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_po_loc_R_Rfi_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=2; , 0:x7=2; 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_po_loc_R_Rfi_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=2; , 0:x7=2; 1:x9=2; 0:x13=1; ]}
[]
synth ppo by litmus test 623
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_po_loc_R_PosWR_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_po_loc_R_PosWR_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
[]
synth ppo by litmus test 624
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_R_po_loc_XLr_Rfi_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=2; , 0:x7=2; 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_rfi_R_po_loc_XLr_Rfi_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=2; , 0:x7=2; 1:x9=2; 0:x13=1; ]}
[]
synth ppo by litmus test 625
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_coi_W_po_loc_XLr_Coi_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; , 1:x9=3; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_coi_W_po_loc_XLr_Coi_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; , 1:x9=3; 0:x13=1; ]}
[]
synth ppo by litmus test 626
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_coi_W_rfi_XLr_Coi_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x8=1; 1:x9=1; 0:x13=1; , 0:x8=3; 1:x9=1; 0:x13=1; , 0:x8=3; 1:x9=1; 0:x13=2; , 0:x8=3; 1:x9=2; 0:x13=1; , 0:x8=3; 1:x9=3; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_coi_W_rfi_XLr_Coi_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x8=1; 1:x9=1; 0:x13=1; , 0:x8=3; 1:x9=1; 0:x13=1; , 0:x8=3; 1:x9=1; 0:x13=2; , 0:x8=3; 1:x9=2; 0:x13=1; , 0:x8=3; 1:x9=3; 0:x13=1; ]}
[]
synth ppo by litmus test 627
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+data+poxp': [0:x5=0; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+data+poxp': [0:x5=0; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; [y]=1; ]}
[]
synth ppo by litmus test 628
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+ctrl+popx': [0:x5=0; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=0; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=1; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; ]}
now_herd_logs_ppo_remove {'LB+ctrl+popx': [0:x5=0; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=0; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=1; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; ]}
[]
synth ppo by litmus test 629
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxp+fence.tso': [0:x7=0; 0:x8=0; 1:x7=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; [x]=0; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxp+fence.tso': [0:x7=0; 0:x8=0; 1:x7=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; [x]=0; [y]=2; ]}
[]
synth ppo by litmus test 630
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsopx+fence.tso': [0:x8=0; 0:x9=0; 1:x7=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=1; [y]=2; , 0:x8=2; 0:x9=0; 1:x7=0; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsopx+fence.tso': [0:x8=0; 0:x9=0; 1:x7=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=1; [y]=2; , 0:x8=2; 0:x9=0; 1:x7=0; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 631
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+addr+popx': [0:x5=0; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=0; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=1; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; ]}
now_herd_logs_ppo_remove {'LB+addr+popx': [0:x5=0; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=0; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=1; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; ]}
[]
synth ppo by litmus test 632
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+addr+poxp': [0:x5=0; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+addr+poxp': [0:x5=0; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; [y]=1; ]}
[]
synth ppo by litmus test 633
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+ctrl+poxp': [0:x5=0; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+ctrl+poxp': [0:x5=0; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; [y]=1; ]}
[]
synth ppo by litmus test 634
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tso+fence.tsopx': [0:x7=0; 1:x8=1; 1:x9=0; [x]=1; , 0:x7=0; 1:x8=1; 1:x9=1; [x]=1; , 0:x7=1; 1:x8=0; 1:x9=0; [x]=1; , 0:x7=1; 1:x8=0; 1:x9=1; [x]=1; , 0:x7=1; 1:x8=1; 1:x9=0; [x]=1; , 0:x7=1; 1:x8=1; 1:x9=1; [x]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tso+fence.tsopx': [0:x7=0; 1:x8=1; 1:x9=0; [x]=1; , 0:x7=0; 1:x8=1; 1:x9=1; [x]=1; , 0:x7=1; 1:x8=0; 1:x9=0; [x]=1; , 0:x7=1; 1:x8=0; 1:x9=1; [x]=1; , 0:x7=1; 1:x8=1; 1:x9=0; [x]=1; , 0:x7=1; 1:x8=1; 1:x9=1; [x]=1; ]}
[]
synth ppo by litmus test 635
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tso+fence.tsoxp': [0:x7=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tso+fence.tsoxp': [0:x7=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; ]}
[]
synth ppo by litmus test 636
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.tso+fence.tsopx': [1:x9=0; 1:x10=0; [x]=2; [y]=1; , 1:x9=0; 1:x10=1; [x]=2; [y]=1; , 1:x9=2; 1:x10=0; [x]=1; [y]=1; , 1:x9=2; 1:x10=0; [x]=1; [y]=2; , 1:x9=2; 1:x10=1; [x]=2; [y]=1; , 1:x9=2; 1:x10=1; [x]=2; [y]=2; ]}
now_herd_logs_ppo_remove {'2+2W+fence.tso+fence.tsopx': [1:x9=0; 1:x10=0; [x]=2; [y]=1; , 1:x9=0; 1:x10=1; [x]=2; [y]=1; , 1:x9=2; 1:x10=0; [x]=1; [y]=1; , 1:x9=2; 1:x10=0; [x]=1; [y]=2; , 1:x9=2; 1:x10=1; [x]=2; [y]=1; , 1:x9=2; 1:x10=1; [x]=2; [y]=2; ]}
[]
synth ppo by litmus test 637
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+data+popx': [0:x5=0; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=0; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=1; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; ]}
now_herd_logs_ppo_remove {'LB+data+popx': [0:x5=0; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=0; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=1; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; ]}
[]
synth ppo by litmus test 638
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tso+fence.tsopx': [1:x8=0; 1:x9=0; [x]=1; [y]=1; , 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 1:x8=1; 1:x9=1; [x]=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tso+fence.tsopx': [1:x8=0; 1:x9=0; [x]=1; [y]=1; , 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 1:x8=1; 1:x9=1; [x]=1; [y]=2; ]}
[]
synth ppo by litmus test 639
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_rmw_XSc_po_XLr_PosRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; 0:x10=0; , 0:x5=0; 0:x8=0; 0:x10=1; , 0:x5=0; 0:x8=1; 0:x10=0; , 0:x5=0; 0:x8=1; 0:x10=1; , 0:x5=1; 0:x8=1; 0:x10=0; , 0:x5=1; 0:x8=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_rmw_XSc_po_XLr_PosRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; 0:x10=0; , 0:x5=0; 0:x8=0; 0:x10=1; , 0:x5=0; 0:x8=1; 0:x10=0; , 0:x5=0; 0:x8=1; 0:x10=1; , 0:x5=1; 0:x8=1; 0:x10=0; , 0:x5=1; 0:x8=1; 0:x10=1; ]}
[]
synth ppo by litmus test 640
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_po_XLr_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_po_XLr_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 641
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_po_loc_XLr_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_po_loc_XLr_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 642
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_AMO_po_XLr_Rmw_PosWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_AMO_po_XLr_Rmw_PosWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 643
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_po_XLr_Rmw_PodWRRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_po_XLr_Rmw_PodWRRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 644
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_addr_XLr_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_addr_XLr_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 645
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_XLr_po_XLr_Rmw_Rfi_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_XLr_po_XLr_Rmw_Rfi_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
synth ppo by litmus test 646
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_po_XLr_Rmw_PodWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_po_XLr_Rmw_PodWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 647
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'ISA-MP-DEP-SUCCESS-SWAP-SIMPLE': [1:x3=0; 1:x4=0; 1:x5=0; , 1:x3=0; 1:x4=0; 1:x5=2; , 1:x3=0; 1:x4=1; 1:x5=0; , 1:x3=0; 1:x4=1; 1:x5=2; , 1:x3=1; 1:x4=0; 1:x5=2; , 1:x3=1; 1:x4=1; 1:x5=2; ]}
now_herd_logs_ppo_remove {'ISA-MP-DEP-SUCCESS-SWAP-SIMPLE': [1:x3=0; 1:x4=0; 1:x5=0; , 1:x3=0; 1:x4=0; 1:x5=2; , 1:x3=0; 1:x4=1; 1:x5=0; , 1:x3=0; 1:x4=1; 1:x5=2; , 1:x3=1; 1:x4=0; 1:x5=2; , 1:x3=1; 1:x4=1; 1:x5=2; ]}
[]
synth ppo by litmus test 648
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_XLr_ctrl_XLr_Rmw_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_XLr_ctrl_XLr_Rmw_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
synth ppo by litmus test 649
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_XLr_po_XLr_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_XLr_po_XLr_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
synth ppo by litmus test 650
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_AMO_po_XLr_Rmw_PosWRRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_AMO_po_XLr_Rmw_PosWRRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 651
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_po_XLr_PodRRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_po_XLr_PodRRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 652
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_XLr_ctrl_XLr_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_XLr_ctrl_XLr_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 653
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_AMO_po_XLr_Rmw_Rfi_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x10=1; , 0:x6=0; 0:x8=2; 0:x10=0; , 0:x6=0; 0:x8=2; 0:x10=1; , 0:x6=1; 0:x8=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_AMO_po_XLr_Rmw_Rfi_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x10=1; , 0:x6=0; 0:x8=2; 0:x10=0; , 0:x6=0; 0:x8=2; 0:x10=1; , 0:x6=1; 0:x8=2; 0:x10=1; ]}
[]
synth ppo by litmus test 654
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_po_loc_XLr_Rmw_PodWR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_po_loc_XLr_Rmw_PodWR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 655
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_XLr_ctrl_XLr_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_XLr_ctrl_XLr_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 656
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_ctrl_XLr_Rmw_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_ctrl_XLr_Rmw_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 657
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_po_XLr_Rmw_PodWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_po_XLr_Rmw_PodWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 658
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_ctrl_XLr_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_ctrl_XLr_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 659
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_ctrl_XLr_Rmw_PodWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_ctrl_XLr_Rmw_PodWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 660
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_XLr_po_XLr_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_XLr_po_XLr_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 661
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_XLr_ctrl_XLr_Rmw_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_XLr_ctrl_XLr_Rmw_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 662
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_XLr_ctrl_XLr_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_XLr_ctrl_XLr_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
synth ppo by litmus test 663
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_XLr_po_XLr_Rmw_PosWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_XLr_po_XLr_Rmw_PosWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 664
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_AMO_po_XLr_DpCtrldR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_AMO_po_XLr_DpCtrldR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 665
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_AMO_po_XLr_PosRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_AMO_po_XLr_PosRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 666
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_po_XLr_PodRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_po_XLr_PodRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 667
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_XLr_ctrl_XLr_Rmw_RfiRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_XLr_ctrl_XLr_Rmw_RfiRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
synth ppo by litmus test 668
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_AMO_po_XLr_Rmw_RfiRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x10=1; , 0:x6=0; 0:x8=2; 0:x10=0; , 0:x6=0; 0:x8=2; 0:x10=1; , 0:x6=1; 0:x8=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_AMO_po_XLr_Rmw_RfiRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x10=1; , 0:x6=0; 0:x8=2; 0:x10=0; , 0:x6=0; 0:x8=2; 0:x10=1; , 0:x6=1; 0:x8=2; 0:x10=1; ]}
[]
synth ppo by litmus test 669
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_XLr_po_XLr_Rmw_RfiRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_XLr_po_XLr_Rmw_RfiRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
synth ppo by litmus test 670
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_po_XLr_Rmw_PodWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_po_XLr_Rmw_PodWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 671
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_XLr_addr_XLr_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_XLr_addr_XLr_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
synth ppo by litmus test 672
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_XLr_po_XLr_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_XLr_po_XLr_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 673
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_po_XLr_Rmw_PodWRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_po_XLr_Rmw_PodWRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 674
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_addr_XLr_Rmw_PodWRRlP_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_addr_XLr_Rmw_PodWRRlP_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 675
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_addr_XLr_Rmw_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_addr_XLr_Rmw_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
synth ppo by litmus test 676
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_po_loc_XLr_Rmw_PodWRRlP_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_po_loc_XLr_Rmw_PodWRRlP_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
synth ppo by litmus test 677
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_XLr_po_XLr_Rmw_PosWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_XLr_po_XLr_Rmw_PosWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 678
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_XLr_ctrl_XLr_Rmw_PosWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_XLr_ctrl_XLr_Rmw_PosWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
synth ppo by litmus test 679
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_XLr_po_loc_XLr_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_XLr_po_loc_XLr_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
synth ppo by litmus test 680
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+addr+addrpx-poxp+VAR2': [0:x5=0; 1:x5=0; 1:x11=0; , 0:x5=0; 1:x5=0; 1:x11=1; , 0:x5=0; 1:x5=1; 1:x11=0; , 0:x5=0; 1:x5=1; 1:x11=1; , 0:x5=1; 1:x5=0; 1:x11=0; , 0:x5=1; 1:x5=0; 1:x11=1; ]}
now_herd_logs_ppo_remove {'LB+addr+addrpx-poxp+VAR2': [0:x5=0; 1:x5=0; 1:x11=0; , 0:x5=0; 1:x5=0; 1:x11=1; , 0:x5=0; 1:x5=1; 1:x11=0; , 0:x5=0; 1:x5=1; 1:x11=1; , 0:x5=1; 1:x5=0; 1:x11=0; , 0:x5=1; 1:x5=0; 1:x11=1; ]}
[]
synth ppo by litmus test 681
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+data+datapx-dataxp': [0:x5=0; 1:x5=0; 1:x10=0; [z]=1; , 0:x5=0; 1:x5=0; 1:x10=1; [z]=0; , 0:x5=0; 1:x5=1; 1:x10=0; [z]=1; , 0:x5=0; 1:x5=1; 1:x10=1; [z]=0; , 0:x5=1; 1:x5=0; 1:x10=0; [z]=1; , 0:x5=1; 1:x5=0; 1:x10=1; [z]=0; ]}
now_herd_logs_ppo_remove {'LB+data+datapx-dataxp': [0:x5=0; 1:x5=0; 1:x10=0; [z]=1; , 0:x5=0; 1:x5=0; 1:x10=1; [z]=0; , 0:x5=0; 1:x5=1; 1:x10=0; [z]=1; , 0:x5=0; 1:x5=1; 1:x10=1; [z]=0; , 0:x5=1; 1:x5=0; 1:x10=0; [z]=1; , 0:x5=1; 1:x5=0; 1:x10=1; [z]=0; ]}
[]
synth ppo by litmus test 682
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_rfi_AQ_Rmw_PodWR_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_rfi_AQ_Rmw_PodWR_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
[]
synth ppo by litmus test 683
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_rfi_AQ_PodRRPAq_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_rfi_AQ_PodRRPAq_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
[]
synth ppo by litmus test 684
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_po_loc_AMO_Rmw_PodWR_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=2; , 0:x6=0; 0:x13=3; , 0:x6=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_po_loc_AMO_Rmw_PodWR_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=2; , 0:x6=0; 0:x13=3; , 0:x6=1; 0:x13=2; ]}
[]
synth ppo by litmus test 685
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_po_loc_AQ_PodRR_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_po_loc_AQ_PodRR_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
[]
synth ppo by litmus test 686
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_po_AQ_Rmw_PodWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_po_AQ_Rmw_PodWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
synth ppo by litmus test 687
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_XLr_po_AQ_Rmw_Rfi_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_XLr_po_AQ_Rmw_Rfi_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
[]
synth ppo by litmus test 688
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_po_AMO_Rmw_PodWRRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_po_AMO_Rmw_PodWRRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
synth ppo by litmus test 689
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_po_loc_AMO_PodRR_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_po_loc_AMO_PodRR_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
[]
synth ppo by litmus test 690
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_rfi_AQ_PodRR_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_rfi_AQ_PodRR_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
[]
synth ppo by litmus test 691
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_rfi_XLr_PodRRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_rfi_XLr_PodRRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 692
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_po_AQ_Rmw_PodWR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_po_AQ_Rmw_PodWR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
synth ppo by litmus test 693
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_po_AQ_PodRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_po_AQ_PodRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 694
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_XLr_po_AMO_Rmw_RfiRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_XLr_po_AMO_Rmw_RfiRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
[]
synth ppo by litmus test 695
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_po_loc_AQ_Rmw_PodWRPAq_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=2; , 0:x6=0; 0:x13=3; , 0:x6=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_po_loc_AQ_Rmw_PodWRPAq_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=2; , 0:x6=0; 0:x13=3; , 0:x6=1; 0:x13=2; ]}
[]
synth ppo by litmus test 696
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_po_AMO_PodRRPAq_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_po_AMO_PodRRPAq_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
synth ppo by litmus test 697
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_rfi_AMO_Rmw_PodWR_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_rfi_AMO_Rmw_PodWR_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
[]
synth ppo by litmus test 698
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_rfi_AQ_Rmw_PodWRPAq_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_rfi_AQ_Rmw_PodWRPAq_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
[]
synth ppo by litmus test 699
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_AMO_po_AMO_Rmw_Rfi_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=2; , 0:x6=1; 0:x8=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_AMO_po_AMO_Rmw_Rfi_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=2; , 0:x6=1; 0:x8=2; 0:x13=1; ]}
[]
synth ppo by litmus test 700
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_AMO_po_AMO_Rmw_RfiRlP_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=2; , 0:x6=1; 0:x8=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_AMO_po_AMO_Rmw_RfiRlP_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=2; , 0:x6=1; 0:x8=2; 0:x13=1; ]}
[]
synth ppo by litmus test 701
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_XLr_po_AQ_Rmw_PosWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_XLr_po_AQ_Rmw_PosWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 702
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_ctrl_AMO_Rmw_PodWRRlP_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_ctrl_AMO_Rmw_PodWRRlP_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
synth ppo by litmus test 703
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_rfi_AQ_Rmw_PodWRRlP_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_rfi_AQ_Rmw_PodWRRlP_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
[]
synth ppo by litmus test 704
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_ctrl_AQ_Rmw_PodWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_ctrl_AQ_Rmw_PodWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
synth ppo by litmus test 705
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_po_loc_XLr_Rmw_PodWR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_po_loc_XLr_Rmw_PodWR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
synth ppo by litmus test 706
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_XLr_po_AMO_Rmw_Rfi_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_XLr_po_AMO_Rmw_Rfi_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
[]
synth ppo by litmus test 707
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_po_loc_XLr_PodRRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_po_loc_XLr_PodRRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 708
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_po_loc_AQ_Rmw_PodWR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_po_loc_AQ_Rmw_PodWR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 709
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_po_AMO_Rmw_PodWRRlP_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_po_AMO_Rmw_PodWRRlP_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
synth ppo by litmus test 710
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_AMO_po_AQ_Rmw_Rfi_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=2; , 0:x6=1; 0:x8=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_AMO_po_AQ_Rmw_Rfi_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=2; , 0:x6=1; 0:x8=2; 0:x13=1; ]}
[]
synth ppo by litmus test 711
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_po_loc_AQ_Rmw_PodWR_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=2; , 0:x6=0; 0:x13=3; , 0:x6=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_po_loc_AQ_Rmw_PodWR_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=2; , 0:x6=0; 0:x13=3; , 0:x6=1; 0:x13=2; ]}
[]
synth ppo by litmus test 712
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_XLr_po_AQ_Rmw_RfiRlP_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_XLr_po_AQ_Rmw_RfiRlP_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
[]
synth ppo by litmus test 713
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_rfi_XLr_PodRR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_rfi_XLr_PodRR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 714
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_po_loc_AMO_Rmw_PodWRRlP_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_po_loc_AMO_Rmw_PodWRRlP_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 715
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_po_loc_AQ_PodRR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_po_loc_AQ_PodRR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 716
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_po_loc_XLr_Rmw_PodWRRlP_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_po_loc_XLr_Rmw_PodWRRlP_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
synth ppo by litmus test 717
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_rmw_XSc_Rmw_PodWRRlP_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=0; , 0:x6=0; 0:x11=2; 0:x12=0; , 0:x6=0; 0:x11=2; 0:x12=1; , 0:x6=1; 0:x11=1; 0:x12=0; , 0:x6=1; 0:x11=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_rmw_XSc_Rmw_PodWRRlP_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=0; , 0:x6=0; 0:x11=2; 0:x12=0; , 0:x6=0; 0:x11=2; 0:x12=1; , 0:x6=1; 0:x11=1; 0:x12=0; , 0:x6=1; 0:x11=2; 0:x12=1; ]}
[]
synth ppo by litmus test 718
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_rmw_XSc_po_AMO_PosRW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; 0:x12=0; , 0:x5=0; 0:x11=1; 0:x12=1; , 0:x5=0; 0:x11=2; 0:x12=0; , 0:x5=0; 0:x11=2; 0:x12=1; , 0:x5=1; 0:x11=1; 0:x12=0; , 0:x5=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_rmw_XSc_po_AMO_PosRW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; 0:x12=0; , 0:x5=0; 0:x11=1; 0:x12=1; , 0:x5=0; 0:x11=2; 0:x12=0; , 0:x5=0; 0:x11=2; 0:x12=1; , 0:x5=1; 0:x11=1; 0:x12=0; , 0:x5=1; 0:x11=1; 0:x12=1; ]}
[]
synth ppo by litmus test 719
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_AMO_po_AMO_PosRR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_AMO_po_AMO_PosRR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 720
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_rfi_AMO_Rmw_PodWRPAq_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_rfi_AMO_Rmw_PodWRPAq_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
[]
synth ppo by litmus test 721
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_ctrl_AQ_PodRR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_ctrl_AQ_PodRR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 722
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_po_AQ_PodRRPAq_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_po_AQ_PodRRPAq_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
synth ppo by litmus test 723
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_po_AMO_Rmw_PodWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_po_AMO_Rmw_PodWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
synth ppo by litmus test 724
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_XLr_po_AMO_Rmw_PosWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_XLr_po_AMO_Rmw_PosWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 725
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_AMO_po_AMO_Rmw_PosWR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_AMO_po_AMO_Rmw_PosWR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
synth ppo by litmus test 726
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_po_loc_XLr_PodRR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_po_loc_XLr_PodRR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 727
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_ctrl_AMO_PodRR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_ctrl_AMO_PodRR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 728
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_rfi_AMO_PodRR_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_rfi_AMO_PodRR_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
[]
synth ppo by litmus test 729
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_po_loc_XLr_Rmw_PodWRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_po_loc_XLr_Rmw_PodWRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
synth ppo by litmus test 730
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'ISA-MP-DEP-SUCCESS-SWAP': [1:x2=0; 1:x4=0; 1:x5=0; , 1:x2=0; 1:x4=0; 1:x5=2; , 1:x2=0; 1:x4=1; 1:x5=0; , 1:x2=0; 1:x4=1; 1:x5=2; , 1:x2=1; 1:x4=0; 1:x5=2; , 1:x2=1; 1:x4=1; 1:x5=2; ]}
now_herd_logs_ppo_remove {'ISA-MP-DEP-SUCCESS-SWAP': [1:x2=0; 1:x4=0; 1:x5=0; , 1:x2=0; 1:x4=0; 1:x5=2; , 1:x2=0; 1:x4=1; 1:x5=0; , 1:x2=0; 1:x4=1; 1:x5=2; , 1:x2=1; 1:x4=0; 1:x5=2; , 1:x2=1; 1:x4=1; 1:x5=2; ]}
[]
synth ppo by litmus test 731
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_AMO_po_AMO_Rmw_PosWRRlP_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_AMO_po_AMO_Rmw_PosWRRlP_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
synth ppo by litmus test 732
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_po_loc_AMO_Rmw_PodWRPAq_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=2; , 0:x6=0; 0:x13=3; , 0:x6=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_po_loc_AMO_Rmw_PodWRPAq_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=2; , 0:x6=0; 0:x13=3; , 0:x6=1; 0:x13=2; ]}
[]
synth ppo by litmus test 733
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_ctrl_AMO_Rmw_PodWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_ctrl_AMO_Rmw_PodWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
synth ppo by litmus test 734
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_rfi_XLr_Rmw_PodWR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_rfi_XLr_Rmw_PodWR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
synth ppo by litmus test 735
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_XLr_po_AQ_PosRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_XLr_po_AQ_PosRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 736
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_AMO_po_AQ_Rmw_PosWR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_AMO_po_AQ_Rmw_PosWR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
synth ppo by litmus test 737
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_rmw_XSc_PodRR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=0; , 0:x5=0; 0:x10=2; 0:x11=0; , 0:x5=0; 0:x10=2; 0:x11=1; , 0:x5=1; 0:x10=1; 0:x11=0; , 0:x5=1; 0:x10=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_rmw_XSc_PodRR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=0; , 0:x5=0; 0:x10=2; 0:x11=0; , 0:x5=0; 0:x10=2; 0:x11=1; , 0:x5=1; 0:x10=1; 0:x11=0; , 0:x5=1; 0:x10=2; 0:x11=1; ]}
[]
synth ppo by litmus test 738
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_rmw_XSc_Rmw_PodWR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=0; , 0:x6=0; 0:x11=2; 0:x12=0; , 0:x6=0; 0:x11=2; 0:x12=1; , 0:x6=1; 0:x11=1; 0:x12=0; , 0:x6=1; 0:x11=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_rmw_XSc_Rmw_PodWR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=0; , 0:x6=0; 0:x11=2; 0:x12=0; , 0:x6=0; 0:x11=2; 0:x12=1; , 0:x6=1; 0:x11=1; 0:x12=0; , 0:x6=1; 0:x11=2; 0:x12=1; ]}
[]
synth ppo by litmus test 739
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_po_loc_AMO_PodRR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_po_loc_AMO_PodRR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 740
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_po_AQ_Rmw_PodWRPAq_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_po_AQ_Rmw_PodWRPAq_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
synth ppo by litmus test 741
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_po_AMO_PodRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_po_AMO_PodRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 742
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_AMO_po_AQ_Rmw_RfiRlP_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=2; , 0:x6=1; 0:x8=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_AMO_po_AQ_Rmw_RfiRlP_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=2; , 0:x6=1; 0:x8=2; 0:x13=1; ]}
[]
synth ppo by litmus test 743
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_po_AMO_Rmw_PodWR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_po_AMO_Rmw_PodWR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
synth ppo by litmus test 744
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_rfi_XLr_Rmw_PodWRRlP_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_rfi_XLr_Rmw_PodWRRlP_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
synth ppo by litmus test 745
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_AMO_po_AQ_PosRR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_AMO_po_AQ_PosRR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
synth ppo by litmus test 746
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_rfi_AMO_Rmw_PodWRRlP_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_rfi_AMO_Rmw_PodWRRlP_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
[]
synth ppo by litmus test 747
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_XLr_po_AMO_Rmw_PosWRRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_XLr_po_AMO_Rmw_PosWRRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 748
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_po_AMO_Rmw_PodWRPAq_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_po_AMO_Rmw_PodWRPAq_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
synth ppo by litmus test 749
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_po_AMO_PodRR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_po_AMO_PodRR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
synth ppo by litmus test 750
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_po_loc_AQ_PodRRPAq_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_po_loc_AQ_PodRRPAq_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
[]
synth ppo by litmus test 751
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_po_loc_AMO_Rmw_PodWR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_po_loc_AMO_Rmw_PodWR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
synth ppo by litmus test 752
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_rfi_AMO_PodRRPAq_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_rfi_AMO_PodRRPAq_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
[]
synth ppo by litmus test 753
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_rmw_XSc_po_AQ_PosRW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; 0:x12=0; , 0:x5=0; 0:x11=1; 0:x12=1; , 0:x5=0; 0:x11=2; 0:x12=0; , 0:x5=0; 0:x11=2; 0:x12=1; , 0:x5=1; 0:x11=1; 0:x12=0; , 0:x5=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_rmw_XSc_po_AQ_PosRW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; 0:x12=0; , 0:x5=0; 0:x11=1; 0:x12=1; , 0:x5=0; 0:x11=2; 0:x12=0; , 0:x5=0; 0:x11=2; 0:x12=1; , 0:x5=1; 0:x11=1; 0:x12=0; , 0:x5=1; 0:x11=1; 0:x12=1; ]}
[]
synth ppo by litmus test 754
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_rfi_XLr_Rmw_PodWRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_rfi_XLr_Rmw_PodWRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
synth ppo by litmus test 755
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_po_loc_AMO_PodRRPAq_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_po_loc_AMO_PodRRPAq_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
[]
synth ppo by litmus test 756
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_XLr_po_AMO_PosRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_XLr_po_AMO_PosRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
synth ppo by litmus test 757
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_po_AQ_PodRR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_po_AQ_PodRR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
synth ppo by litmus test 758
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_po_loc_AMO_Rmw_PodWRRlP_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=2; , 0:x6=0; 0:x13=3; , 0:x6=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_po_loc_AMO_Rmw_PodWRRlP_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=2; , 0:x6=0; 0:x13=3; , 0:x6=1; 0:x13=2; ]}
[]
synth ppo by litmus test 759
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_addr_XLr_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_addr_XLr_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
synth ppo by litmus test 760
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_ctrl_XLr_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_ctrl_XLr_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
[]
synth ppo by litmus test 761
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_po_XLr_PodWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_XLr_po_XLr_PodWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
synth ppo by litmus test 762
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_po_XLr_Rfi_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_po_XLr_Rfi_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
[]
synth ppo by litmus test 763
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_ctrl_XLr_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_ctrl_XLr_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
[]
synth ppo by litmus test 764
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_po_XLr_PosWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_po_XLr_PosWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
[]
synth ppo by litmus test 765
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_po_loc_XLr_PodWR_PosRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_XLr_po_loc_XLr_PodWR_PosRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
synth ppo by litmus test 766
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_ctrl_XLr_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_XLr_ctrl_XLr_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
synth ppo by litmus test 767
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_AMO_po_XLr_Rfi_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=1; 0:x9=1; 1:x9=3; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; , 0:x7=2; 0:x9=1; 1:x9=3; ]}
now_herd_logs_ppo_remove {'W_rfi_AMO_po_XLr_Rfi_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=1; 0:x9=1; 1:x9=3; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; , 0:x7=2; 0:x9=1; 1:x9=3; ]}
[]
synth ppo by litmus test 768
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_AMO_po_XLr_PosWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=1; 1:x9=3; ]}
now_herd_logs_ppo_remove {'W_po_loc_AMO_po_XLr_PosWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=1; 1:x9=3; ]}
[]
synth ppo by litmus test 769
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_addr_XLr_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_addr_XLr_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
synth ppo by litmus test 770
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_po_XLr_PodWRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_AQ_po_XLr_PodWRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
synth ppo by litmus test 771
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_addr_XLr_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_addr_XLr_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; ]}
[]
synth ppo by litmus test 772
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_po_XLr_PodWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_po_XLr_PodWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
synth ppo by litmus test 773
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_ctrl_AMO_Rfi_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_ctrl_AMO_Rfi_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 774
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_po_loc_AQ_PodWRPAq_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=2; , 1:x9=1; 0:x12=3; , 1:x9=2; 0:x12=2; ]}
now_herd_logs_ppo_remove {'W_po_AQ_po_loc_AQ_PodWRPAq_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=2; , 1:x9=1; 0:x12=3; , 1:x9=2; 0:x12=2; ]}
[]
synth ppo by litmus test 775
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_rfi_AQ_PodWR_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x12=2; , 1:x9=1; 0:x10=1; 0:x12=3; , 1:x9=1; 0:x10=3; 0:x12=2; , 1:x9=2; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'W_po_AMO_rfi_AQ_PodWR_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x12=2; , 1:x9=1; 0:x10=1; 0:x12=3; , 1:x9=1; 0:x10=3; 0:x12=2; , 1:x9=2; 0:x10=1; 0:x12=2; ]}
[]
synth ppo by litmus test 776
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_po_AMO_PodWR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_po_AMO_PodWR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
[]
synth ppo by litmus test 777
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_AMO_po_AQ_PosWR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; , 1:x9=3; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_AMO_po_AQ_PosWR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; , 1:x9=3; 0:x12=1; ]}
[]
synth ppo by litmus test 778
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_po_loc_XLr_PodWR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_po_loc_XLr_PodWR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 779
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_po_loc_AMO_PodWR_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=2; , 1:x9=1; 0:x12=3; , 1:x9=2; 0:x12=2; ]}
now_herd_logs_ppo_remove {'W_po_AMO_po_loc_AMO_PodWR_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=2; , 1:x9=1; 0:x12=3; , 1:x9=2; 0:x12=2; ]}
[]
synth ppo by litmus test 780
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_rfi_AMO_PodWRPAq_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x12=2; , 1:x9=1; 0:x10=1; 0:x12=3; , 1:x9=1; 0:x10=3; 0:x12=2; , 1:x9=2; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'W_po_AQ_rfi_AMO_PodWRPAq_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x12=2; , 1:x9=1; 0:x10=1; 0:x12=3; , 1:x9=1; 0:x10=3; 0:x12=2; , 1:x9=2; 0:x10=1; 0:x12=2; ]}
[]
synth ppo by litmus test 781
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_po_loc_AQ_PodWR_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=2; , 1:x9=1; 0:x12=3; , 1:x9=2; 0:x12=2; ]}
now_herd_logs_ppo_remove {'W_po_AMO_po_loc_AQ_PodWR_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=2; , 1:x9=1; 0:x12=3; , 1:x9=2; 0:x12=2; ]}
[]
synth ppo by litmus test 782
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_rfi_AQ_PodWRPAq_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x12=2; , 1:x9=1; 0:x10=1; 0:x12=3; , 1:x9=1; 0:x10=3; 0:x12=2; , 1:x9=2; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'W_po_AQ_rfi_AQ_PodWRPAq_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x12=2; , 1:x9=1; 0:x10=1; 0:x12=3; , 1:x9=1; 0:x10=3; 0:x12=2; , 1:x9=2; 0:x10=1; 0:x12=2; ]}
[]
synth ppo by litmus test 783
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_po_AQ_PosWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_po_AQ_PosWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 784
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_po_AQ_PodWRPAq_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_po_AQ_po_AQ_PodWRPAq_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
[]
synth ppo by litmus test 785
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_rmw_XSc_PodWR_PosRW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=0; , 1:x9=1; 0:x10=2; 0:x11=0; , 1:x9=1; 0:x10=2; 0:x11=1; , 1:x9=2; 0:x10=1; 0:x11=0; , 1:x9=2; 0:x10=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_rmw_XSc_PodWR_PosRW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=0; , 1:x9=1; 0:x10=2; 0:x11=0; , 1:x9=1; 0:x10=2; 0:x11=1; , 1:x9=2; 0:x10=1; 0:x11=0; , 1:x9=2; 0:x10=2; 0:x11=1; ]}
[]
synth ppo by litmus test 786
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_po_loc_AQ_PodWR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_po_loc_AQ_PodWR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 787
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_po_AQ_PodWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_po_AQ_PodWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
synth ppo by litmus test 788
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_rfi_XLr_PodWRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_AQ_rfi_XLr_PodWRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 789
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_AMO_po_AMO_PosWR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; , 1:x9=3; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_AMO_po_AMO_PosWR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; , 1:x9=3; 0:x12=1; ]}
[]
synth ppo by litmus test 790
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_ctrl_AQ_Rfi_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_ctrl_AQ_Rfi_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 791
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_po_loc_AMO_PodWR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_po_loc_AMO_PodWR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 792
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_po_loc_AMO_PodWRPAq_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=2; , 1:x9=1; 0:x12=3; , 1:x9=2; 0:x12=2; ]}
now_herd_logs_ppo_remove {'W_po_AQ_po_loc_AMO_PodWRPAq_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=2; , 1:x9=1; 0:x12=3; , 1:x9=2; 0:x12=2; ]}
[]
synth ppo by litmus test 793
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_po_AMO_PosWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_po_AMO_PosWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 794
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_po_loc_XLr_PodWRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_AQ_po_loc_XLr_PodWRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 795
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_ctrl_AQ_PosWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_ctrl_AQ_PosWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 796
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_ctrl_AMO_PodWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_ctrl_AMO_PodWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
synth ppo by litmus test 797
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_po_AQ_PodWR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_po_AQ_PodWR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
[]
synth ppo by litmus test 798
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_po_AMO_PodWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_po_AMO_PodWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
synth ppo by litmus test 799
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_AMO_po_AQ_Rfi_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x12=1; , 0:x7=1; 1:x9=3; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=2; , 0:x7=2; 1:x9=2; 0:x12=1; , 0:x7=2; 1:x9=3; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_rfi_AMO_po_AQ_Rfi_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x12=1; , 0:x7=1; 1:x9=3; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=2; , 0:x7=2; 1:x9=2; 0:x12=1; , 0:x7=2; 1:x9=3; 0:x12=1; ]}
[]
synth ppo by litmus test 800
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_rfi_AMO_PodWR_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x12=2; , 1:x9=1; 0:x10=1; 0:x12=3; , 1:x9=1; 0:x10=3; 0:x12=2; , 1:x9=2; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'W_po_AMO_rfi_AMO_PodWR_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x12=2; , 1:x9=1; 0:x10=1; 0:x12=3; , 1:x9=1; 0:x10=3; 0:x12=2; , 1:x9=2; 0:x10=1; 0:x12=2; ]}
[]
synth ppo by litmus test 801
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_AMO_po_AMO_Rfi_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x12=1; , 0:x7=1; 1:x9=3; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=2; , 0:x7=2; 1:x9=2; 0:x12=1; , 0:x7=2; 1:x9=3; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_rfi_AMO_po_AMO_Rfi_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x12=1; , 0:x7=1; 1:x9=3; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=2; , 0:x7=2; 1:x9=2; 0:x12=1; , 0:x7=2; 1:x9=3; 0:x12=1; ]}
[]
synth ppo by litmus test 802
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_po_AMO_Rfi_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_po_AMO_Rfi_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 803
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_po_AMO_PodWRPAq_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_po_AQ_po_AMO_PodWRPAq_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
[]
synth ppo by litmus test 804
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_ctrl_AMO_PosWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_ctrl_AMO_PosWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 805
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_ctrl_AQ_PodWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_ctrl_AQ_PodWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
synth ppo by litmus test 806
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_po_AQ_Rfi_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_po_AQ_Rfi_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
[]
synth ppo by litmus test 807
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_rfi_XLr_PodWR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_rfi_XLr_PodWR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
[]
synth ppo by litmus test 808
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_po_loc_XLr_Rfi_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=2; , 0:x7=2; 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_po_loc_XLr_Rfi_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=2; , 0:x7=2; 1:x9=2; 0:x13=1; ]}
[]
synth ppo by litmus test 809
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_po_loc_XLr_PosWR_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_po_loc_XLr_PosWR_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
[]
synth ppo by litmus test 810
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.rw.rw+poxx': [1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'S+fence.rw.rw+poxx': [1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; ]}
[]
synth ppo by litmus test 811
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.rw.rw+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+fence.rw.rw+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
synth ppo by litmus test 812
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+porlps+NEW': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+porlps+NEW': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
synth ppo by litmus test 813
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+poprl+porlp+NEW': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+poprl+porlp+NEW': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 814
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+porlp+poprl+NEW': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+porlp+poprl+NEW': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
synth ppo by litmus test 815
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+poprl+porlp+NEW': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2W+poprl+porlp+NEW': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
[]
synth ppo by litmus test 816
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+porlps+NEW': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2W+porlps+NEW': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
[]
synth ppo by litmus test 817
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+porlps+NEW': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+porlps+NEW': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 818
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+popaqs+NEW': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+popaqs+NEW': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
synth ppo by litmus test 819
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tso+fence.tsoxx': [0:x7=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tso+fence.tsoxx': [0:x7=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; ]}
[]
synth ppo by litmus test 820
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxx+fence.tso': [0:x7=0; 0:x8=0; 1:x7=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxx+fence.tso': [0:x7=0; 0:x8=0; 1:x7=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; ]}
[]
synth ppo by litmus test 821
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+addr+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+addr+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
synth ppo by litmus test 822
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+ctrl+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+ctrl+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
synth ppo by litmus test 823
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+data+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+data+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
synth ppo by litmus test 824
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+porlp+porlrl+NEW': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2W+porlp+porlrl+NEW': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
[]
synth ppo by litmus test 825
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+porlrl+porlp+NEW': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+porlrl+porlp+NEW': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
synth ppo by litmus test 826
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2Swap': [0:x10=0; 0:x11=0; 1:x10=1; 1:x11=2; [x]=1; [y]=2; , 0:x10=0; 0:x11=2; 1:x10=0; 1:x11=2; [x]=1; [y]=1; , 0:x10=1; 0:x11=2; 1:x10=0; 1:x11=0; [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2Swap': [0:x10=0; 0:x11=0; 1:x10=1; 1:x11=2; [x]=1; [y]=2; , 0:x10=0; 0:x11=2; 1:x10=0; 1:x11=2; [x]=1; [y]=1; , 0:x10=1; 0:x11=2; 1:x10=0; 1:x11=0; [x]=2; [y]=1; ]}
[]
synth ppo by litmus test 827
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsopxs': [0:x8=0; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsopxs': [0:x8=0; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=1; ]}
[]
synth ppo by litmus test 828
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsopxs': [0:x8=0; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x8=0; 1:x9=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=0; 1:x9=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsopxs': [0:x8=0; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x8=0; 1:x9=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=0; 1:x9=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=2; ]}
[]
synth ppo by litmus test 829
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+popxs': [0:x5=0; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=0; 1:x10=0; [x]=1; [y]=1; , 0:x5=0; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=0; 1:x10=1; [x]=0; [y]=1; , 0:x5=0; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=1; 1:x10=0; [x]=1; [y]=0; , 0:x5=0; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=1; 1:x10=1; [x]=0; [y]=0; , 0:x5=0; 0:x9=0; 1:x5=1; 1:x9=0; 0:x10=0; 1:x10=0; [x]=1; [y]=1; , 0:x5=0; 0:x9=0; 1:x5=1; 1:x9=0; 0:x10=0; 1:x10=1; [x]=0; [y]=1; , 0:x5=1; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=0; 1:x10=0; [x]=1; [y]=1; , 0:x5=1; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=1; 1:x10=0; [x]=1; [y]=0; ]}
now_herd_logs_ppo_remove {'LB+popxs': [0:x5=0; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=0; 1:x10=0; [x]=1; [y]=1; , 0:x5=0; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=0; 1:x10=1; [x]=0; [y]=1; , 0:x5=0; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=1; 1:x10=0; [x]=1; [y]=0; , 0:x5=0; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=1; 1:x10=1; [x]=0; [y]=0; , 0:x5=0; 0:x9=0; 1:x5=1; 1:x9=0; 0:x10=0; 1:x10=0; [x]=1; [y]=1; , 0:x5=0; 0:x9=0; 1:x5=1; 1:x9=0; 0:x10=0; 1:x10=1; [x]=0; [y]=1; , 0:x5=1; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=0; 1:x10=0; [x]=1; [y]=1; , 0:x5=1; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=1; 1:x10=0; [x]=1; [y]=0; ]}
[]
synth ppo by litmus test 830
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.tsopx+fence.tsoxp': [0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; [x]=1; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; [x]=1; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; [x]=1; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; [x]=2; [y]=2; ]}
now_herd_logs_ppo_remove {'2+2W+fence.tsopx+fence.tsoxp': [0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; [x]=1; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; [x]=1; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; [x]=1; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; [x]=2; [y]=2; ]}
[]
synth ppo by litmus test 831
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsopx+fence.tsoxp': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsopx+fence.tsoxp': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; ]}
[]
synth ppo by litmus test 832
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.tsopxs': [0:x9=0; 1:x9=2; 0:x10=0; 1:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=0; 1:x10=1; [x]=2; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=1; 1:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=1; 1:x10=1; [x]=2; [y]=2; , 0:x9=2; 1:x9=0; 0:x10=0; 1:x10=0; [x]=2; [y]=1; , 0:x9=2; 1:x9=0; 0:x10=0; 1:x10=1; [x]=2; [y]=1; , 0:x9=2; 1:x9=0; 0:x10=1; 1:x10=0; [x]=2; [y]=2; , 0:x9=2; 1:x9=0; 0:x10=1; 1:x10=1; [x]=2; [y]=2; , 0:x9=2; 1:x9=2; 0:x10=0; 1:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x9=2; 0:x10=0; 1:x10=1; [x]=2; [y]=1; , 0:x9=2; 1:x9=2; 0:x10=1; 1:x10=0; [x]=1; [y]=2; , 0:x9=2; 1:x9=2; 0:x10=1; 1:x10=1; [x]=2; [y]=2; ]}
now_herd_logs_ppo_remove {'2+2W+fence.tsopxs': [0:x9=0; 1:x9=2; 0:x10=0; 1:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=0; 1:x10=1; [x]=2; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=1; 1:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=1; 1:x10=1; [x]=2; [y]=2; , 0:x9=2; 1:x9=0; 0:x10=0; 1:x10=0; [x]=2; [y]=1; , 0:x9=2; 1:x9=0; 0:x10=0; 1:x10=1; [x]=2; [y]=1; , 0:x9=2; 1:x9=0; 0:x10=1; 1:x10=0; [x]=2; [y]=2; , 0:x9=2; 1:x9=0; 0:x10=1; 1:x10=1; [x]=2; [y]=2; , 0:x9=2; 1:x9=2; 0:x10=0; 1:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x9=2; 0:x10=0; 1:x10=1; [x]=2; [y]=1; , 0:x9=2; 1:x9=2; 0:x10=1; 1:x10=0; [x]=1; [y]=2; , 0:x9=2; 1:x9=2; 0:x10=1; 1:x10=1; [x]=2; [y]=2; ]}
[]
synth ppo by litmus test 833
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsopx+fence.tsoxp': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x9=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsopx+fence.tsoxp': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x9=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=2; ]}
[]
synth ppo by litmus test 834
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsoxps': [0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [x]=0; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsoxps': [0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [x]=0; [y]=1; ]}
[]
synth ppo by litmus test 835
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+poxps': [0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+poxps': [0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; [x]=1; [y]=1; ]}
[]
synth ppo by litmus test 836
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxp+fence.tsopx': [0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; [x]=0; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxp+fence.tsopx': [0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; [x]=0; [y]=2; ]}
[]
synth ppo by litmus test 837
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'ISA03+SB02': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; ]}
now_herd_logs_ppo_remove {'ISA03+SB02': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; ]}
[]
synth ppo by litmus test 838
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'ISA03+SIMPLE+BIS': [[a]=2; ]}
now_herd_logs_ppo_remove {'ISA03+SIMPLE+BIS': [[a]=2; ]}
[]
synth ppo by litmus test 839
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsoxp+fence.tsoxx': [0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsoxp+fence.tsoxx': [0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; ]}
[]
synth ppo by litmus test 840
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxx+fence.tsopx': [0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=0; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxx+fence.tsopx': [0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=0; [y]=2; ]}
[]
synth ppo by litmus test 841
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.tsopx+fence.tsoxx': [0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=0; 1:x12=0; [x]=2; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=0; 1:x12=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=0; 1:x12=0; [x]=2; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=0; 1:x12=1; [x]=2; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; ]}
now_herd_logs_ppo_remove {'2+2W+fence.tsopx+fence.tsoxx': [0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=0; 1:x12=0; [x]=2; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=0; 1:x12=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=0; 1:x12=0; [x]=2; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=0; 1:x12=1; [x]=2; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; ]}
[]
synth ppo by litmus test 842
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsopx+fence.tsoxx': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsopx+fence.tsoxx': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; ]}
[]
synth ppo by litmus test 843
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsopx+fence.tsoxx': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsopx+fence.tsoxx': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; ]}
[]
synth ppo by litmus test 844
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxx+fence.tsoxp': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=1; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxx+fence.tsoxp': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=1; ]}
[]
synth ppo by litmus test 845
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+poxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=2; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=0; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; ]}
now_herd_logs_ppo_remove {'2+2W+poxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=2; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=0; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; ]}
[]
synth ppo by litmus test 846
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+poxxs': [0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=2; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=2; 1:x11=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=2; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=2; 1:x11=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=1; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=2; [y]=0; , 0:x7=1; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=2; [y]=0; , 0:x7=1; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=1; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; ]}
now_herd_logs_ppo_remove {'S+poxxs': [0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=2; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=2; 1:x11=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=2; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=2; 1:x11=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=1; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=2; [y]=0; , 0:x7=1; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=2; [y]=0; , 0:x7=1; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=1; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; ]}
[]
synth ppo by litmus test 847
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=2; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=0; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; ]}
now_herd_logs_ppo_remove {'2+2W+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=2; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=0; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; ]}
[]
synth ppo by litmus test 848
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; ]}
now_herd_logs_ppo_remove {'SB+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; ]}
[]
synth ppo by litmus test 849
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+poxxs': [0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; ]}
now_herd_logs_ppo_remove {'LB+poxxs': [0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; ]}
[]
synth ppo by litmus test 850
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+poxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; ]}
now_herd_logs_ppo_remove {'SB+poxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; ]}
[]
synth ppo by litmus test 851
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; ]}
[]
synth ppo by litmus test 852
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+poxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; ]}
now_herd_logs_ppo_remove {'R+poxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; ]}
[]
synth ppo by litmus test 853
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
now herd cat
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+poxxs': [0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=1; 1:x10=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=1; 1:x10=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=1; 1:x10=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=1; 1:x10=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=0; [y]=1; ]}
now_herd_logs_ppo_remove {'MP+poxxs': [0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=1; 1:x10=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=1; 1:x10=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=1; 1:x10=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=1; 1:x10=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=0; [y]=1; ]}
[]
iterate 1 final validate:
[R];po-loc;[W];po-loc;[R]
[R];po-loc;[R]
[R];rsw;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[R];po-loc;[R]
[AMO];po-loc;[R]
[AMO];po;[R]
check cat array final start
[R];po-loc;[W]
[W];po-loc;[W]
([R];po-loc\(po-loc;[W];po-loc)\(rsw);[R])\([AMO];po-loc;[R])
[XSc];rfi;[R]
[AMO];rfi;[R]
[R];fencerel(Fence.r.r);[R]
[R];fencerel(Fence.r.w);[W]
[R];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.rw);[W]
[W];fencerel(Fence.w.r);[R]
[W];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.w.rw);[W]
[W];fencerel(Fence.w.rw);[R]
[R];fencerel(Fence.rw.r);[R]
[W];fencerel(Fence.rw.r);[R]
[R];fencerel(Fence.rw.w);[W]
[W];fencerel(Fence.rw.w);[W]
[R];fencerel(Fence.rw.rw);[W]
[W];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.rw.rw);[W]
[R];fencerel(Fence.rw.rw);[R]
[W];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[W]
[R];fencerel(Fence.tso);[R]
[AQ];po;[W]
[AQ];po;[R]
[W];po;[RL]
[R];po;[RL]
[RL];po;[AQ]
[XLr];rmw;[XSc]
[R];addr;[W]
[R];addr;[R]
[R];data;[W]
[R];ctrl;[W]
[R];addr;[W];rfi;[R]
[R];data;[W];rfi;[R]
[R];addr;[W];po;[W]
[R];addr;[R];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[W]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];fencerel(Fence.rw.r);[W]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po\(po-loc);[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[W];po;[AMO]
[XSc];po;[W]
[XSc];po;[R]
check cat arrat final end
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.r.rw+fence.rw.rw': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2W+fence.r.rw+fence.rw.rw': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.r.rw+fence.rw.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.r.rw+fence.rw.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.rw+fence.rw.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.rw+fence.rw.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.w+fence.rw.rw': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.w+fence.rw.rw': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.r.rws': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2W+fence.r.rws': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.rw.w+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.rw.w+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.w.ws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.w.ws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.w.ws': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.w.ws': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.rw+fence.w.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.rw+fence.w.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.r.rws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.r.rws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.w+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.w+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rw+fence.rw.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rw+fence.rw.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.w.ws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.w.ws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.r.rws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.r.rws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.w_R_Fence_r_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.w.w+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.w.w+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.w+fence.rw.w': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.w+fence.rw.w': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rws': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rws': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.rw.w+fence.w.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.rw.w+fence.w.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.w_R_Fence_rw_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.rw+fence.w.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.rw+fence.w.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.rw+ctrlfence.w.r': [1:x5=0; 1:x9=0; , 1:x5=0; 1:x9=1; , 1:x5=1; 1:x9=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.rw+ctrlfence.w.r': [1:x5=0; 1:x9=0; , 1:x5=0; 1:x9=1; , 1:x5=1; 1:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.rw.ws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.rw.ws': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.w_R_Fence_w_wdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_R_Fence_w_rdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.ws': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.ws': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.w.w+fence.rw.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.w.w+fence.rw.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.rw.rw+fence.w.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.rw.rw+fence.w.w': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.r.rw+fence.w.w': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2W+fence.r.rw+fence.w.w': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.w.ws': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.w.ws': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.w+fence.w.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.w+fence.w.w': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.w.w+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.w.w+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.r.rw+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.r.rw+fence.rw.rw': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.r.rw+fence.w.w': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.r.rw+fence.w.w': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.ws': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.ws': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.r.rw+fence.rw.w': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2W+fence.r.rw+fence.rw.w': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.rw+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.rw+fence.r.rw': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.rw.ws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.rw.ws': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.w.w+fence.rw.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.w.w+fence.rw.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rw+fence.rw.rw': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rw+fence.rw.rw': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_R_Fence_w_rwdRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.w+fence.w.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.w+fence.w.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.rw.rw+fence.rw.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.rw.rw+fence.rw.w': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.r.rw+fence.rw.rw': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'MP+fence.r.rw+fence.rw.rw': [1:x5=0; 1:x7=0; , 1:x5=0; 1:x7=1; , 1:x5=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.w+addr': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.w+addr': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rw+addr': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rw+addr': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.w+ctrl': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.w+ctrl': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.w.w+fence.tso': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.w.w+fence.tso': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+fence.r.rw+addr': [1:x5=0; 1:x8=0; , 1:x5=0; 1:x8=1; , 1:x5=1; 1:x8=1; ]}
now_herd_logs_ppo_remove {'MP+fence.r.rw+addr': [1:x5=0; 1:x8=0; , 1:x5=0; 1:x8=1; , 1:x5=1; 1:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rw+ctrl': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rw+ctrl': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.w.w+data': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
now_herd_logs_ppo_remove {'LB+fence.w.w+data': [0:x5=0; 1:x5=0; , 0:x5=0; 1:x5=1; , 0:x5=1; 1:x5=0; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.r.rw+data': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+fence.r.rw+data': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.w_W_Fence_w_wdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.rw_W_Fence_w_rwdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.w.r_W_Fence_w_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.r.r_W_Fence_r_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.w_R_Fence_w_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_R_Fence_r_rdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_R_Fence_r_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.rw_R_Fence_r_rwdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.w_R_Fence_rw_wdWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_fencerelFence.rw.r_W_Fence_rw_rdRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsos': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsos': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsos': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsos': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.tso_R_Fence_tsodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'ISA02': [0:x10=1; 0:x11=0; 1:x12=1; 1:x13=1; , 0:x10=1; 0:x11=1; 1:x12=1; 1:x13=0; , 0:x10=1; 0:x11=1; 1:x12=1; 1:x13=1; ]}
now_herd_logs_ppo_remove {'ISA02': [0:x10=1; 0:x11=0; 1:x12=1; 1:x13=1; , 0:x10=1; 0:x11=1; 1:x12=1; 1:x13=0; , 0:x10=1; 0:x11=1; 1:x12=1; 1:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.w.r_W_Fence_w_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.w_W_Fence_r_wdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.rw_W_Fence_r_rwdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+rfi-fence.r.rs': [0:x7=1; 0:x8=0; 1:x7=1; 1:x8=1; , 0:x7=1; 0:x8=1; 1:x7=1; 1:x8=0; , 0:x7=1; 0:x8=1; 1:x7=1; 1:x8=1; ]}
now_herd_logs_ppo_remove {'SB+rfi-fence.r.rs': [0:x7=1; 0:x8=0; 1:x7=1; 1:x8=1; , 0:x7=1; 0:x8=1; 1:x7=1; 1:x8=0; , 0:x7=1; 0:x8=1; 1:x7=1; 1:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.r.r_W_Fence_r_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
now_herd_logs_ppo_remove {'W_fencerelFence.rw.r_W_Fence_rw_rdWW_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=2; 1:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_XLr_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_XLr_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_R_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_W_po_R_Rmw_PosWWRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_W_po_R_Rmw_PosWWRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_R_ctrl_XLr_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_R_ctrl_XLr_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_po_R_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_po_R_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_R_ctrl_XLr_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_R_ctrl_XLr_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_R_ctrl_R_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_R_ctrl_R_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_ctrl_R_Rmw_PodWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_ctrl_R_Rmw_PodWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_po_R_Rmw_PodWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_po_R_Rmw_PodWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_po_R_Rmw_PodWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_po_R_Rmw_PodWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_addr_R_Rmw_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_addr_R_Rmw_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_ctrl_XLr_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_R_ctrl_XLr_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_W_po_XLr_DpCtrldW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_W_po_XLr_DpCtrldW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_po_loc_R_Rmw_PodWRRlP_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_po_loc_R_Rmw_PodWRRlP_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_R_addr_XLr_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_R_addr_XLr_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fri_W_po_XLr_Fri_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'R_fri_W_po_XLr_Fri_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_addr_R_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_addr_R_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_po_loc_XLr_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_R_po_loc_XLr_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_AMO_po_R_PosRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_AMO_po_R_PosRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_XLr_ctrl_R_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_XLr_ctrl_R_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_W_po_R_PosRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_W_po_R_PosRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_Rmw_PodWWRlP_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_W_Rmw_PodWWRlP_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; , 0:x6=0; 0:x10=2; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_rsw_R_Rmw_PodWRRlP_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_rsw_R_Rmw_PodWRRlP_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_R_po_R_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_R_po_R_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_po_XLr_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_R_po_XLr_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_XLr_po_loc_R_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_XLr_po_loc_R_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_po_loc_R_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_po_loc_R_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_AMO_po_R_DpCtrldR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_AMO_po_R_DpCtrldR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_addr_R_Rmw_PodWRRlP_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_addr_R_Rmw_PodWRRlP_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_rsw_R_po_XLr_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'R_rsw_R_po_XLr_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_coi_W_po_R_Rmw_CoiRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_coi_W_po_R_Rmw_CoiRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_R_ctrl_R_Rmw_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=0; , 0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_R_ctrl_R_Rmw_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=0; , 0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_XLr_po_R_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_XLr_po_R_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_R_po_R_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_R_po_R_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_addr_R_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_addr_R_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_po_R_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_rsw_R_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_rsw_R_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_R_po_R_Rmw_Rfi_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=0; , 0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_R_po_R_Rmw_Rfi_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=0; , 0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_XLr_addr_R_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_XLr_addr_R_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_po_R_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_po_R_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_R_ctrl_R_Rmw_RfiRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=0; , 0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_R_ctrl_R_Rmw_RfiRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=0; , 0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_R_ctrl_XLr_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_R_ctrl_XLr_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_W_po_XLr_PosRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_W_po_XLr_PosRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_XLr_po_R_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_XLr_po_R_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_W_po_R_Rmw_PosWW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_W_po_R_Rmw_PosWW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_AQ_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_R_ctrl_R_Rmw_PosWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_R_ctrl_R_Rmw_PosWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_rsw_R_ctrl_XLr_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'R_rsw_R_ctrl_XLr_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_R_po_XLr_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_R_po_XLr_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_fri_W_po_R_Fri_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_fri_W_po_R_Fri_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_W_po_R_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_R_po_loc_R_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_R_po_loc_R_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_R_po_R_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_R_po_R_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_addr_XLr_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_R_addr_XLr_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_XLr_ctrl_R_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_XLr_ctrl_R_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_po_loc_R_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_po_loc_R_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_R_ctrl_R_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_R_ctrl_R_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_po_R_PodRRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_AQ_po_R_PodRRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_XLr_po_R_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_XLr_po_R_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_R_po_R_Rmw_PosWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_R_po_R_Rmw_PosWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_R_po_XLr_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_R_po_XLr_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_rsw_R_Rmw_PodWR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_rsw_R_Rmw_PodWR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_R_ctrl_R_Rmw_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_R_ctrl_R_Rmw_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_po_R_Rmw_PodWWRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_W_po_R_Rmw_PodWWRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_ctrl_R_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_ctrl_R_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_coi_W_po_R_Rmw_Coi_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_coi_W_po_R_Rmw_Coi_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_R_po_XLr_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_R_po_XLr_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; , 0:x5=0; 0:x9=2; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_XLr_ctrl_R_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_XLr_ctrl_R_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_po_XLr_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_W_po_XLr_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_R_po_R_Rmw_PosWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_R_po_R_Rmw_PosWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_R_addr_R_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_R_addr_R_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_po_R_PodRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_po_R_PodRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_ctrl_R_Rmw_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_ctrl_R_Rmw_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_R_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_W_po_R_DpCtrldW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_W_po_R_DpCtrldW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_R_po_loc_XLr_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_R_po_loc_XLr_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_R_ctrl_R_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_R_ctrl_R_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_R_po_R_Rmw_RfiRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=0; , 0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_R_po_R_Rmw_RfiRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=0; , 0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_ctrl_R_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_ctrl_R_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_R_rsw_R_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_R_rsw_R_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_po_R_Rmw_PodWW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_po_R_Rmw_PodWW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_po_loc_R_Rmw_PodWR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_po_loc_R_Rmw_PodWR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_R_po_W_Rmw_Rfi_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x11=1; , 0:x6=0; 0:x8=1; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=2; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_R_po_W_Rmw_Rfi_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x11=1; , 0:x6=0; 0:x8=1; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=2; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_po_W_PodRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_po_W_PodRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_po_loc_R_PodRR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_po_loc_R_PodRR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_po_loc_XLr_PodRW_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; , 0:x5=1; 0:x9=2; 0:x10=2; ]}
now_herd_logs_ppo_remove {'R_po_W_po_loc_XLr_PodRW_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; , 0:x5=1; 0:x9=2; 0:x10=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_ctrl_W_Rmw_PodWR_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_ctrl_W_Rmw_PodWR_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_po_loc_W_PodRR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_po_loc_W_PodRR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_W_po_loc_XLr_DpCtrldW_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_W_po_loc_XLr_DpCtrldW_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_ctrl_W_PodRR_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_ctrl_W_PodRR_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_po_loc_W_Rmw_PodWWRlP_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=2; , 0:x6=0; 0:x11=3; , 0:x6=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'RL_po_W_po_loc_W_Rmw_PodWWRlP_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=2; , 0:x6=0; 0:x11=3; , 0:x6=1; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_addr_W_Rmw_PodWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_addr_W_Rmw_PodWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_R_po_AMO_PosRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_R_po_AMO_PosRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_data_W_Rmw_PodWRRlP_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_data_W_Rmw_PodWRRlP_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_rfi_XLr_PodRW_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; , 0:x5=1; 0:x9=2; 0:x10=2; ]}
now_herd_logs_ppo_remove {'R_po_W_rfi_XLr_PodRW_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; , 0:x5=1; 0:x9=2; 0:x10=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_W_po_W_Rmw_PosWW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_W_po_W_Rmw_PosWW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_W_po_W_PosRW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_W_po_W_PosRW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_ctrl_W_PodRR_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_ctrl_W_PodRR_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_coi_W_Rmw_PodWWRlP_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=2; , 0:x6=0; 0:x11=3; , 0:x6=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'RL_po_W_coi_W_Rmw_PodWWRlP_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=2; , 0:x6=0; 0:x11=3; , 0:x6=1; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_po_loc_R_PodRRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_AQ_po_loc_R_PodRRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_po_AQ_PodRW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_W_po_AQ_PodRW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_ctrl_AQ_PodRR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_R_ctrl_AQ_PodRR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_po_AQ_PodRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_R_po_AQ_PodRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_po_AMO_PodRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_R_po_AMO_PodRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_data_W_PodRR_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_data_W_PodRR_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_R_po_W_PosRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_R_po_W_PosRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_po_loc_W_PodRRPAq_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'R_po_AQ_po_loc_W_PodRRPAq_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_po_loc_AMO_PodRW_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'R_po_W_po_loc_AMO_PodRW_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_W_po_AQ_PosRW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_W_po_AQ_PosRW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_R_po_W_Rmw_PosWR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_R_po_W_Rmw_PosWR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_W_po_AMO_PosRW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_W_po_AMO_PosRW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_rfi_AMO_PodRW_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=2; , 0:x5=0; 0:x9=1; 0:x11=3; , 0:x5=0; 0:x9=3; 0:x11=2; , 0:x5=1; 0:x9=1; 0:x11=2; , 0:x5=1; 0:x9=3; 0:x11=2; ]}
now_herd_logs_ppo_remove {'R_po_W_rfi_AMO_PodRW_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=2; , 0:x5=0; 0:x9=1; 0:x11=3; , 0:x5=0; 0:x9=3; 0:x11=2; , 0:x5=1; 0:x9=1; 0:x11=2; , 0:x5=1; 0:x9=3; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_po_W_PodRW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_po_W_PodRW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_po_W_Rmw_PodWW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_po_W_Rmw_PodWW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_po_loc_W_PodRR_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'R_po_AMO_po_loc_W_PodRR_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_po_loc_W_Rmw_PodWR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_po_loc_W_Rmw_PodWR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_fri_W_po_W_Fri_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_fri_W_po_W_Fri_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_addr_W_PodRR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_addr_W_PodRR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_rfi_R_Rmw_PodWW_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_rfi_R_Rmw_PodWW_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_coi_W_PodRRPAq_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'R_po_AQ_coi_W_PodRRPAq_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_W_po_loc_R_DpCtrldW_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_W_po_loc_R_DpCtrldW_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_po_loc_W_Rmw_PodWRRlP_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_po_loc_W_Rmw_PodWRRlP_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_fri_W_Rmw_PodWRRlP_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; 0:x11=1; , 0:x6=0; 0:x8=0; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_fri_W_Rmw_PodWRRlP_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; 0:x11=1; , 0:x6=0; 0:x8=0; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_R_po_AQ_PosRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_R_po_AQ_PosRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_po_W_PodRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_po_W_PodRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_fri_W_PodRR_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; 0:x10=1; , 0:x5=0; 0:x7=0; 0:x10=2; , 0:x5=0; 0:x7=2; 0:x10=1; , 0:x5=1; 0:x7=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_fri_W_PodRR_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; 0:x10=1; , 0:x5=0; 0:x7=0; 0:x10=2; , 0:x5=0; 0:x7=2; 0:x10=1; , 0:x5=1; 0:x7=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_rsw_R_po_AMO_PosRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_rsw_R_po_AMO_PosRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_po_loc_AMO_PodRR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_R_po_loc_AMO_PodRR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_data_W_Rmw_PodWR_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_data_W_Rmw_PodWR_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_coi_W_po_W_Rmw_Coi_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_coi_W_po_W_Rmw_Coi_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_rsw_R_po_AQ_PosRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_rsw_R_po_AQ_PosRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_R_po_W_Rmw_RfiRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x11=1; , 0:x6=0; 0:x8=1; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=2; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_R_po_W_Rmw_RfiRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x11=1; , 0:x6=0; 0:x8=1; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=2; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_po_loc_AQ_PodRR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_R_po_loc_AQ_PodRR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_W_po_W_Rmw_PosWWRlP_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_W_po_W_Rmw_PosWWRlP_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_po_loc_R_Rmw_PodWW_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_po_loc_R_Rmw_PodWW_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_W_DpDatadW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_W_DpDatadW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_R_ctrl_AMO_PodRR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_R_ctrl_AMO_PodRR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_XLr_po_W_PosRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_XLr_po_W_PosRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_po_loc_W_PodRW_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=2; , 0:x5=0; 0:x10=3; , 0:x5=1; 0:x10=2; ]}
now_herd_logs_ppo_remove {'XLr_po_W_po_loc_W_PodRW_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=2; , 0:x5=0; 0:x10=3; , 0:x5=1; 0:x10=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_addr_W_Rmw_PodWRRlP_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_addr_W_Rmw_PodWRRlP_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_W_rfi_XLr_DpCtrldW_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=0; , 0:x5=0; 0:x9=1; 0:x11=1; , 0:x5=1; 0:x9=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_W_rfi_XLr_DpCtrldW_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=0; , 0:x5=0; 0:x9=1; 0:x11=1; , 0:x5=1; 0:x9=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_po_loc_W_Rmw_PodWW_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=2; , 0:x6=0; 0:x11=3; , 0:x6=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'AMO_po_W_po_loc_W_Rmw_PodWW_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=2; , 0:x6=0; 0:x11=3; , 0:x6=1; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_po_W_PodRRPAq_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_AQ_po_W_PodRRPAq_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_rfi_R_Rmw_PodWWRlP_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_W_rfi_R_Rmw_PodWWRlP_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fri_W_po_AQ_Fri_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_fri_W_po_AQ_Fri_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_po_W_Rmw_PodWWRlP_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_W_po_W_Rmw_PodWWRlP_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_po_AMO_PodRW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_W_po_AMO_PodRW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_ctrl_W_Rmw_PodWRRlP_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_ctrl_W_Rmw_PodWRRlP_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_rfi_R_PodRW_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_rfi_R_PodRW_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_coi_W_PodRW_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=2; , 0:x5=0; 0:x10=3; , 0:x5=1; 0:x10=2; ]}
now_herd_logs_ppo_remove {'XLr_po_W_coi_W_PodRW_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=2; , 0:x5=0; 0:x10=3; , 0:x5=1; 0:x10=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_AMO_po_W_PosRR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_AMO_po_W_PosRR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_coi_W_po_W_Rmw_CoiRlP_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_coi_W_po_W_Rmw_CoiRlP_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_rfi_AQ_PodRW_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=2; , 0:x5=0; 0:x9=1; 0:x11=3; , 0:x5=0; 0:x9=3; 0:x11=2; , 0:x5=1; 0:x9=1; 0:x11=2; , 0:x5=1; 0:x9=3; 0:x11=2; ]}
now_herd_logs_ppo_remove {'R_po_W_rfi_AQ_PodRW_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=2; , 0:x5=0; 0:x9=1; 0:x11=3; , 0:x5=0; 0:x9=3; 0:x11=2; , 0:x5=1; 0:x9=1; 0:x11=2; , 0:x5=1; 0:x9=3; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fri_W_po_AMO_Fri_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_fri_W_po_AMO_Fri_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_po_loc_R_PodRW_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_po_loc_R_PodRW_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_data_W_PodRR_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_data_W_PodRR_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_W_rfi_R_DpCtrldW_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=0; , 0:x5=0; 0:x9=1; 0:x11=1; , 0:x5=1; 0:x9=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_W_rfi_R_DpCtrldW_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=0; , 0:x5=0; 0:x9=1; 0:x11=1; , 0:x5=1; 0:x9=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_fri_W_PodRR_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; 0:x10=1; , 0:x5=0; 0:x7=0; 0:x10=2; , 0:x5=0; 0:x7=2; 0:x10=1; , 0:x5=1; 0:x7=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_fri_W_PodRR_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; 0:x10=1; , 0:x5=0; 0:x7=0; 0:x10=2; , 0:x5=0; 0:x7=2; 0:x10=1; , 0:x5=1; 0:x7=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_addr_W_PodRR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_addr_W_PodRR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_po_W_Rmw_PodWR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_po_W_Rmw_PodWR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_rfi_R_PodRR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_rfi_R_PodRR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_R_po_W_Rmw_PosWRRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_R_po_W_Rmw_PosWRRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_po_W_PodRR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_po_W_PodRR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_W_po_loc_AQ_PodRW_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'R_po_W_po_loc_AQ_PodRW_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_po_loc_W_PodRR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_po_loc_W_PodRR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_coi_W_PodRR_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'R_po_AMO_coi_W_PodRR_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_coi_W_Rmw_PodWW_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=2; , 0:x6=0; 0:x11=3; , 0:x6=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'AMO_po_W_coi_W_Rmw_PodWW_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=2; , 0:x6=0; 0:x11=3; , 0:x6=1; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_po_W_Rmw_PodWRRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_po_W_Rmw_PodWRRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_fri_W_Rmw_PodWR_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; 0:x11=1; , 0:x6=0; 0:x8=0; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_fri_W_Rmw_PodWR_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; 0:x11=1; , 0:x6=0; 0:x8=0; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_po_loc_R_Rmw_PodWWRlP_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_W_po_loc_R_Rmw_PodWWRlP_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_rfi_R_PodRRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_AQ_rfi_R_PodRRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fri_W_po_loc_XLr_Fri_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'R_fri_W_po_loc_XLr_Fri_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_W_rfi_R_PosRW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_W_rfi_R_PosRW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_W_po_loc_R_Rmw_PosWW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_W_po_loc_R_Rmw_PosWW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_coi_W_rfi_R_Rmw_Coi_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_coi_W_rfi_R_Rmw_Coi_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_fri_W_po_loc_R_Fri_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_fri_W_po_loc_R_Fri_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_W_rfi_R_Rmw_PosWWRlP_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_W_rfi_R_Rmw_PosWWRlP_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_W_po_loc_R_Rmw_PosWWRlP_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_W_po_loc_R_Rmw_PosWWRlP_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_fri_W_rfi_XLr_Fri_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'R_fri_W_rfi_XLr_Fri_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_W_po_loc_XLr_PosRW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_W_po_loc_XLr_PosRW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_coi_W_po_loc_R_Rmw_Coi_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_coi_W_po_loc_R_Rmw_Coi_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_W_rfi_R_Rmw_PosWW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_W_rfi_R_Rmw_PosWW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_coi_W_po_loc_R_Rmw_CoiRlP_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'RL_coi_W_po_loc_R_Rmw_CoiRlP_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_W_po_loc_R_PosRW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_W_po_loc_R_PosRW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_fri_W_rfi_R_Fri_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_fri_W_rfi_R_Fri_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_W_rfi_XLr_PosRW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_W_rfi_XLr_PosRW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_coi_W_rfi_R_Rmw_CoiRlP_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
now_herd_logs_ppo_remove {'RL_coi_W_rfi_R_Rmw_CoiRlP_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_XLr_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; , 0:x7=1; 1:x9=1; , 0:x7=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_Rmw_PodWRRlP_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; , 0:x6=0; 0:x8=1; , 0:x6=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_XLr_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_XLr_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; , 0:x5=0; 0:x7=1; , 0:x5=1; 0:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.rw.rw+ctrlfence.r.r': [0:x7=0; 1:x7=0; 1:x8=0; 1:x12=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x12=0; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x12=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x12=0; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x12=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.rw.rw+ctrlfence.r.r': [0:x7=0; 1:x7=0; 1:x8=0; 1:x12=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x12=0; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x12=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x12=0; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x12=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_po_XLr_PodWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_R_po_XLr_PodWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_addr_R_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_addr_R_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_W_po_XLr_PosWW_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; , 0:x8=1; 1:x9=3; ]}
now_herd_logs_ppo_remove {'W_po_loc_W_po_XLr_PosWW_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; , 0:x8=1; 1:x9=3; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_po_loc_R_PodWR_PosRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_XLr_po_loc_R_PodWR_PosRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_addr_XLr_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_R_addr_XLr_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_ctrl_XLr_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_R_ctrl_XLr_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_R_po_XLr_Rfi_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_rfi_R_po_XLr_Rfi_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_ctrl_R_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_XLr_ctrl_R_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_W_po_XLr_PodWW_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_W_po_XLr_PodWW_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_po_R_PosWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_po_R_PosWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_po_loc_XLr_PodWR_PosRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_R_po_loc_XLr_PodWR_PosRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_ctrl_R_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_ctrl_R_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_AMO_po_R_PosWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=1; 1:x9=3; ]}
now_herd_logs_ppo_remove {'W_po_loc_AMO_po_R_PosWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=1; 1:x9=3; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_AQ_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_AMO_po_R_Rfi_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=1; 0:x9=1; 1:x9=3; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; , 0:x7=2; 0:x9=1; 1:x9=3; ]}
now_herd_logs_ppo_remove {'W_rfi_AMO_po_R_Rfi_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=1; 0:x9=1; 1:x9=3; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; , 0:x7=2; 0:x9=1; 1:x9=3; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_R_addr_XLr_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_loc_R_addr_XLr_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_po_R_Rfi_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_po_R_Rfi_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_R_po_XLr_PosWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_loc_R_po_XLr_PosWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_po_R_PodWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_XLr_po_R_PodWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_coi_W_po_XLr_Coi_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; , 0:x8=1; 1:x9=3; ]}
now_herd_logs_ppo_remove {'W_coi_W_po_XLr_Coi_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; , 0:x8=1; 1:x9=3; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_po_R_PodWRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_AQ_po_R_PodWRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_addr_R_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_addr_R_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_addr_R_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_addr_R_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_ctrl_R_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_ctrl_R_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_R_addr_XLr_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_rfi_R_addr_XLr_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_R_ctrl_XLr_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_rfi_R_ctrl_XLr_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_R_ctrl_XLr_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_loc_R_ctrl_XLr_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_po_R_PodWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_po_R_PodWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_addr_R_Rmw_PodWRRlP_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_addr_R_Rmw_PodWRRlP_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_XLr_po_R_Rmw_PosWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_XLr_po_R_Rmw_PosWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_Rmw_PodWRRlP_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_Rmw_PodWRRlP_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SC_po_W': [1:x5=0; 1:x7=0; [x]=0; , 1:x5=0; 1:x7=0; [x]=2; , 1:x5=0; 1:x7=2; [x]=2; , 1:x5=1; 1:x7=0; [x]=0; , 1:x5=1; 1:x7=2; [x]=2; ]}
now_herd_logs_ppo_remove {'SC_po_W': [1:x5=0; 1:x7=0; [x]=0; , 1:x5=0; 1:x7=0; [x]=2; , 1:x5=0; 1:x7=2; [x]=2; , 1:x5=1; 1:x7=0; [x]=0; , 1:x5=1; 1:x7=2; [x]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_R_ctrl_XLr_Rmw_RfiRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_R_ctrl_XLr_Rmw_RfiRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_po_XLr_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_po_XLr_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_R_po_XLr_Rmw_Rfi_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_R_po_XLr_Rmw_Rfi_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_po_loc_R_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_po_loc_R_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_XLr_ctrl_R_Rmw_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_XLr_ctrl_R_Rmw_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_R_po_XLr_Rmw_PosWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_R_po_XLr_Rmw_PosWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_po_loc_XLr_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_po_loc_XLr_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_XLr_ctrl_R_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_XLr_ctrl_R_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_AMO_po_XLr_PosRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_AMO_po_XLr_PosRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_po_R_Rmw_PodWRRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_po_R_Rmw_PodWRRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_XLr_po_R_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_XLr_po_R_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_W_po_XLr_Rmw_PosWW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_W_po_XLr_Rmw_PosWW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_XLr_po_XLr_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_XLr_po_XLr_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_po_R_Rmw_PodWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_po_R_Rmw_PodWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_R_po_XLr_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_R_po_XLr_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_XLr_po_R_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_XLr_po_R_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_XLr_ctrl_XLr_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_XLr_ctrl_XLr_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_R_ctrl_XLr_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_R_ctrl_XLr_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_W_po_XLr_Rmw_PosWWRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_W_po_XLr_Rmw_PosWWRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_R_po_XLr_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_R_po_XLr_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_W_po_XLr_PosRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_W_po_XLr_PosRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_ctrl_XLr_Rmw_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_ctrl_XLr_Rmw_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_AMO_po_R_Rmw_Rfi_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x10=1; , 0:x6=0; 0:x8=2; 0:x10=0; , 0:x6=0; 0:x8=2; 0:x10=1; , 0:x6=1; 0:x8=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_AMO_po_R_Rmw_Rfi_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x10=1; , 0:x6=0; 0:x8=2; 0:x10=0; , 0:x6=0; 0:x8=2; 0:x10=1; , 0:x6=1; 0:x8=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_ctrl_XLr_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_ctrl_XLr_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_XLr_po_R_Rmw_PosWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_XLr_po_R_Rmw_PosWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_W_po_XLr_DpAddrdW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_po_R_PodRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_po_R_PodRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_addr_XLr_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_addr_XLr_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_AMO_po_R_Rmw_RfiRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x10=1; , 0:x6=0; 0:x8=2; 0:x10=0; , 0:x6=0; 0:x8=2; 0:x10=1; , 0:x6=1; 0:x8=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_AMO_po_R_Rmw_RfiRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x10=1; , 0:x6=0; 0:x8=2; 0:x10=0; , 0:x6=0; 0:x8=2; 0:x10=1; , 0:x6=1; 0:x8=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_R_ctrl_XLr_Rmw_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_R_ctrl_XLr_Rmw_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SC_po_R': [0:x8=0; 1:x7=0; [x]=0; , 0:x8=0; 1:x7=2; [x]=2; , 0:x8=1; 1:x7=0; [x]=0; , 0:x8=1; 1:x7=0; [x]=2; , 0:x8=1; 1:x7=2; [x]=2; ]}
now_herd_logs_ppo_remove {'SC_po_R': [0:x8=0; 1:x7=0; [x]=0; , 0:x8=0; 1:x7=2; [x]=2; , 0:x8=1; 1:x7=0; [x]=0; , 0:x8=1; 1:x7=0; [x]=2; , 0:x8=1; 1:x7=2; [x]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_AMO_po_R_PosRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_AMO_po_R_PosRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_po_XLr_PodRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_po_XLr_PodRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_po_loc_XLr_Rmw_PodWRRlP_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_po_loc_XLr_Rmw_PodWRRlP_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_XLr_addr_XLr_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_XLr_addr_XLr_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_addr_XLr_Rmw_PodWRRlP_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_addr_XLr_Rmw_PodWRRlP_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_XLr_ctrl_R_Rmw_RfiRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_XLr_ctrl_R_Rmw_RfiRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_po_XLr_Rmw_PodWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_po_XLr_Rmw_PodWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_addr_XLr_Rmw_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_addr_XLr_Rmw_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_R_ctrl_XLr_Rmw_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_R_ctrl_XLr_Rmw_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_XLr_po_R_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_XLr_po_R_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_R_ctrl_XLr_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_R_ctrl_XLr_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.rw.rw+popx': [0:x5=0; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=0; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=1; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; ]}
now_herd_logs_ppo_remove {'LB+fence.rw.rw+popx': [0:x5=0; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=0; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=1; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_ctrl_XLr_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_ctrl_XLr_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_XLr_po_loc_R_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_XLr_po_loc_R_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_po_XLr_Rmw_PodWW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_po_XLr_Rmw_PodWW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_XLr_ctrl_R_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_XLr_ctrl_R_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_AMO_po_R_DpCtrldR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_AMO_po_R_DpCtrldR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_po_XLr_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_po_XLr_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_AMO_po_R_Rmw_PosWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_AMO_po_R_Rmw_PosWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_po_R_PodRRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_po_R_PodRRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_XLr_ctrl_XLr_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_XLr_ctrl_XLr_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_R_po_XLr_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_R_po_XLr_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_po_R_Rmw_PodWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_po_R_Rmw_PodWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_po_loc_XLr_Rmw_PodWR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_po_loc_XLr_Rmw_PodWR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_ctrl_XLr_Rmw_PodWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_ctrl_XLr_Rmw_PodWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_AMO_po_XLr_DpCtrldR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_AMO_po_XLr_DpCtrldR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_XLr_addr_R_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_XLr_addr_R_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_rmw_XSc_po_R_PosRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; 0:x10=0; , 0:x5=0; 0:x8=0; 0:x10=1; , 0:x5=0; 0:x8=1; 0:x10=0; , 0:x5=0; 0:x8=1; 0:x10=1; , 0:x5=1; 0:x8=1; 0:x10=0; , 0:x5=1; 0:x8=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_rmw_XSc_po_R_PosRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; 0:x10=0; , 0:x5=0; 0:x8=0; 0:x10=1; , 0:x5=0; 0:x8=1; 0:x10=0; , 0:x5=0; 0:x8=1; 0:x10=1; , 0:x5=1; 0:x8=1; 0:x10=0; , 0:x5=1; 0:x8=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_po_R_Rmw_PodWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_po_R_Rmw_PodWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_AMO_po_R_Rmw_PosWRRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_AMO_po_R_Rmw_PosWRRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_XLr_po_loc_XLr_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_XLr_po_loc_XLr_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_ctrl_R_Rmw_PodWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_ctrl_R_Rmw_PodWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_R_ctrl_XLr_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_R_ctrl_XLr_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_R_addr_XLr_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_R_addr_XLr_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_po_loc_R_Rmw_PodWR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_po_loc_R_Rmw_PodWR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_R_po_loc_XLr_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_R_po_loc_XLr_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_XLr_ctrl_XLr_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_XLr_ctrl_XLr_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_R_po_XLr_Rmw_RfiRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_R_po_XLr_Rmw_RfiRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.rw.rw+poxp': [1:x6=0; 1:x7=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; [x]=1; [y]=1; , 1:x6=0; 1:x7=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=1; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'S+fence.rw.rw+poxp': [1:x6=0; 1:x7=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; [x]=1; [y]=1; , 1:x6=0; 1:x7=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=1; [x]=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_XLr_ctrl_R_Rmw_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_XLr_ctrl_R_Rmw_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.rw.rw+popx': [1:x5=0; 1:x9=0; 1:x10=0; [x]=2; , 1:x5=0; 1:x9=0; 1:x10=1; [x]=2; , 1:x5=0; 1:x9=2; 1:x10=0; [x]=1; , 1:x5=0; 1:x9=2; 1:x10=1; [x]=2; , 1:x5=1; 1:x9=2; 1:x10=0; [x]=1; , 1:x5=1; 1:x9=2; 1:x10=1; [x]=2; ]}
now_herd_logs_ppo_remove {'S+fence.rw.rw+popx': [1:x5=0; 1:x9=0; 1:x10=0; [x]=2; , 1:x5=0; 1:x9=0; 1:x10=1; [x]=2; , 1:x5=0; 1:x9=2; 1:x10=0; [x]=1; , 1:x5=0; 1:x9=2; 1:x10=1; [x]=2; , 1:x5=1; 1:x9=2; 1:x10=0; [x]=1; , 1:x5=1; 1:x9=2; 1:x10=1; [x]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_R_ctrl_XLr_Rmw_PosWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_R_ctrl_XLr_Rmw_PosWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_W_po_XLr_DpCtrldW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_W_po_XLr_DpCtrldW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_addr_XLr_po_XLr_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_addr_XLr_po_XLr_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_po_R_Rmw_PodWRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_po_R_Rmw_PodWRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_ctrl_XLr_po_XLr_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'R_ctrl_XLr_po_XLr_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_po_loc_XLr_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_po_loc_XLr_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_addr_R_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_addr_R_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_XLr_ctrl_R_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_XLr_ctrl_R_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.rw.rw+poxp': [0:x5=0; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+fence.rw.rw+poxp': [0:x5=0; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_po_R_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_po_R_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_po_loc_R_Rmw_PodWRRlP_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_po_loc_R_Rmw_PodWRRlP_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_po_XLr_Rmw_PodWWRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_W_po_XLr_Rmw_PodWWRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_XLr_po_R_Rmw_Rfi_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_XLr_po_R_Rmw_Rfi_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_fri_W_po_XLr_Fri_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_fri_W_po_XLr_Fri_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_XLr_po_R_Rmw_RfiRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_XLr_po_R_Rmw_RfiRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_po_XLr_Rmw_PodWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_po_XLr_Rmw_PodWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_XLr_ctrl_R_Rmw_PosWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_XLr_ctrl_R_Rmw_PosWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_R_po_XLr_Rmw_PosWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_R_po_XLr_Rmw_PosWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_coi_W_po_XLr_Rmw_Coi_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_coi_W_po_XLr_Rmw_Coi_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_po_XLr_PodRRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_AQ_po_XLr_PodRRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_po_XLr_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_po_XLr_PodRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_ctrl_R_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_ctrl_R_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_ctrl_R_Rmw_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_ctrl_R_Rmw_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_addr_R_Rmw_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_addr_R_Rmw_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_coi_W_po_XLr_Rmw_CoiRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_coi_W_po_XLr_Rmw_CoiRlP_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_addr_XLr_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_addr_XLr_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_XLr_DpDatadW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_rfi_AMO_PodRR_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'R_po_AMO_rfi_AMO_PodRR_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_XLr_po_AQ_PosRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_XLr_po_AQ_PosRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_po_AMO_Rmw_PodWRRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_po_AMO_Rmw_PodWRRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_ctrl_W_PodRR_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_ctrl_W_PodRR_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_po_W_Rmw_PodWR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_po_W_Rmw_PodWR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_po_AQ_PodRW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_po_AQ_PodRW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_po_AMO_PodRRPAq_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'R_po_AQ_po_AMO_PodRRPAq_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_XLr_po_W_Rmw_Rfi_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=2; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_XLr_po_W_Rmw_Rfi_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=2; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_po_loc_R_Rmw_PodWRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_po_loc_R_Rmw_PodWRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_ctrl_AQ_Rmw_PodWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_ctrl_AQ_Rmw_PodWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_data_W_Rmw_PodWR_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_data_W_Rmw_PodWR_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_po_loc_W_Rmw_PodWRRlP_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_po_loc_W_Rmw_PodWRRlP_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_AQ_DpDatadW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_R_po_AMO_Rmw_PosWRRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_R_po_AMO_Rmw_PosWRRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_R_po_AQ_Rmw_Rfi_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_R_po_AQ_Rmw_Rfi_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_coi_W_Rmw_PodWRPAq_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_coi_W_Rmw_PodWRPAq_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_po_AMO_PodRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_po_AMO_PodRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_coi_W_po_AMO_Rmw_Coi_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_coi_W_po_AMO_Rmw_Coi_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_po_loc_AMO_Rmw_PodWR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_po_loc_AMO_Rmw_PodWR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_addr_W_PodRR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_addr_W_PodRR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_po_AMO_PodRR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_po_AMO_PodRR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_po_AMO_PodRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_po_AMO_PodRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_po_W_Rmw_PodWRRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_po_W_Rmw_PodWRRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_W_po_AMO_Rmw_PosWWRlP_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_W_po_AMO_Rmw_PosWWRlP_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_R_po_AQ_Rmw_PosWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_R_po_AQ_Rmw_PosWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_fri_W_PodRR_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; 0:x10=1; , 0:x5=0; 0:x7=0; 0:x10=2; , 0:x5=0; 0:x7=2; 0:x10=1; , 0:x5=1; 0:x7=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_fri_W_PodRR_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x7=0; 0:x10=1; , 0:x5=0; 0:x7=0; 0:x10=2; , 0:x5=0; 0:x7=2; 0:x10=1; , 0:x5=1; 0:x7=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_po_loc_W_PodRRPAq_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_po_loc_W_PodRRPAq_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_rmw_XSc_PodRR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=0; , 0:x5=0; 0:x10=2; 0:x11=0; , 0:x5=0; 0:x10=2; 0:x11=1; , 0:x5=1; 0:x10=1; 0:x11=0; , 0:x5=1; 0:x10=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_rmw_XSc_PodRR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=0; , 0:x5=0; 0:x10=2; 0:x11=0; , 0:x5=0; 0:x10=2; 0:x11=1; , 0:x5=1; 0:x10=1; 0:x11=0; , 0:x5=1; 0:x10=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_coi_W_PodRRPAq_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_coi_W_PodRRPAq_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_fri_W_po_AMO_Fri_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_fri_W_po_AMO_Fri_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_po_loc_AQ_PodRR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_po_loc_AQ_PodRR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_rfi_XLr_PodRW_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_rfi_XLr_PodRW_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_po_loc_AQ_PodRW_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'XLr_po_W_po_loc_AQ_PodRW_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_rfi_AMO_PodRW_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=2; , 0:x5=0; 0:x9=1; 0:x11=3; , 0:x5=0; 0:x9=3; 0:x11=2; , 0:x5=1; 0:x9=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'XLr_po_W_rfi_AMO_PodRW_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=2; , 0:x5=0; 0:x9=1; 0:x11=3; , 0:x5=0; 0:x9=3; 0:x11=2; , 0:x5=1; 0:x9=1; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_XLr_po_W_Rmw_PosWR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_XLr_po_W_Rmw_PosWR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_po_AQ_Rmw_PodWW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_po_AQ_Rmw_PodWW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_AMO_po_AMO_PosRR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_AMO_po_AMO_PosRR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_rfi_AQ_Rmw_PodWW_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x12=2; , 0:x6=0; 0:x10=1; 0:x12=3; , 0:x6=0; 0:x10=3; 0:x12=2; , 0:x6=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'AMO_po_W_rfi_AQ_Rmw_PodWW_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x12=2; , 0:x6=0; 0:x10=1; 0:x12=3; , 0:x6=0; 0:x10=3; 0:x12=2; , 0:x6=1; 0:x10=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_fri_W_Rmw_PodWRRlP_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; 0:x11=1; , 0:x6=0; 0:x8=0; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_fri_W_Rmw_PodWRRlP_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; 0:x11=1; , 0:x6=0; 0:x8=0; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_coi_W_Rmw_PodWR_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_coi_W_Rmw_PodWR_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_po_loc_XLr_PodRRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_AQ_po_loc_XLr_PodRRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_po_loc_XLr_Rmw_PodWW_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_po_loc_XLr_Rmw_PodWW_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_W_po_AQ_PosRW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_W_po_AQ_PosRW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_po_loc_W_Rmw_PodWR_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_po_loc_W_Rmw_PodWR_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_AMO_po_W_Rmw_Rfi_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_AMO_po_W_Rmw_Rfi_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_po_loc_XLr_PodRW_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_po_loc_XLr_PodRW_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x10=1; , 0:x5=0; 0:x9=1; 0:x10=2; , 0:x5=0; 0:x9=2; 0:x10=2; , 0:x5=1; 0:x9=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_rfi_R_PodRR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_rfi_R_PodRR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_AMO_po_AQ_PosRR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_AMO_po_AQ_PosRR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_rmw_XSc_po_W_PosRW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=0; , 0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=2; 0:x11=0; , 0:x5=0; 0:x10=2; 0:x11=1; , 0:x5=1; 0:x10=1; 0:x11=0; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_rmw_XSc_po_W_PosRW_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=0; , 0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=2; 0:x11=0; , 0:x5=0; 0:x10=2; 0:x11=1; , 0:x5=1; 0:x10=1; 0:x11=0; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_XLr_po_W_PosRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_XLr_po_W_PosRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_po_loc_AQ_PodRR_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'R_po_AMO_po_loc_AQ_PodRR_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_AMO_po_W_Rmw_PosWRRlP_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_AMO_po_W_Rmw_PosWRRlP_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_rfi_XLr_Rmw_PodWWRlP_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_W_rfi_XLr_Rmw_PodWWRlP_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_po_W_PodRRPAq_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_po_W_PodRRPAq_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_rfi_AMO_PodRRPAq_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'R_po_AQ_rfi_AMO_PodRRPAq_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_po_loc_AQ_Rmw_PodWW_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'AMO_po_W_po_loc_AQ_Rmw_PodWW_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_XLr_po_W_Rmw_PosWRRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_XLr_po_W_Rmw_PosWRRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_R_po_AMO_PosRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_R_po_AMO_PosRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_R_po_AQ_PosRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_R_po_AQ_PosRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_fri_W_po_AQ_Fri_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_fri_W_po_AQ_Fri_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_ctrl_AMO_Rmw_PodWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_ctrl_AMO_Rmw_PodWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_po_loc_XLr_PodRR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_po_loc_XLr_PodRR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_ctrl_W_Rmw_PodWRRlP_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_ctrl_W_Rmw_PodWRRlP_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_rfi_AMO_Rmw_PodWWRlP_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x12=2; , 0:x6=0; 0:x10=1; 0:x12=3; , 0:x6=0; 0:x10=3; 0:x12=2; , 0:x6=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'RL_po_W_rfi_AMO_Rmw_PodWWRlP_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x12=2; , 0:x6=0; 0:x10=1; 0:x12=3; , 0:x6=0; 0:x10=3; 0:x12=2; , 0:x6=1; 0:x10=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_po_loc_XLr_Rmw_PodWWRlP_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_W_po_loc_XLr_Rmw_PodWWRlP_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_po_AQ_PodRR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_po_AQ_PodRR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_addr_W_Rmw_PodWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_addr_W_Rmw_PodWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_po_AMO_Rmw_PodWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_po_AMO_Rmw_PodWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_po_AMO_PodRW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_W_po_AMO_PodRW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_rfi_AQ_PodRW_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=2; , 0:x5=0; 0:x9=1; 0:x11=3; , 0:x5=0; 0:x9=3; 0:x11=2; , 0:x5=1; 0:x9=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'XLr_po_W_rfi_AQ_PodRW_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=2; , 0:x5=0; 0:x9=1; 0:x11=3; , 0:x5=0; 0:x9=3; 0:x11=2; , 0:x5=1; 0:x9=1; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_W_po_loc_XLr_DpCtrldW_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_W_po_loc_XLr_DpCtrldW_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_rfi_R_Rmw_PodWR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_rfi_R_Rmw_PodWR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_po_W_Rmw_PodWRRlP_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_po_W_Rmw_PodWRRlP_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_ctrl_AMO_PodRR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_ctrl_AMO_PodRR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_po_W_Rmw_PodWR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_po_W_Rmw_PodWR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_ctrl_AMO_PodRR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_ctrl_AMO_PodRR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_W_po_loc_AMO_PodRW_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'XLr_po_W_po_loc_AMO_PodRW_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_ctrl_AQ_PodRR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_ctrl_AQ_PodRR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_po_loc_W_PodRR_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_po_loc_W_PodRR_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_rfi_AQ_PodRR_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'R_po_AMO_rfi_AQ_PodRR_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_po_loc_W_Rmw_PodWR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_po_loc_W_Rmw_PodWR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; , 0:x6=0; 0:x11=2; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_data_W_PodRR_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_data_W_PodRR_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_loc_XLr_po_AMO_PosRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_loc_XLr_po_AMO_PosRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_po_loc_R_PodRRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_po_loc_R_PodRRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_rfi_R_Rmw_PodWRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_rfi_R_Rmw_PodWRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_R_po_AMO_Rmw_PosWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_R_po_AMO_Rmw_PosWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_po_loc_AQ_Rmw_PodWR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_po_loc_AQ_Rmw_PodWR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_W_po_AQ_Rmw_PosWW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_W_po_AQ_Rmw_PosWW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_AMO_po_W_Rmw_RfiRlP_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_AMO_po_W_Rmw_RfiRlP_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_R_po_AMO_Rmw_RfiRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_R_po_AMO_Rmw_RfiRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_po_loc_AMO_Rmw_PodWWRlP_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'RL_po_W_po_loc_AMO_Rmw_PodWWRlP_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_W_po_AMO_PosRW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_W_po_AMO_PosRW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_rfi_XLr_PodRR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_AMO_rfi_XLr_PodRR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_W_po_AMO_Rmw_PosWW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_W_po_AMO_Rmw_PosWW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_coi_W_po_AQ_Rmw_Coi_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_coi_W_po_AQ_Rmw_Coi_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_po_AQ_PodRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_po_AQ_PodRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_po_loc_AMO_Rmw_PodWRRlP_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_po_loc_AMO_Rmw_PodWRRlP_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AMO_po_loc_AMO_PodRR_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'R_po_AMO_po_loc_AMO_PodRR_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_po_W_PodRR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_po_W_PodRR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_po_loc_AQ_PodRRPAq_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'R_po_AQ_po_loc_AQ_PodRRPAq_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_rfi_XLr_Rmw_PodWW_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_rfi_XLr_Rmw_PodWW_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x11=1; , 0:x6=0; 0:x10=1; 0:x11=2; , 0:x6=0; 0:x10=2; 0:x11=2; , 0:x6=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_po_loc_AQ_PodRR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_po_loc_AQ_PodRR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_ctrl_W_Rmw_PodWR_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_ctrl_W_Rmw_PodWR_DpCtrldW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_po_W_PodRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_po_W_PodRR_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_rfi_R_Rmw_PodWRRlP_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_rfi_R_Rmw_PodWRRlP_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_po_AMO_Rmw_PodWWRlP_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'RL_po_W_po_AMO_Rmw_PodWWRlP_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_po_AQ_PodRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_po_AQ_PodRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_addr_W_Rmw_PodWRRlP_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_addr_W_Rmw_PodWRRlP_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_AMO_po_W_Rmw_PosWR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_AMO_po_W_Rmw_PosWR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_coi_W_Rmw_PodWRRlP_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_coi_W_Rmw_PodWRRlP_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_rfi_AMO_Rmw_PodWW_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x12=2; , 0:x6=0; 0:x10=1; 0:x12=3; , 0:x6=0; 0:x10=3; 0:x12=2; , 0:x6=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'AMO_po_W_rfi_AMO_Rmw_PodWW_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x12=2; , 0:x6=0; 0:x10=1; 0:x12=3; , 0:x6=0; 0:x10=3; 0:x12=2; , 0:x6=1; 0:x10=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_po_W_Rmw_PodWRPAq_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_po_W_Rmw_PodWRPAq_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_po_loc_AMO_PodRR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_po_loc_AMO_PodRR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_po_loc_R_Rmw_PodWR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_po_loc_R_Rmw_PodWR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_AMO_po_W_PosRR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_AMO_po_W_PosRR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_po_loc_R_PodRR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_po_loc_R_PodRR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_fri_W_Rmw_PodWR_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; 0:x11=1; , 0:x6=0; 0:x8=0; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_fri_W_Rmw_PodWR_Fri_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=0; 0:x11=1; , 0:x6=0; 0:x8=0; 0:x11=2; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_rfi_R_PodRRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_rfi_R_PodRRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_R_po_AMO_Rmw_Rfi_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_R_po_AMO_Rmw_Rfi_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_po_loc_W_Rmw_PodWRPAq_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_po_loc_W_Rmw_PodWRPAq_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_po_loc_AMO_PodRRPAq_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'R_po_AQ_po_loc_AMO_PodRRPAq_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_coi_W_PodRR_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_coi_W_PodRR_Rmw_Coi_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=2; , 0:x5=0; 0:x11=3; , 0:x5=1; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_R_po_AQ_Rmw_PodWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_R_po_AQ_Rmw_PodWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_R_ctrl_AMO_Rmw_PodWRRlP_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'RL_po_R_ctrl_AMO_Rmw_PodWRRlP_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_po_AMO_Rmw_PodWW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_W_po_AMO_Rmw_PodWW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_po_loc_W_Rmw_PodWRRlP_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_po_loc_W_Rmw_PodWRRlP_Rmw_PosWW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_R_po_AQ_Rmw_RfiRlP_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_R_po_AQ_Rmw_RfiRlP_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_po_loc_R_Rmw_PodWRRlP_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_po_loc_R_Rmw_PodWRRlP_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_po_loc_W_PodRR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_po_loc_W_PodRR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; , 0:x5=0; 0:x10=2; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_XLr_ctrl_AQ_PodRR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'R_po_XLr_ctrl_AQ_PodRR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_XLr_po_W_Rmw_RfiRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=2; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_XLr_po_W_Rmw_RfiRlP_PodRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=1; , 0:x6=0; 0:x8=2; 0:x11=2; , 0:x6=1; 0:x8=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_W_rfi_AQ_Rmw_PodWWRlP_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x12=2; , 0:x6=0; 0:x10=1; 0:x12=3; , 0:x6=0; 0:x10=3; 0:x12=2; , 0:x6=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'RL_po_W_rfi_AQ_Rmw_PodWWRlP_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=1; 0:x12=2; , 0:x6=0; 0:x10=1; 0:x12=3; , 0:x6=0; 0:x10=3; 0:x12=2; , 0:x6=1; 0:x10=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_coi_W_po_AMO_Rmw_CoiRlP_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_coi_W_po_AMO_Rmw_CoiRlP_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_W_rfi_XLr_DpCtrldW_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=0; , 0:x5=0; 0:x9=1; 0:x11=1; , 0:x5=1; 0:x9=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_W_rfi_XLr_DpCtrldW_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=1; 0:x11=0; , 0:x5=0; 0:x9=1; 0:x11=1; , 0:x5=1; 0:x9=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_data_W_Rmw_PodWRRlP_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_data_W_Rmw_PodWRRlP_DpDatadW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_rfi_AQ_PodRRPAq_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'R_po_AQ_rfi_AQ_PodRRPAq_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_po_AQ_PodRRPAq_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'R_po_AQ_po_AQ_PodRRPAq_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_data_W_po_AMO_DpDatadW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_R_po_loc_AMO_PodRR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_R_po_loc_AMO_PodRR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R_po_AQ_rfi_XLr_PodRRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'R_po_AQ_rfi_XLr_PodRRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_W_po_loc_AMO_Rmw_PodWW_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'AMO_po_W_po_loc_AMO_Rmw_PodWW_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=2; , 0:x6=0; 0:x12=3; , 0:x6=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_AMO_po_W_Rfi_Rmw_PodWW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=1; 1:x9=3; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; , 0:x7=2; 1:x9=3; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_rfi_AMO_po_W_Rfi_Rmw_PodWW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=1; 1:x9=3; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; , 0:x7=2; 1:x9=3; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_ctrl_W_PodWR_DpCtrldW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_ctrl_W_PodWR_DpCtrldW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_coi_W_PodWR_Rmw_Coi_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'W_po_AMO_coi_W_PodWR_Rmw_Coi_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_W_rfi_AMO_PodWW_Rfi_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; 0:x11=2; , 0:x9=1; 1:x9=1; 0:x11=3; , 0:x9=1; 1:x9=2; 0:x11=2; , 0:x9=3; 1:x9=1; 0:x11=2; , 0:x9=3; 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'W_po_W_rfi_AMO_PodWW_Rfi_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; 0:x11=2; , 0:x9=1; 1:x9=1; 0:x11=3; , 0:x9=1; 1:x9=2; 0:x11=2; , 0:x9=3; 1:x9=1; 0:x11=2; , 0:x9=3; 1:x9=2; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_po_AMO_PodWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_R_po_AMO_PodWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_data_W_PosWR_DpDatadW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_data_W_PosWR_DpDatadW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_rfi_R_PodWRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_AQ_rfi_R_PodWRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_R_ctrl_AQ_Rfi_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_rfi_R_ctrl_AQ_Rfi_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_po_loc_R_PodWR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_po_loc_R_PodWR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_rfi_R_PodWR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_rfi_R_PodWR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_coi_W_po_AMO_Coi_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=3; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_coi_W_po_AMO_Coi_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=3; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_po_loc_W_PodWR_Rmw_PosWW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'W_po_AMO_po_loc_W_PodWR_Rmw_PosWW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_ctrl_AMO_PodWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_R_ctrl_AMO_PodWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_po_W_Rfi_PodRW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=2; , 0:x7=2; 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_po_W_Rfi_PodRW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=2; , 0:x7=2; 1:x9=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_addr_W_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_addr_W_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_W_po_AMO_PodWW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_W_po_AMO_PodWW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_W_po_AMO_PosWW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=3; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_W_po_AMO_PosWW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=3; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_W_po_AQ_PodWW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_W_po_AQ_PodWW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_W_rfi_AQ_PodWW_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; 0:x11=2; , 0:x9=1; 1:x9=1; 0:x11=3; , 0:x9=1; 1:x9=2; 0:x11=2; , 0:x9=3; 1:x9=1; 0:x11=2; , 0:x9=3; 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'W_po_W_rfi_AQ_PodWW_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; 0:x11=2; , 0:x9=1; 1:x9=1; 0:x11=3; , 0:x9=1; 1:x9=2; 0:x11=2; , 0:x9=3; 1:x9=1; 0:x11=2; , 0:x9=3; 1:x9=2; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_coi_W_PodWRPAq_Rmw_Coi_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'W_po_AQ_coi_W_PodWRPAq_Rmw_Coi_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_addr_W_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=2; , 0:x7=2; 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_addr_W_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=2; , 0:x7=2; 1:x9=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_po_W_PosWR_PodRW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_po_W_PosWR_PodRW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_data_W_PodWR_DpDatadW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_data_W_PodWR_DpDatadW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_po_loc_W_PodWR_PosRW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_po_loc_W_PodWR_PosRW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_R_ctrl_AMO_PosWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_R_ctrl_AMO_PosWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_po_W_PodWR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_po_W_PodWR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_ctrl_W_PosWR_DpCtrldW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_ctrl_W_PosWR_DpCtrldW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; , 1:x9=1; 0:x10=2; , 1:x9=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_R_ctrl_AMO_Rfi_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_rfi_R_ctrl_AMO_Rfi_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_po_loc_W_PodWRPAq_Rmw_PosWW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'W_po_AQ_po_loc_W_PodWRPAq_Rmw_PosWW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_po_loc_AMO_PodWR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_R_po_loc_AMO_PodWR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_po_AQ_PodWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_R_po_AQ_PodWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_R_po_AQ_PosWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_R_po_AQ_PosWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_fri_W_PodWR_Fri_Coe_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; 0:x10=1; , 0:x7=0; 1:x9=1; 0:x10=2; , 0:x7=2; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_fri_W_PodWR_Fri_Coe_Fence_rw_rwdWW_Coe': [0:x7=0; 1:x9=1; 0:x10=1; , 0:x7=0; 1:x9=1; 0:x10=2; , 0:x7=2; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_po_loc_R_PodWRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_AQ_po_loc_R_PodWRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_W_po_AQ_PosWW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=3; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_W_po_AQ_PosWW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=3; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_addr_W_PodWR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_addr_W_PodWR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_po_W_PodWR_PodRW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_po_W_PodWR_PodRW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_data_W_Rfi_DpDatadW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=2; , 0:x7=2; 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_data_W_Rfi_DpDatadW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=2; , 0:x7=2; 1:x9=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_R_po_AMO_PosWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_R_po_AMO_PosWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_W_po_loc_AQ_PodWW_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'W_po_W_po_loc_AQ_PodWW_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_ctrl_W_Rfi_DpCtrldW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=2; , 0:x7=2; 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_ctrl_W_Rfi_DpCtrldW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=1; , 0:x7=2; 1:x9=1; 0:x10=2; , 0:x7=2; 1:x9=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_R_ctrl_AQ_PosWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_R_ctrl_AQ_PosWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=2; , 0:x7=2; 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=2; , 0:x7=2; 1:x9=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_W_po_loc_XLr_PodWW_PosWR_Fre_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; 0:x10=1; , 0:x9=1; 1:x9=1; 0:x10=2; , 0:x9=1; 1:x9=2; 0:x10=1; , 0:x9=2; 1:x9=1; 0:x10=2; , 0:x9=2; 1:x9=2; 0:x10=2; ]}
now_herd_logs_ppo_remove {'W_po_W_po_loc_XLr_PodWW_PosWR_Fre_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; 0:x10=1; , 0:x9=1; 1:x9=1; 0:x10=2; , 0:x9=1; 1:x9=2; 0:x10=1; , 0:x9=2; 1:x9=1; 0:x10=2; , 0:x9=2; 1:x9=2; 0:x10=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_coi_W_po_AQ_Coi_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=3; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_coi_W_po_AQ_Coi_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=3; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_R_po_AQ_Rfi_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_rfi_R_po_AQ_Rfi_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_R_po_AMO_Rfi_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_rfi_R_po_AMO_Rfi_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_ctrl_AQ_PodWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_R_ctrl_AQ_PodWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_W_rfi_XLr_PodWW_Rfi_Fre_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; 0:x10=1; , 0:x9=1; 1:x9=1; 0:x10=2; , 0:x9=1; 1:x9=2; 0:x10=1; , 0:x9=2; 1:x9=1; 0:x10=2; , 0:x9=2; 1:x9=2; 0:x10=2; ]}
now_herd_logs_ppo_remove {'W_po_W_rfi_XLr_PodWW_Rfi_Fre_Fence_rw_rwdWW_Coe': [0:x9=1; 1:x9=1; 0:x10=1; , 0:x9=1; 1:x9=1; 0:x10=2; , 0:x9=1; 1:x9=2; 0:x10=1; , 0:x9=2; 1:x9=1; 0:x10=2; , 0:x9=2; 1:x9=2; 0:x10=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_po_W_PodWRPAq_Rmw_PodWW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_AQ_po_W_PodWRPAq_Rmw_PodWW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_AMO_po_W_PosWR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=3; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_AMO_po_W_PosWR_Rmw_PodWW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; , 1:x9=3; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_R_po_loc_AQ_PodWR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_R_po_loc_AQ_PodWR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_W_po_loc_AMO_PodWW_PosWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
now_herd_logs_ppo_remove {'W_po_W_po_loc_AMO_PodWW_PosWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=2; , 1:x9=1; 0:x11=3; , 1:x9=2; 0:x11=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_coi_W_po_loc_XLr_Rmw_CoiRlP_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'RL_coi_W_po_loc_XLr_Rmw_CoiRlP_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_W_po_loc_XLr_Rmw_PosWW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_W_po_loc_XLr_Rmw_PosWW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_coi_W_rfi_XLr_Rmw_Coi_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_coi_W_rfi_XLr_Rmw_Coi_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_W_rfi_XLr_Rmw_PosWW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_W_rfi_XLr_Rmw_PosWW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_fri_W_po_loc_XLr_Fri_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_fri_W_po_loc_XLr_Fri_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_fri_W_rfi_XLr_Fri_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_fri_W_rfi_XLr_Fri_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_coi_W_rfi_XLr_Rmw_CoiRlP_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
now_herd_logs_ppo_remove {'RL_coi_W_rfi_XLr_Rmw_CoiRlP_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_W_po_loc_XLr_Rmw_PosWWRlP_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_W_po_loc_XLr_Rmw_PosWWRlP_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_coi_W_po_loc_XLr_Rmw_Coi_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_coi_W_po_loc_XLr_Rmw_Coi_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_W_rfi_XLr_Rmw_PosWWRlP_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_W_rfi_XLr_Rmw_PosWWRlP_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=1; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=1; , 0:x6=0; 0:x9=3; 0:x14=2; , 0:x6=1; 0:x9=3; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_W_rfi_XLr_PosRW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_W_rfi_XLr_PosRW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=1; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=1; , 0:x5=0; 0:x8=2; 0:x13=2; , 0:x5=1; 0:x8=2; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_W_po_loc_XLr_PosRW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_W_po_loc_XLr_PosRW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_W_rfi_XLr_PosWW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x8=1; 1:x9=1; 0:x13=1; , 0:x8=3; 1:x9=1; 0:x13=1; , 0:x8=3; 1:x9=1; 0:x13=2; , 0:x8=3; 1:x9=2; 0:x13=1; , 0:x8=3; 1:x9=3; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_W_rfi_XLr_PosWW_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x8=1; 1:x9=1; 0:x13=1; , 0:x8=3; 1:x9=1; 0:x13=1; , 0:x8=3; 1:x9=1; 0:x13=2; , 0:x8=3; 1:x9=2; 0:x13=1; , 0:x8=3; 1:x9=3; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_W_po_loc_XLr_PosWW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; , 1:x9=3; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_W_po_loc_XLr_PosWW_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; , 1:x9=3; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_R_po_loc_XLr_PosWR_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_R_po_loc_XLr_PosWR_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_po_loc_R_Rfi_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=2; , 0:x7=2; 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_po_loc_R_Rfi_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=2; , 0:x7=2; 1:x9=2; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_po_loc_R_PosWR_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_po_loc_R_PosWR_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_R_po_loc_XLr_Rfi_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=2; , 0:x7=2; 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_rfi_R_po_loc_XLr_Rfi_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=2; , 0:x7=2; 1:x9=2; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_coi_W_po_loc_XLr_Coi_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; , 1:x9=3; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_coi_W_po_loc_XLr_Coi_PosWR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; , 1:x9=3; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_coi_W_rfi_XLr_Coi_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x8=1; 1:x9=1; 0:x13=1; , 0:x8=3; 1:x9=1; 0:x13=1; , 0:x8=3; 1:x9=1; 0:x13=2; , 0:x8=3; 1:x9=2; 0:x13=1; , 0:x8=3; 1:x9=3; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_coi_W_rfi_XLr_Coi_Rfi_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x8=1; 1:x9=1; 0:x13=1; , 0:x8=3; 1:x9=1; 0:x13=1; , 0:x8=3; 1:x9=1; 0:x13=2; , 0:x8=3; 1:x9=2; 0:x13=1; , 0:x8=3; 1:x9=3; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+data+poxp': [0:x5=0; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+data+poxp': [0:x5=0; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+ctrl+popx': [0:x5=0; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=0; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=1; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; ]}
now_herd_logs_ppo_remove {'LB+ctrl+popx': [0:x5=0; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=0; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=1; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxp+fence.tso': [0:x7=0; 0:x8=0; 1:x7=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; [x]=0; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxp+fence.tso': [0:x7=0; 0:x8=0; 1:x7=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; [x]=0; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsopx+fence.tso': [0:x8=0; 0:x9=0; 1:x7=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=1; [y]=2; , 0:x8=2; 0:x9=0; 1:x7=0; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsopx+fence.tso': [0:x8=0; 0:x9=0; 1:x7=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=1; [y]=2; , 0:x8=2; 0:x9=0; 1:x7=0; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+addr+popx': [0:x5=0; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=0; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=1; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; ]}
now_herd_logs_ppo_remove {'LB+addr+popx': [0:x5=0; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=0; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=1; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+addr+poxp': [0:x5=0; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+addr+poxp': [0:x5=0; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+ctrl+poxp': [0:x5=0; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+ctrl+poxp': [0:x5=0; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tso+fence.tsopx': [0:x7=0; 1:x8=1; 1:x9=0; [x]=1; , 0:x7=0; 1:x8=1; 1:x9=1; [x]=1; , 0:x7=1; 1:x8=0; 1:x9=0; [x]=1; , 0:x7=1; 1:x8=0; 1:x9=1; [x]=1; , 0:x7=1; 1:x8=1; 1:x9=0; [x]=1; , 0:x7=1; 1:x8=1; 1:x9=1; [x]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tso+fence.tsopx': [0:x7=0; 1:x8=1; 1:x9=0; [x]=1; , 0:x7=0; 1:x8=1; 1:x9=1; [x]=1; , 0:x7=1; 1:x8=0; 1:x9=0; [x]=1; , 0:x7=1; 1:x8=0; 1:x9=1; [x]=1; , 0:x7=1; 1:x8=1; 1:x9=0; [x]=1; , 0:x7=1; 1:x8=1; 1:x9=1; [x]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tso+fence.tsoxp': [0:x7=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tso+fence.tsoxp': [0:x7=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.tso+fence.tsopx': [1:x9=0; 1:x10=0; [x]=2; [y]=1; , 1:x9=0; 1:x10=1; [x]=2; [y]=1; , 1:x9=2; 1:x10=0; [x]=1; [y]=1; , 1:x9=2; 1:x10=0; [x]=1; [y]=2; , 1:x9=2; 1:x10=1; [x]=2; [y]=1; , 1:x9=2; 1:x10=1; [x]=2; [y]=2; ]}
now_herd_logs_ppo_remove {'2+2W+fence.tso+fence.tsopx': [1:x9=0; 1:x10=0; [x]=2; [y]=1; , 1:x9=0; 1:x10=1; [x]=2; [y]=1; , 1:x9=2; 1:x10=0; [x]=1; [y]=1; , 1:x9=2; 1:x10=0; [x]=1; [y]=2; , 1:x9=2; 1:x10=1; [x]=2; [y]=1; , 1:x9=2; 1:x10=1; [x]=2; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+data+popx': [0:x5=0; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=0; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=1; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; ]}
now_herd_logs_ppo_remove {'LB+data+popx': [0:x5=0; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=0; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=0; [x]=1; , 0:x5=0; 1:x5=1; 1:x9=0; 1:x10=1; [x]=0; , 0:x5=1; 1:x5=0; 1:x9=0; 1:x10=0; [x]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tso+fence.tsopx': [1:x8=0; 1:x9=0; [x]=1; [y]=1; , 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 1:x8=1; 1:x9=1; [x]=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tso+fence.tsopx': [1:x8=0; 1:x9=0; [x]=1; [y]=1; , 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 1:x8=1; 1:x9=1; [x]=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_rmw_XSc_po_XLr_PosRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; 0:x10=0; , 0:x5=0; 0:x8=0; 0:x10=1; , 0:x5=0; 0:x8=1; 0:x10=0; , 0:x5=0; 0:x8=1; 0:x10=1; , 0:x5=1; 0:x8=1; 0:x10=0; , 0:x5=1; 0:x8=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_rmw_XSc_po_XLr_PosRW_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; 0:x10=0; , 0:x5=0; 0:x8=0; 0:x10=1; , 0:x5=0; 0:x8=1; 0:x10=0; , 0:x5=0; 0:x8=1; 0:x10=1; , 0:x5=1; 0:x8=1; 0:x10=0; , 0:x5=1; 0:x8=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_po_XLr_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_po_XLr_PodRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_po_loc_XLr_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_po_loc_XLr_PodRR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_AMO_po_XLr_Rmw_PosWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_AMO_po_XLr_Rmw_PosWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_po_XLr_Rmw_PodWRRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_po_XLr_Rmw_PodWRRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_addr_XLr_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_addr_XLr_PodRR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_XLr_po_XLr_Rmw_Rfi_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_XLr_po_XLr_Rmw_Rfi_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_po_XLr_Rmw_PodWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_po_XLr_Rmw_PodWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'ISA-MP-DEP-SUCCESS-SWAP-SIMPLE': [1:x3=0; 1:x4=0; 1:x5=0; , 1:x3=0; 1:x4=0; 1:x5=2; , 1:x3=0; 1:x4=1; 1:x5=0; , 1:x3=0; 1:x4=1; 1:x5=2; , 1:x3=1; 1:x4=0; 1:x5=2; , 1:x3=1; 1:x4=1; 1:x5=2; ]}
now_herd_logs_ppo_remove {'ISA-MP-DEP-SUCCESS-SWAP-SIMPLE': [1:x3=0; 1:x4=0; 1:x5=0; , 1:x3=0; 1:x4=0; 1:x5=2; , 1:x3=0; 1:x4=1; 1:x5=0; , 1:x3=0; 1:x4=1; 1:x5=2; , 1:x3=1; 1:x4=0; 1:x5=2; , 1:x3=1; 1:x4=1; 1:x5=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_XLr_ctrl_XLr_Rmw_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_XLr_ctrl_XLr_Rmw_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_XLr_po_XLr_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_XLr_po_XLr_PosRR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_AMO_po_XLr_Rmw_PosWRRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_AMO_po_XLr_Rmw_PosWRRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_po_XLr_PodRRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_po_XLr_PodRRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_XLr_ctrl_XLr_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_XLr_ctrl_XLr_DpCtrldR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_AMO_po_XLr_Rmw_Rfi_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x10=1; , 0:x6=0; 0:x8=2; 0:x10=0; , 0:x6=0; 0:x8=2; 0:x10=1; , 0:x6=1; 0:x8=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_AMO_po_XLr_Rmw_Rfi_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x10=1; , 0:x6=0; 0:x8=2; 0:x10=0; , 0:x6=0; 0:x8=2; 0:x10=1; , 0:x6=1; 0:x8=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_po_loc_XLr_Rmw_PodWR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_po_loc_XLr_Rmw_PodWR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_XLr_ctrl_XLr_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_XLr_ctrl_XLr_DpAddrdR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_ctrl_XLr_Rmw_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_ctrl_XLr_Rmw_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_po_XLr_Rmw_PodWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_po_XLr_Rmw_PodWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_ctrl_XLr_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_ctrl_XLr_PodRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_ctrl_XLr_Rmw_PodWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_ctrl_XLr_Rmw_PodWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_addr_XLr_po_XLr_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_addr_XLr_po_XLr_DpAddrdR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=0; , 0:x5=0; 0:x11=1; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_XLr_ctrl_XLr_Rmw_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_XLr_ctrl_XLr_Rmw_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_XLr_ctrl_XLr_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_XLr_ctrl_XLr_PosRR_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x8=0; , 0:x5=0; 0:x8=1; , 0:x5=1; 0:x8=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_XLr_po_XLr_Rmw_PosWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_XLr_po_XLr_Rmw_PosWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_AMO_po_XLr_DpCtrldR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_AMO_po_XLr_DpCtrldR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_AMO_po_XLr_PosRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_AMO_po_XLr_PosRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_po_XLr_PodRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_po_XLr_PodRR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_XLr_ctrl_XLr_Rmw_RfiRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_XLr_ctrl_XLr_Rmw_RfiRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_AMO_po_XLr_Rmw_RfiRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x10=1; , 0:x6=0; 0:x8=2; 0:x10=0; , 0:x6=0; 0:x8=2; 0:x10=1; , 0:x6=1; 0:x8=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_AMO_po_XLr_Rmw_RfiRlP_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x10=1; , 0:x6=0; 0:x8=2; 0:x10=0; , 0:x6=0; 0:x8=2; 0:x10=1; , 0:x6=1; 0:x8=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_XLr_po_XLr_Rmw_RfiRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_XLr_po_XLr_Rmw_RfiRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x9=1; , 0:x6=0; 0:x8=2; 0:x9=0; , 0:x6=0; 0:x8=2; 0:x9=1; , 0:x6=1; 0:x8=2; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_po_XLr_Rmw_PodWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_po_XLr_Rmw_PodWRRlP_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_XLr_addr_XLr_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_XLr_addr_XLr_DpCtrldR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; , 0:x5=0; 0:x10=1; , 0:x5=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_XLr_po_XLr_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_XLr_po_XLr_DpCtrldR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_po_XLr_Rmw_PodWRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_po_XLr_Rmw_PodWRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_addr_XLr_Rmw_PodWRRlP_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_addr_XLr_Rmw_PodWRRlP_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_addr_XLr_Rmw_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_addr_XLr_Rmw_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; , 0:x6=0; 0:x11=1; , 0:x6=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_po_loc_XLr_Rmw_PodWRRlP_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_po_loc_XLr_Rmw_PodWRRlP_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x10=0; , 0:x6=0; 0:x10=1; , 0:x6=1; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_XLr_po_XLr_Rmw_PosWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_XLr_po_XLr_Rmw_PosWR_PodRR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_XLr_ctrl_XLr_Rmw_PosWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_XLr_ctrl_XLr_Rmw_PosWRRlP_DpCtrldR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x9=0; , 0:x6=0; 0:x9=1; , 0:x6=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_ctrl_XLr_po_loc_XLr_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
now_herd_logs_ppo_remove {'XLr_ctrl_XLr_po_loc_XLr_DpCtrldR_PosRR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x9=0; , 0:x5=0; 0:x9=1; , 0:x5=1; 0:x9=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+addr+addrpx-poxp+VAR2': [0:x5=0; 1:x5=0; 1:x11=0; , 0:x5=0; 1:x5=0; 1:x11=1; , 0:x5=0; 1:x5=1; 1:x11=0; , 0:x5=0; 1:x5=1; 1:x11=1; , 0:x5=1; 1:x5=0; 1:x11=0; , 0:x5=1; 1:x5=0; 1:x11=1; ]}
now_herd_logs_ppo_remove {'LB+addr+addrpx-poxp+VAR2': [0:x5=0; 1:x5=0; 1:x11=0; , 0:x5=0; 1:x5=0; 1:x11=1; , 0:x5=0; 1:x5=1; 1:x11=0; , 0:x5=0; 1:x5=1; 1:x11=1; , 0:x5=1; 1:x5=0; 1:x11=0; , 0:x5=1; 1:x5=0; 1:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+data+datapx-dataxp': [0:x5=0; 1:x5=0; 1:x10=0; [z]=1; , 0:x5=0; 1:x5=0; 1:x10=1; [z]=0; , 0:x5=0; 1:x5=1; 1:x10=0; [z]=1; , 0:x5=0; 1:x5=1; 1:x10=1; [z]=0; , 0:x5=1; 1:x5=0; 1:x10=0; [z]=1; , 0:x5=1; 1:x5=0; 1:x10=1; [z]=0; ]}
now_herd_logs_ppo_remove {'LB+data+datapx-dataxp': [0:x5=0; 1:x5=0; 1:x10=0; [z]=1; , 0:x5=0; 1:x5=0; 1:x10=1; [z]=0; , 0:x5=0; 1:x5=1; 1:x10=0; [z]=1; , 0:x5=0; 1:x5=1; 1:x10=1; [z]=0; , 0:x5=1; 1:x5=0; 1:x10=0; [z]=1; , 0:x5=1; 1:x5=0; 1:x10=1; [z]=0; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_rfi_AQ_Rmw_PodWR_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_rfi_AQ_Rmw_PodWR_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_rfi_AQ_PodRRPAq_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_rfi_AQ_PodRRPAq_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_po_loc_AMO_Rmw_PodWR_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=2; , 0:x6=0; 0:x13=3; , 0:x6=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_po_loc_AMO_Rmw_PodWR_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=2; , 0:x6=0; 0:x13=3; , 0:x6=1; 0:x13=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_po_loc_AQ_PodRR_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_po_loc_AQ_PodRR_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_po_AQ_Rmw_PodWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_po_AQ_Rmw_PodWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_XLr_po_AQ_Rmw_Rfi_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_XLr_po_AQ_Rmw_Rfi_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_po_AMO_Rmw_PodWRRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_po_AMO_Rmw_PodWRRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_po_loc_AMO_PodRR_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_po_loc_AMO_PodRR_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_rfi_AQ_PodRR_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_rfi_AQ_PodRR_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_rfi_XLr_PodRRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_rfi_XLr_PodRRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_po_AQ_Rmw_PodWR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_po_AQ_Rmw_PodWR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_po_AQ_PodRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_po_AQ_PodRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_XLr_po_AMO_Rmw_RfiRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_XLr_po_AMO_Rmw_RfiRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_po_loc_AQ_Rmw_PodWRPAq_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=2; , 0:x6=0; 0:x13=3; , 0:x6=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_po_loc_AQ_Rmw_PodWRPAq_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=2; , 0:x6=0; 0:x13=3; , 0:x6=1; 0:x13=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_po_AMO_PodRRPAq_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_po_AMO_PodRRPAq_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_rfi_AMO_Rmw_PodWR_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_rfi_AMO_Rmw_PodWR_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_rfi_AQ_Rmw_PodWRPAq_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_rfi_AQ_Rmw_PodWRPAq_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_AMO_po_AMO_Rmw_Rfi_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=2; , 0:x6=1; 0:x8=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_AMO_po_AMO_Rmw_Rfi_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=2; , 0:x6=1; 0:x8=2; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_AMO_po_AMO_Rmw_RfiRlP_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=2; , 0:x6=1; 0:x8=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_AMO_po_AMO_Rmw_RfiRlP_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=2; , 0:x6=1; 0:x8=2; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_XLr_po_AQ_Rmw_PosWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_XLr_po_AQ_Rmw_PosWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_ctrl_AMO_Rmw_PodWRRlP_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_ctrl_AMO_Rmw_PodWRRlP_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_rfi_AQ_Rmw_PodWRRlP_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_rfi_AQ_Rmw_PodWRRlP_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_ctrl_AQ_Rmw_PodWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_ctrl_AQ_Rmw_PodWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_po_loc_XLr_Rmw_PodWR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_po_loc_XLr_Rmw_PodWR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_XLr_po_AMO_Rmw_Rfi_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_XLr_po_AMO_Rmw_Rfi_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_po_loc_XLr_PodRRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_po_loc_XLr_PodRRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_po_loc_AQ_Rmw_PodWR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_po_loc_AQ_Rmw_PodWR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_po_AMO_Rmw_PodWRRlP_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_po_AMO_Rmw_PodWRRlP_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_rfi_AMO_po_AQ_Rmw_Rfi_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=2; , 0:x6=1; 0:x8=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_rfi_AMO_po_AQ_Rmw_Rfi_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=2; , 0:x6=1; 0:x8=2; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_po_loc_AQ_Rmw_PodWR_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=2; , 0:x6=0; 0:x13=3; , 0:x6=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_po_loc_AQ_Rmw_PodWR_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=2; , 0:x6=0; 0:x13=3; , 0:x6=1; 0:x13=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_XLr_po_AQ_Rmw_RfiRlP_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_XLr_po_AQ_Rmw_RfiRlP_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=1; , 0:x6=0; 0:x8=2; 0:x12=2; , 0:x6=1; 0:x8=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_rfi_XLr_PodRR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_rfi_XLr_PodRR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_po_loc_AMO_Rmw_PodWRRlP_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_po_loc_AMO_Rmw_PodWRRlP_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_po_loc_AQ_PodRR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_po_loc_AQ_PodRR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_po_loc_XLr_Rmw_PodWRRlP_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_po_loc_XLr_Rmw_PodWRRlP_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_XLr_rmw_XSc_Rmw_PodWRRlP_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=0; , 0:x6=0; 0:x11=2; 0:x12=0; , 0:x6=0; 0:x11=2; 0:x12=1; , 0:x6=1; 0:x11=1; 0:x12=0; , 0:x6=1; 0:x11=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_XLr_rmw_XSc_Rmw_PodWRRlP_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=0; , 0:x6=0; 0:x11=2; 0:x12=0; , 0:x6=0; 0:x11=2; 0:x12=1; , 0:x6=1; 0:x11=1; 0:x12=0; , 0:x6=1; 0:x11=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_rmw_XSc_po_AMO_PosRW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; 0:x12=0; , 0:x5=0; 0:x11=1; 0:x12=1; , 0:x5=0; 0:x11=2; 0:x12=0; , 0:x5=0; 0:x11=2; 0:x12=1; , 0:x5=1; 0:x11=1; 0:x12=0; , 0:x5=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_rmw_XSc_po_AMO_PosRW_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; 0:x12=0; , 0:x5=0; 0:x11=1; 0:x12=1; , 0:x5=0; 0:x11=2; 0:x12=0; , 0:x5=0; 0:x11=2; 0:x12=1; , 0:x5=1; 0:x11=1; 0:x12=0; , 0:x5=1; 0:x11=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_AMO_po_AMO_PosRR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_AMO_po_AMO_PosRR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_rfi_AMO_Rmw_PodWRPAq_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_rfi_AMO_Rmw_PodWRPAq_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_ctrl_AQ_PodRR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_ctrl_AQ_PodRR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_po_AQ_PodRRPAq_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_po_AQ_PodRRPAq_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_po_AMO_Rmw_PodWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_po_AMO_Rmw_PodWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_XLr_po_AMO_Rmw_PosWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_XLr_po_AMO_Rmw_PosWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_AMO_po_AMO_Rmw_PosWR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_AMO_po_AMO_Rmw_PosWR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_po_loc_XLr_PodRR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_po_loc_XLr_PodRR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=2; , 0:x5=0; 0:x10=2; 0:x11=2; , 0:x5=1; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_ctrl_AMO_PodRR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_ctrl_AMO_PodRR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_rfi_AMO_PodRR_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_rfi_AMO_PodRR_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_po_loc_XLr_Rmw_PodWRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_po_loc_XLr_Rmw_PodWRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'ISA-MP-DEP-SUCCESS-SWAP': [1:x2=0; 1:x4=0; 1:x5=0; , 1:x2=0; 1:x4=0; 1:x5=2; , 1:x2=0; 1:x4=1; 1:x5=0; , 1:x2=0; 1:x4=1; 1:x5=2; , 1:x2=1; 1:x4=0; 1:x5=2; , 1:x2=1; 1:x4=1; 1:x5=2; ]}
now_herd_logs_ppo_remove {'ISA-MP-DEP-SUCCESS-SWAP': [1:x2=0; 1:x4=0; 1:x5=0; , 1:x2=0; 1:x4=0; 1:x5=2; , 1:x2=0; 1:x4=1; 1:x5=0; , 1:x2=0; 1:x4=1; 1:x5=2; , 1:x2=1; 1:x4=0; 1:x5=2; , 1:x2=1; 1:x4=1; 1:x5=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_AMO_po_AMO_Rmw_PosWRRlP_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_AMO_po_AMO_Rmw_PosWRRlP_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_po_loc_AMO_Rmw_PodWRPAq_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=2; , 0:x6=0; 0:x13=3; , 0:x6=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_po_loc_AMO_Rmw_PodWRPAq_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=2; , 0:x6=0; 0:x13=3; , 0:x6=1; 0:x13=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_ctrl_AMO_Rmw_PodWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_ctrl_AMO_Rmw_PodWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_rfi_XLr_Rmw_PodWR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_rfi_XLr_Rmw_PodWR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_XLr_po_AQ_PosRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_XLr_po_AQ_PosRR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_loc_AMO_po_AQ_Rmw_PosWR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'AMO_po_loc_AMO_po_AQ_Rmw_PosWR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=1; , 0:x6=0; 0:x13=2; , 0:x6=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_rmw_XSc_PodRR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=0; , 0:x5=0; 0:x10=2; 0:x11=0; , 0:x5=0; 0:x10=2; 0:x11=1; , 0:x5=1; 0:x10=1; 0:x11=0; , 0:x5=1; 0:x10=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_rmw_XSc_PodRR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=0; 0:x11=1; , 0:x5=0; 0:x10=1; 0:x11=0; , 0:x5=0; 0:x10=2; 0:x11=0; , 0:x5=0; 0:x10=2; 0:x11=1; , 0:x5=1; 0:x10=1; 0:x11=0; , 0:x5=1; 0:x10=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_rmw_XSc_Rmw_PodWR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=0; , 0:x6=0; 0:x11=2; 0:x12=0; , 0:x6=0; 0:x11=2; 0:x12=1; , 0:x6=1; 0:x11=1; 0:x12=0; , 0:x6=1; 0:x11=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_rmw_XSc_Rmw_PodWR_PosRW_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=0; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=0; , 0:x6=0; 0:x11=2; 0:x12=0; , 0:x6=0; 0:x11=2; 0:x12=1; , 0:x6=1; 0:x11=1; 0:x12=0; , 0:x6=1; 0:x11=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_po_loc_AMO_PodRR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_po_loc_AMO_PodRR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_po_AQ_Rmw_PodWRPAq_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_po_AQ_Rmw_PodWRPAq_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_XLr_po_AMO_PodRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_XLr_po_AMO_PodRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_rfi_AMO_po_AQ_Rmw_RfiRlP_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=2; , 0:x6=1; 0:x8=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'RL_rfi_AMO_po_AQ_Rmw_RfiRlP_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x8=1; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=1; , 0:x6=0; 0:x8=2; 0:x13=2; , 0:x6=1; 0:x8=2; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AMO_po_AMO_Rmw_PodWR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AMO_po_AMO_Rmw_PodWR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_rfi_XLr_Rmw_PodWRRlP_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_rfi_XLr_Rmw_PodWRRlP_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_AMO_po_AQ_PosRR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_AMO_po_AQ_PosRR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=1; , 0:x5=0; 0:x12=2; , 0:x5=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_rfi_AMO_Rmw_PodWRRlP_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_rfi_AMO_Rmw_PodWRRlP_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x13=2; , 0:x6=0; 0:x11=1; 0:x13=3; , 0:x6=0; 0:x11=3; 0:x13=2; , 0:x6=1; 0:x11=1; 0:x13=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_loc_XLr_po_AMO_Rmw_PosWRRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'RL_po_loc_XLr_po_AMO_Rmw_PosWRRlP_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_po_AMO_Rmw_PodWRPAq_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_po_AMO_Rmw_PodWRPAq_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x14=1; , 0:x6=0; 0:x14=2; , 0:x6=1; 0:x14=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_po_AMO_PodRR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_po_AMO_PodRR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_po_loc_AQ_PodRRPAq_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_po_loc_AQ_PodRRPAq_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_XLr_po_loc_AMO_Rmw_PodWR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_XLr_po_loc_AMO_Rmw_PodWR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x12=1; , 0:x6=0; 0:x12=2; , 0:x6=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_rfi_AMO_PodRRPAq_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_rfi_AMO_PodRRPAq_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x10=1; 0:x12=2; , 0:x5=0; 0:x10=1; 0:x12=3; , 0:x5=0; 0:x10=3; 0:x12=2; , 0:x5=1; 0:x10=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_rmw_XSc_po_AQ_PosRW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; 0:x12=0; , 0:x5=0; 0:x11=1; 0:x12=1; , 0:x5=0; 0:x11=2; 0:x12=0; , 0:x5=0; 0:x11=2; 0:x12=1; , 0:x5=1; 0:x11=1; 0:x12=0; , 0:x5=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'XLr_rmw_XSc_po_AQ_PosRW_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; 0:x12=0; , 0:x5=0; 0:x11=1; 0:x12=1; , 0:x5=0; 0:x11=2; 0:x12=0; , 0:x5=0; 0:x11=2; 0:x12=1; , 0:x5=1; 0:x11=1; 0:x12=0; , 0:x5=1; 0:x11=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'AMO_po_AQ_rfi_XLr_Rmw_PodWRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
now_herd_logs_ppo_remove {'AMO_po_AQ_rfi_XLr_Rmw_PodWRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x11=1; 0:x12=1; , 0:x6=0; 0:x11=1; 0:x12=2; , 0:x6=0; 0:x11=2; 0:x12=2; , 0:x6=1; 0:x11=1; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AQ_po_loc_AMO_PodRRPAq_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'XLr_po_AQ_po_loc_AMO_PodRRPAq_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x12=2; , 0:x5=0; 0:x12=3; , 0:x5=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_loc_XLr_po_AMO_PosRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'XLr_po_loc_XLr_po_AMO_PosRR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x11=1; , 0:x5=0; 0:x11=2; , 0:x5=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'XLr_po_AMO_po_AQ_PodRR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
now_herd_logs_ppo_remove {'XLr_po_AMO_po_AQ_PodRR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x5=0; 0:x13=1; , 0:x5=0; 0:x13=2; , 0:x5=1; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'RL_po_AMO_po_loc_AMO_Rmw_PodWRRlP_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=2; , 0:x6=0; 0:x13=3; , 0:x6=1; 0:x13=2; ]}
now_herd_logs_ppo_remove {'RL_po_AMO_po_loc_AMO_Rmw_PodWRRlP_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Rfe': [0:x6=0; 0:x13=2; , 0:x6=0; 0:x13=3; , 0:x6=1; 0:x13=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_addr_XLr_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_addr_XLr_PosWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_ctrl_XLr_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_ctrl_XLr_Rfi_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_po_XLr_PodWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_XLr_po_XLr_PodWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_po_XLr_Rfi_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_po_XLr_Rfi_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=0; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=1; , 0:x7=2; 0:x8=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_ctrl_XLr_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_ctrl_XLr_PosWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_po_XLr_PosWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_po_XLr_PosWR_PodRR_Fre_Fence_rw_rwdWW_Coe': [0:x8=0; 1:x9=1; , 0:x8=1; 1:x9=1; , 0:x8=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_po_loc_XLr_PodWR_PosRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_XLr_po_loc_XLr_PodWR_PosRR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_ctrl_XLr_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_po_XLr_ctrl_XLr_PodWR_DpCtrldR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_AMO_po_XLr_Rfi_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=1; 0:x9=1; 1:x9=3; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; , 0:x7=2; 0:x9=1; 1:x9=3; ]}
now_herd_logs_ppo_remove {'W_rfi_AMO_po_XLr_Rfi_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=1; 0:x9=1; 1:x9=3; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; , 0:x7=2; 0:x9=1; 1:x9=3; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_AMO_po_XLr_PosWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=1; 1:x9=3; ]}
now_herd_logs_ppo_remove {'W_po_loc_AMO_po_XLr_PosWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [0:x9=0; 1:x9=1; , 0:x9=1; 1:x9=1; , 0:x9=1; 1:x9=2; , 0:x9=1; 1:x9=3; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_addr_XLr_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_addr_XLr_PodWR_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_po_XLr_PodWRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_AQ_po_XLr_PodWRPAq_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_addr_XLr_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_addr_XLr_Rfi_DpAddrdR_Fre_Fence_rw_rwdWW_Coe': [0:x7=1; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=0; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=1; , 0:x7=2; 0:x9=1; 1:x9=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_po_XLr_PodWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_po_XLr_PodWR_Rmw_PodWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; , 1:x9=1; 0:x10=1; , 1:x9=2; 0:x10=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_ctrl_AMO_Rfi_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_ctrl_AMO_Rfi_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_po_loc_AQ_PodWRPAq_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=2; , 1:x9=1; 0:x12=3; , 1:x9=2; 0:x12=2; ]}
now_herd_logs_ppo_remove {'W_po_AQ_po_loc_AQ_PodWRPAq_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=2; , 1:x9=1; 0:x12=3; , 1:x9=2; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_rfi_AQ_PodWR_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x12=2; , 1:x9=1; 0:x10=1; 0:x12=3; , 1:x9=1; 0:x10=3; 0:x12=2; , 1:x9=2; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'W_po_AMO_rfi_AQ_PodWR_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x12=2; , 1:x9=1; 0:x10=1; 0:x12=3; , 1:x9=1; 0:x10=3; 0:x12=2; , 1:x9=2; 0:x10=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_po_AMO_PodWR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_po_AMO_PodWR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_AMO_po_AQ_PosWR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; , 1:x9=3; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_AMO_po_AQ_PosWR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; , 1:x9=3; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_po_loc_XLr_PodWR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_po_loc_XLr_PodWR_Rmw_PosWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_po_loc_AMO_PodWR_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=2; , 1:x9=1; 0:x12=3; , 1:x9=2; 0:x12=2; ]}
now_herd_logs_ppo_remove {'W_po_AMO_po_loc_AMO_PodWR_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=2; , 1:x9=1; 0:x12=3; , 1:x9=2; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_rfi_AMO_PodWRPAq_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x12=2; , 1:x9=1; 0:x10=1; 0:x12=3; , 1:x9=1; 0:x10=3; 0:x12=2; , 1:x9=2; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'W_po_AQ_rfi_AMO_PodWRPAq_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x12=2; , 1:x9=1; 0:x10=1; 0:x12=3; , 1:x9=1; 0:x10=3; 0:x12=2; , 1:x9=2; 0:x10=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_po_loc_AQ_PodWR_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=2; , 1:x9=1; 0:x12=3; , 1:x9=2; 0:x12=2; ]}
now_herd_logs_ppo_remove {'W_po_AMO_po_loc_AQ_PodWR_Rmw_PosWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=2; , 1:x9=1; 0:x12=3; , 1:x9=2; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_rfi_AQ_PodWRPAq_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x12=2; , 1:x9=1; 0:x10=1; 0:x12=3; , 1:x9=1; 0:x10=3; 0:x12=2; , 1:x9=2; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'W_po_AQ_rfi_AQ_PodWRPAq_Rmw_RfiPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x12=2; , 1:x9=1; 0:x10=1; 0:x12=3; , 1:x9=1; 0:x10=3; 0:x12=2; , 1:x9=2; 0:x10=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_po_AQ_PosWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_po_AQ_PosWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_po_AQ_PodWRPAq_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_po_AQ_po_AQ_PodWRPAq_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_rmw_XSc_PodWR_PosRW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=0; , 1:x9=1; 0:x10=2; 0:x11=0; , 1:x9=1; 0:x10=2; 0:x11=1; , 1:x9=2; 0:x10=1; 0:x11=0; , 1:x9=2; 0:x10=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_rmw_XSc_PodWR_PosRW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=0; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=0; , 1:x9=1; 0:x10=2; 0:x11=0; , 1:x9=1; 0:x10=2; 0:x11=1; , 1:x9=2; 0:x10=1; 0:x11=0; , 1:x9=2; 0:x10=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_po_loc_AQ_PodWR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_po_loc_AQ_PodWR_PosRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_po_AQ_PodWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_po_AQ_PodWR_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_rfi_XLr_PodWRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_AQ_rfi_XLr_PodWRPAq_Rmw_Rfi_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_AMO_po_AMO_PosWR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; , 1:x9=3; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_AMO_po_AMO_PosWR_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; , 1:x9=3; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_ctrl_AQ_Rfi_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_ctrl_AQ_Rfi_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_po_loc_AMO_PodWR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_po_loc_AMO_PodWR_PosRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_po_loc_AMO_PodWRPAq_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=2; , 1:x9=1; 0:x12=3; , 1:x9=2; 0:x12=2; ]}
now_herd_logs_ppo_remove {'W_po_AQ_po_loc_AMO_PodWRPAq_Rmw_PosWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=2; , 1:x9=1; 0:x12=3; , 1:x9=2; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_po_AMO_PosWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_po_AMO_PosWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_po_loc_XLr_PodWRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_AQ_po_loc_XLr_PodWRPAq_Rmw_PosWR_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_ctrl_AQ_PosWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_ctrl_AQ_PosWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_ctrl_AMO_PodWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_ctrl_AMO_PodWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_po_AQ_PodWR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_po_AQ_PodWR_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_po_AMO_PodWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_po_AMO_PodWR_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_AMO_po_AQ_Rfi_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x12=1; , 0:x7=1; 1:x9=3; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=2; , 0:x7=2; 1:x9=2; 0:x12=1; , 0:x7=2; 1:x9=3; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_rfi_AMO_po_AQ_Rfi_Rmw_PodWRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x12=1; , 0:x7=1; 1:x9=3; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=2; , 0:x7=2; 1:x9=2; 0:x12=1; , 0:x7=2; 1:x9=3; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_rfi_AMO_PodWR_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x12=2; , 1:x9=1; 0:x10=1; 0:x12=3; , 1:x9=1; 0:x10=3; 0:x12=2; , 1:x9=2; 0:x10=1; 0:x12=2; ]}
now_herd_logs_ppo_remove {'W_po_AMO_rfi_AMO_PodWR_Rmw_Rfi_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x12=2; , 1:x9=1; 0:x10=1; 0:x12=3; , 1:x9=1; 0:x10=3; 0:x12=2; , 1:x9=2; 0:x10=1; 0:x12=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_AMO_po_AMO_Rfi_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x12=1; , 0:x7=1; 1:x9=3; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=2; , 0:x7=2; 1:x9=2; 0:x12=1; , 0:x7=2; 1:x9=3; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_rfi_AMO_po_AMO_Rfi_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x12=1; , 0:x7=1; 1:x9=3; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=1; , 0:x7=2; 1:x9=1; 0:x12=2; , 0:x7=2; 1:x9=2; 0:x12=1; , 0:x7=2; 1:x9=3; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_po_AMO_Rfi_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_po_AMO_Rfi_PodRR_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AQ_po_AMO_PodWRPAq_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_po_AQ_po_AMO_PodWRPAq_Rmw_PodWR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_ctrl_AMO_PosWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_ctrl_AMO_PosWR_DpCtrldR_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x11=1; , 1:x9=1; 0:x11=2; , 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_XLr_ctrl_AQ_PodWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
now_herd_logs_ppo_remove {'W_po_XLr_ctrl_AQ_PodWR_DpCtrldRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x12=1; , 1:x9=1; 0:x12=2; , 1:x9=2; 0:x12=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_po_AQ_Rfi_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_po_AQ_Rfi_PodRRPAq_Rmw_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=1; , 0:x7=2; 1:x9=1; 0:x11=2; , 0:x7=2; 1:x9=2; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_AMO_rfi_XLr_PodWR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
now_herd_logs_ppo_remove {'W_po_AMO_rfi_XLr_PodWR_Rmw_Rfi_Fre_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x10=1; 0:x11=1; , 1:x9=1; 0:x10=1; 0:x11=2; , 1:x9=1; 0:x10=2; 0:x11=2; , 1:x9=2; 0:x10=1; 0:x11=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_rfi_XLr_po_loc_XLr_Rfi_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=2; , 0:x7=2; 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_rfi_XLr_po_loc_XLr_Rfi_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [0:x7=1; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=1; , 0:x7=2; 1:x9=1; 0:x13=2; , 0:x7=2; 1:x9=2; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'W_po_loc_XLr_po_loc_XLr_PosWR_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
now_herd_logs_ppo_remove {'W_po_loc_XLr_po_loc_XLr_PosWR_PosRR_DpAddrdW_Coe_Fence_rw_rwdWW_Coe': [1:x9=1; 0:x13=1; , 1:x9=1; 0:x13=2; , 1:x9=2; 0:x13=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+fence.rw.rw+poxx': [1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'S+fence.rw.rw+poxx': [1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=0; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 1:x6=1; 1:x7=1; 1:x10=2; 1:x11=1; [x]=2; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+fence.rw.rw+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+fence.rw.rw+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+porlps+NEW': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+porlps+NEW': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+poprl+porlp+NEW': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+poprl+porlp+NEW': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+porlp+poprl+NEW': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
now_herd_logs_ppo_remove {'S+porlp+poprl+NEW': [1:x5=0; [x]=1; , 1:x5=0; [x]=2; , 1:x5=1; [x]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+poprl+porlp+NEW': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2W+poprl+porlp+NEW': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+porlps+NEW': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2W+porlps+NEW': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+porlps+NEW': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+porlps+NEW': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+popaqs+NEW': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
now_herd_logs_ppo_remove {'SB+popaqs+NEW': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; , 0:x7=1; 1:x7=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tso+fence.tsoxx': [0:x7=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tso+fence.tsoxx': [0:x7=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxx+fence.tso': [0:x7=0; 0:x8=0; 1:x7=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxx+fence.tso': [0:x7=0; 0:x8=0; 1:x7=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+addr+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+addr+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+ctrl+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+ctrl+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+data+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+data+poxx': [0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=0; 1:x6=1; 1:x7=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x5=1; 1:x6=0; 1:x7=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+porlp+porlrl+NEW': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2W+porlp+porlrl+NEW': [[x]=1; [y]=1; , [x]=1; [y]=2; , [x]=2; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+porlrl+porlp+NEW': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+porlrl+porlp+NEW': [1:x7=0; [y]=1; , 1:x7=1; [y]=1; , 1:x7=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2Swap': [0:x10=0; 0:x11=0; 1:x10=1; 1:x11=2; [x]=1; [y]=2; , 0:x10=0; 0:x11=2; 1:x10=0; 1:x11=2; [x]=1; [y]=1; , 0:x10=1; 0:x11=2; 1:x10=0; 1:x11=0; [x]=2; [y]=1; ]}
now_herd_logs_ppo_remove {'2+2Swap': [0:x10=0; 0:x11=0; 1:x10=1; 1:x11=2; [x]=1; [y]=2; , 0:x10=0; 0:x11=2; 1:x10=0; 1:x11=2; [x]=1; [y]=1; , 0:x10=1; 0:x11=2; 1:x10=0; 1:x11=0; [x]=2; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsopxs': [0:x8=0; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsopxs': [0:x8=0; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsopxs': [0:x8=0; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x8=0; 1:x9=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=0; 1:x9=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsopxs': [0:x8=0; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x8=0; 1:x9=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=0; 1:x9=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x8=1; 1:x9=1; [x]=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+popxs': [0:x5=0; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=0; 1:x10=0; [x]=1; [y]=1; , 0:x5=0; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=0; 1:x10=1; [x]=0; [y]=1; , 0:x5=0; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=1; 1:x10=0; [x]=1; [y]=0; , 0:x5=0; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=1; 1:x10=1; [x]=0; [y]=0; , 0:x5=0; 0:x9=0; 1:x5=1; 1:x9=0; 0:x10=0; 1:x10=0; [x]=1; [y]=1; , 0:x5=0; 0:x9=0; 1:x5=1; 1:x9=0; 0:x10=0; 1:x10=1; [x]=0; [y]=1; , 0:x5=1; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=0; 1:x10=0; [x]=1; [y]=1; , 0:x5=1; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=1; 1:x10=0; [x]=1; [y]=0; ]}
now_herd_logs_ppo_remove {'LB+popxs': [0:x5=0; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=0; 1:x10=0; [x]=1; [y]=1; , 0:x5=0; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=0; 1:x10=1; [x]=0; [y]=1; , 0:x5=0; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=1; 1:x10=0; [x]=1; [y]=0; , 0:x5=0; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=1; 1:x10=1; [x]=0; [y]=0; , 0:x5=0; 0:x9=0; 1:x5=1; 1:x9=0; 0:x10=0; 1:x10=0; [x]=1; [y]=1; , 0:x5=0; 0:x9=0; 1:x5=1; 1:x9=0; 0:x10=0; 1:x10=1; [x]=0; [y]=1; , 0:x5=1; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=0; 1:x10=0; [x]=1; [y]=1; , 0:x5=1; 0:x9=0; 1:x5=0; 1:x9=0; 0:x10=1; 1:x10=0; [x]=1; [y]=0; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.tsopx+fence.tsoxp': [0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; [x]=1; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; [x]=1; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; [x]=1; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; [x]=2; [y]=2; ]}
now_herd_logs_ppo_remove {'2+2W+fence.tsopx+fence.tsoxp': [0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; [x]=1; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; [x]=1; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; [x]=1; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; [x]=2; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsopx+fence.tsoxp': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsopx+fence.tsoxp': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.tsopxs': [0:x9=0; 1:x9=2; 0:x10=0; 1:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=0; 1:x10=1; [x]=2; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=1; 1:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=1; 1:x10=1; [x]=2; [y]=2; , 0:x9=2; 1:x9=0; 0:x10=0; 1:x10=0; [x]=2; [y]=1; , 0:x9=2; 1:x9=0; 0:x10=0; 1:x10=1; [x]=2; [y]=1; , 0:x9=2; 1:x9=0; 0:x10=1; 1:x10=0; [x]=2; [y]=2; , 0:x9=2; 1:x9=0; 0:x10=1; 1:x10=1; [x]=2; [y]=2; , 0:x9=2; 1:x9=2; 0:x10=0; 1:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x9=2; 0:x10=0; 1:x10=1; [x]=2; [y]=1; , 0:x9=2; 1:x9=2; 0:x10=1; 1:x10=0; [x]=1; [y]=2; , 0:x9=2; 1:x9=2; 0:x10=1; 1:x10=1; [x]=2; [y]=2; ]}
now_herd_logs_ppo_remove {'2+2W+fence.tsopxs': [0:x9=0; 1:x9=2; 0:x10=0; 1:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=0; 1:x10=1; [x]=2; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=1; 1:x10=0; [x]=1; [y]=2; , 0:x9=0; 1:x9=2; 0:x10=1; 1:x10=1; [x]=2; [y]=2; , 0:x9=2; 1:x9=0; 0:x10=0; 1:x10=0; [x]=2; [y]=1; , 0:x9=2; 1:x9=0; 0:x10=0; 1:x10=1; [x]=2; [y]=1; , 0:x9=2; 1:x9=0; 0:x10=1; 1:x10=0; [x]=2; [y]=2; , 0:x9=2; 1:x9=0; 0:x10=1; 1:x10=1; [x]=2; [y]=2; , 0:x9=2; 1:x9=2; 0:x10=0; 1:x10=0; [x]=1; [y]=1; , 0:x9=2; 1:x9=2; 0:x10=0; 1:x10=1; [x]=2; [y]=1; , 0:x9=2; 1:x9=2; 0:x10=1; 1:x10=0; [x]=1; [y]=2; , 0:x9=2; 1:x9=2; 0:x10=1; 1:x10=1; [x]=2; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsopx+fence.tsoxp': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x9=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsopx+fence.tsoxp': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x9=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x9=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=0; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x9=1; [y]=0; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsoxps': [0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [x]=0; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsoxps': [0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x9=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x9=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x9=0; [x]=0; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+poxps': [0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'LB+poxps': [0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; [x]=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxp+fence.tsopx': [0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; [x]=0; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxp+fence.tsopx': [0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; [x]=0; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'ISA03+SB02': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; ]}
now_herd_logs_ppo_remove {'ISA03+SB02': [0:x7=0; 1:x7=1; , 0:x7=1; 1:x7=0; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'ISA03+SIMPLE+BIS': [[a]=2; ]}
now_herd_logs_ppo_remove {'ISA03+SIMPLE+BIS': [[a]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsoxp+fence.tsoxx': [0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsoxp+fence.tsoxx': [0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxx+fence.tsopx': [0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=0; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxx+fence.tsopx': [0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x8=1; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=0; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.tsopx+fence.tsoxx': [0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=0; 1:x12=0; [x]=2; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=0; 1:x12=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=0; 1:x12=0; [x]=2; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=0; 1:x12=1; [x]=2; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; ]}
now_herd_logs_ppo_remove {'2+2W+fence.tsopx+fence.tsoxx': [0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=0; 1:x12=0; [x]=2; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=0; 1:x12=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=0; , 0:x9=0; 1:x7=0; 1:x8=1; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=0; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=0; 1:x7=1; 1:x8=1; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=0; 1:x12=0; [x]=2; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=0; 1:x12=1; [x]=2; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x9=2; 1:x7=0; 1:x8=0; 0:x10=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsopx+fence.tsoxx': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; ]}
now_herd_logs_ppo_remove {'SB+fence.tsopx+fence.tsoxx': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=1; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsopx+fence.tsoxx': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; ]}
now_herd_logs_ppo_remove {'R+fence.tsopx+fence.tsoxx': [0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=0; 0:x9=0; 1:x7=1; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x8=0; 0:x9=1; 1:x7=0; 1:x8=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x8=2; 0:x9=0; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=0; 1:x11=1; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x8=2; 0:x9=1; 1:x7=0; 1:x8=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxx+fence.tsoxp': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=1; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxx+fence.tsoxp': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 1:x9=1; 0:x10=2; 0:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 1:x9=1; 0:x10=0; 0:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 1:x9=0; 0:x10=2; 0:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 1:x9=0; 0:x10=0; 0:x11=0; [x]=0; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+poxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=2; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=0; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; ]}
now_herd_logs_ppo_remove {'2+2W+poxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=2; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=0; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'S+poxxs': [0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=2; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=2; 1:x11=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=2; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=2; 1:x11=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=1; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=2; [y]=0; , 0:x7=1; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=2; [y]=0; , 0:x7=1; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=1; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; ]}
now_herd_logs_ppo_remove {'S+poxxs': [0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=2; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=2; 1:x11=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=2; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=2; 1:x11=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=2; 1:x11=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=1; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=2; [y]=0; , 0:x7=1; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=2; [y]=0; , 0:x7=1; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x6=0; 1:x7=0; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=1; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x6=0; 1:x7=1; 0:x11=0; 0:x12=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'2+2W+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=2; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=0; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; ]}
now_herd_logs_ppo_remove {'2+2W+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=2; 1:x12=1; [x]=2; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=2; 1:x12=1; [x]=2; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=1; [x]=0; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=2; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=2; [y]=1; , 0:x7=1; 0:x8=0; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=2; [y]=0; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=0; 0:x11=2; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=2; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=0; 1:x11=0; 1:x12=0; [x]=1; [y]=1; , 0:x7=1; 0:x8=1; 1:x7=0; 1:x8=1; 0:x11=0; 0:x12=1; 1:x11=0; 1:x12=0; [x]=1; [y]=0; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; ]}
now_herd_logs_ppo_remove {'SB+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'LB+poxxs': [0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; ]}
now_herd_logs_ppo_remove {'LB+poxxs': [0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=0; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=0; 0:x7=1; 1:x6=1; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=0; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x6=1; 0:x7=1; 1:x6=0; 1:x7=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'SB+poxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; ]}
now_herd_logs_ppo_remove {'SB+poxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=1; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; ]}
now_herd_logs_ppo_remove {'R+fence.tsoxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'R+poxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; ]}
now_herd_logs_ppo_remove {'R+poxxs': [0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=1; 1:x11=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=2; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=1; 1:x11=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=0; 0:x10=2; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=0; 1:x8=1; 0:x10=0; 0:x11=1; 1:x10=0; 1:x11=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=0; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=2; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x7=1; 1:x8=1; 0:x10=0; 0:x11=0; 1:x10=0; 1:x11=1; [x]=0; [y]=1; ]}
[]
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/memory_model_variant/variant/AMO_X_fence.cat
/home/whq/Desktop/code_list/slide/src/slide/../../tests/input/CAT/change/riscv-1.cat
now_herd_logs_ppo_add {'MP+poxxs': [0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=1; 1:x10=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=1; 1:x10=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=1; 1:x10=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=1; 1:x10=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=0; [y]=1; ]}
now_herd_logs_ppo_remove {'MP+poxxs': [0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=1; 1:x10=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=1; 1:x10=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=1; 1:x10=0; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=0; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=1; 1:x10=1; [x]=1; [y]=0; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=0; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=0; [x]=1; [y]=1; , 0:x7=0; 0:x8=0; 1:x6=1; 1:x7=1; 1:x9=1; 0:x10=0; 0:x11=0; 1:x10=1; [x]=1; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=0; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=0; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=1; 1:x10=1; [x]=0; [y]=0; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=0; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=0; [x]=0; [y]=1; , 0:x7=0; 0:x8=1; 1:x6=1; 1:x7=1; 1:x9=0; 0:x10=0; 0:x11=0; 1:x10=1; [x]=0; [y]=1; ]}
[]
final validate True
failed_litmus_tests []
[('ppo_candidate_func0', 'W;fence_r_rw;W', '\ndef ppo_candidate_func0(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func1', 'R;fence_rw_w;R', '\ndef ppo_candidate_func1(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func2', 'R;fence_w_w;W', '\ndef ppo_candidate_func2(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func3', 'W;fence_rw_w;R', '\ndef ppo_candidate_func3(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_rw_w(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func4', 'R;fence_w_w;R', '\ndef ppo_candidate_func4(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func5', 'W;fence_w_w;R', '\ndef ppo_candidate_func5(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_w_w(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func6', 'W;fence_r_rw;R', '\ndef ppo_candidate_func6(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_r_rw(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func7', 'R;fence_r_w;R', '\ndef ppo_candidate_func7(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func8', 'R;fence_w_r;R', '\ndef ppo_candidate_func8(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func9', 'R;fence_w_rw;R', '\ndef ppo_candidate_func9(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func10', 'W;fence_tso;R', '\ndef ppo_candidate_func10(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_tso(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func11', 'R;fence_w_rw;W', '\ndef ppo_candidate_func11(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_w_rw(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func12', 'R;fence_w_r;W', '\ndef ppo_candidate_func12(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func13', 'R;fence_r_r;W', '\ndef ppo_candidate_func13(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func14', 'W;fence_r_r;R', '\ndef ppo_candidate_func14(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func15', 'W;fence_r_w;R', '\ndef ppo_candidate_func15(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func16', 'R;fence_rw_r;W', '\ndef ppo_candidate_func16(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func17', 'W;fence_w_r;W', '\ndef ppo_candidate_func17(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_w_r(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func18', 'W;fence_r_w;W', '\ndef ppo_candidate_func18(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_r_w(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func19', 'W;fence_r_r;W', '\ndef ppo_candidate_func19(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_r_r(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func20', 'W;fence_rw_r;W', '\ndef ppo_candidate_func20(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.fence_rw_r(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func21', 'R;po;XLr', '\ndef ppo_candidate_func21(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.po(e1,e2) and ra.XLr(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func22', 'RL;po;R', '\ndef ppo_candidate_func22(ra, e1: Event, e2: Event) -> bool:\n    return ra.RL(e1) and ra.po(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func23', 'AMO;po;R', '\ndef ppo_candidate_func23(ra, e1: Event, e2: Event) -> bool:\n    return ra.AMO(e1) and ra.po(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func24', 'XLr;po;R', '\ndef ppo_candidate_func24(ra, e1: Event, e2: Event) -> bool:\n    return ra.XLr(e1) and ra.po(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func25', 'AMO;po;W', '\ndef ppo_candidate_func25(ra, e1: Event, e2: Event) -> bool:\n    return ra.AMO(e1) and ra.po(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func26', 'R;po;AMO', '\ndef ppo_candidate_func26(ra, e1: Event, e2: Event) -> bool:\n    return ra.R(e1) and ra.po(e1,e2) and ra.AMO(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func27', 'XLr;po;W', '\ndef ppo_candidate_func27(ra, e1: Event, e2: Event) -> bool:\n    return ra.XLr(e1) and ra.po(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func28', 'W;po;XLr', '\ndef ppo_candidate_func28(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.po(e1,e2) and ra.XLr(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func29', 'W;po;AMO', '\ndef ppo_candidate_func29(ra, e1: Event, e2: Event) -> bool:\n    return ra.W(e1) and ra.po(e1,e2) and ra.AMO(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func30', 'XSc;po;W', '\ndef ppo_candidate_func30(ra, e1: Event, e2: Event) -> bool:\n    return ra.XSc(e1) and ra.po(e1,e2) and ra.W(e2)\n', <PPOInitFlag.Verified: 3>), ('ppo_candidate_func31', 'XSc;po;R', '\ndef ppo_candidate_func31(ra, e1: Event, e2: Event) -> bool:\n    return ra.XSc(e1) and ra.po(e1,e2) and ra.R(e2)\n', <PPOInitFlag.Verified: 3>)]
ppo_list
[W];po;[W]
[W];fencerel(Fence.r.rw);[W]
[R];po;[R]
[R];fencerel(Fence.rw.w);[R]
[R];po;[W]
[R];fencerel(Fence.w.w);[W]
[W];po;[R]
[W];fencerel(Fence.rw.w);[R]
[R];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.w.w);[R]
[W];fencerel(Fence.r.rw);[R]
[R];fencerel(Fence.r.w);[R]
[R];ctrl;[R]
[R];fencerel(Fence.w.r);[R]
[R];fencerel(Fence.w.rw);[R]
[W];fencerel(Fence.tso);[R]
[W];fencerel(Fence.r.r);[R]
[W];fencerel(Fence.r.w);[R]
[R];po;[W];po;[R]
[R];addr;[W];po;[R]
[R];data;[W];po;[R]
[W];fencerel(Fence.w.r);[W]
[W];fencerel(Fence.r.w);[W]
[W];fencerel(Fence.r.r);[W]
[W];fencerel(Fence.rw.r);[W]
[R];po;[XLr]
[RL];po;[R]
[AMO];po;[R]
[XLr];po;[R]
[AMO];po;[W]
[R];po;[AMO]
[XLr];po;[W]
[W];po;[XLr]
[XSc];po;[R]
[XSc];fencerel(Fence.r.r);[R]
[W];po;[AMO]
[XSc];po;[W]
[R];fencerel(Fence.w.r);[W]
[R];fencerel(Fence.w.rw);[W]
[R];fencerel(Fence.r.r);[W]
[R];fencerel(Fence.rw.r);[W]
[R];po;[R];po;[R]
[R];addr;[R];po;[R]
[R];po;[R];ctrl;[R]
[R];addr;[R];ctrl;[R]
